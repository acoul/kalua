#!/bin/sh

case "$ACTION" in
	ifup)
		# see dnsmasq-magic below
		[ -e '/etc/init.d/apply_profile' -a "$INTERFACE" = 'lan' ] && {
			uci set dhcp.lan.ignore='1'
			grep -sq ^'dhcp-range=lan,' '/var/etc/dnsmasq.conf' && {
				/etc/init.d/dnsmasq restart
				logger -s '[OK] no LAN-dhcp on virgin boots'
			}
		}

		[ -s '/tmp/loader' ] || . /etc/rc.common /etc/init.d/cron.user boot
		[ -s '/tmp/loader' ] || /etc/kalua_init
		. /tmp/loader

		_system adjust_coredump

		uci -q get network.$INTERFACE.dyndns >/dev/null && {
			_curl it "$( uci -q get network.$INTERFACE.dyndns )"
		}

		case "$( uci -q get network.$INTERFACE.proto )" in
			'dhcp')
				echo >>$SCHEDULER '_netparam check'
			;;
			'pppoe')
				# mark state 'good'
				_watch pppoe
			;;
		esac

		# TODO: move to olsr-hotplug
		echo >>$SCHEDULER_IMPORTANT "_olsr throttle_traffic '$DEVICE' myself"
		echo >>$SCHEDULER_IMPORTANT '_net local_inet_offer update_cache'

		_net active_ap_devices >"$TMPDIR/WIFI_DEVS_AP"

		# e.g. 'wan' or 'wan2'
		case "$INTERFACE" in
			'wlan'*)
				test -e '/tmp/PHYRESTART' && {
					# see wifi_phy_restart()
					# TODO: this is only the 1st interface
					_log it $ACTION.$INTERFACE daemon info "[OK] acking $INTERFACE/$DEVICE"
					rm '/tmp/PHYRESTART'
				}
			;;
			'mastergate')
				_net roaming_eventlistener start

				$IPT -t nat --new 'NAT_ALIEN_ROAMERS' && {
					# FIXME! -i is empty in POSTROUTING, so restrict to 'br-mastergate' does not work
#					$IPT -t nat -I 'NAT_ALIEN_ROAMERS' -s "$ROAMING_NET" ! -d "$ROAMING_NET" -j MASQUERADE
					# dont NAT our own OLSR-HNA4-range:
#					$IPT -t nat -I 'NAT_ALIEN_ROAMERS' -s "192.168.$NODENUMBER_ROAMING.0/24" -j RETURN
					$IPT -t nat -I POSTROUTING -j 'NAT_ALIEN_ROAMERS'
				}
			;;
			'innercityVPN')
				_vpn hideandseek_user_add 'setup_default_route'
				_vpn hideandseek_user_add "192.168.$NODENUMBER_ROAMING.0/24"

				# in theory, WAN must be up before this interface can be brought up
				# so we can rely on hotplug wan-net file
				read -r PRIVATE_WANNETS <'/tmp/HOTPLUG_PRIVATE_WANNETS' && {
					for OBJ in $PRIVATE_WANNETS; do {
						_vpn hideandseek_user_add "$OBJ" exclude
					} done
				}

				_vpn hideandseek_user_add "$ROAMING_NET"
				_vpn hideandseek_user_add '10.63.0.0/16'	# mesh
			;;
			'wan'*)
				# TODO: special call of 'dev2ip'
				# IPv4 only
				ip -oneline -family inet address show dev "$DEVICE" >"/tmp/hotplug_temp_$INTERFACE"

				while read -r LINE; do {
					# fetch alias-adresses
					explode $LINE
					PWANADR="${4%/*}"
					PWANMSK="${4#*/}"

					_net ip4_is_private "$PWANADR" && {
						LIST_PRIV_WAN="$LIST_PRIV_WAN $PWANADR/$PWANMSK"

						bool_true 'system.@weblogin[0].enabled' && {
							mkdir "/tmp/netfilter_allow_privnet_$PWANADR-$PWANMSK" && {
								# dont splash these hosts
								$IPT -t mangle -I PREROUTING -s $PWANADR/$PWANMSK -j ACCEPT
							}
						}
					}
				} done <"/tmp/hotplug_temp_$INTERFACE"
				rm "/tmp/hotplug_temp_$INTERFACE"

				# needed for e.g. interface 'innercityVPN'
				[ -n "$LIST_PRIV_WAN" ] && echo "$LIST_PRIV_WAN" >'/tmp/HOTPLUG_PRIVATE_WANNETS'

				# here we get the main-IP and no aliases
				WANADR="$( ubus call network.interface.$INTERFACE status | grep '"address": ' | head -n1 | cut -d'"' -f4 )"

				# FIXME! with portforwarding, also a private-IP must be "protected"
				if _net ip4_is_private "$WANADR"; then
					bool_true "network.$INTERFACE.public_ip" && {
						# we know it should be a public ip, but by accident... (e.g. 2nd internal DCHP)
						echo >>$SCHEDULER_IMPORTANT "ifup $INTERFACE"
					}
				else
					_system maintenance_window_active || {
						_log it $ACTION.$INTERFACE daemon alert "unscheduled event: WANADR: $WANADR"
					}

					mkdir "/tmp/fail2ban_$DEVICE" && {
						_log it dyndns.$ACTION daemon info "prevent DNS-AmpAttac on dev '$DEVICE' for IP '$WANADR'"
						$IPT -A INPUT -i $DEVICE -p tcp --dport 53 -j DROP
						$IPT -A INPUT -i $DEVICE -p udp --dport 53 -j DROP

						WIFI_ADR="$( _ipsystem getvar 'WIFI_ADR' )"
						WIFI_PRE="$( _ipsystem getvar 'WIFI_PRE' )"
						THRUSTED_NET="$WIFI_ADR/$WIFI_PRE"

						$IPT -I INPUT ! -s $MONITORING_SERVERIP -p tcp --dport 22 -j REJECT
						$IPT -I INPUT   -s $THRUSTED_NET	-p tcp --dport 22 -j ACCEPT
						$IPT -I INPUT   -s $ROAMING_NET		-p tcp --dport 22 -j ACCEPT
						$IPT -I INPUT   -s 127.0.0.1            -p tcp --dport 22 -j ACCEPT
					}

					# see 'allow_privnet' above
					for PRIV_WAN in $LIST_PRIV_WAN; do {
						$IPT -I INPUT -s $PRIV_WAN -j ACCEPT
					} done

					# important for sending new public ip-address
					. /usr/sbin/cron.monitoring.functions
					heartbeat_minimal_send
				fi

				# FIXME! mask /8 is hardcoded but usually much smaller (so the test is OK)
				_net both_ipv4_in_same_subnet "$WANADR/8" "${WIFINET:-$LANNET}/${WIFIPRE:-8}" || {
					_netfilter masquerade_start "$DEVICE"
				}

				echo >>$SCHEDULER "_netfilter portforwarding_start $DEVICE"

				# FIXME! - autounroll if interface goes down?

				# not local, but over wan: -> should NOT match - FIXME!
				# default via 172.17.0.2 dev eth0.2  metric 2 onlink
				# 8.8.8.8 via 172.17.0.2 dev eth0.2  src 10.10.13.61 \    cache

				# really local (wan-dhcp with pub IP)
				# default via 92.206.84.1 dev eth0.2  proto static  src 92.206.85.103
				# 8.8.8.8 via 92.206.84.1 dev eth0.2  src 92.206.85.103 \    cache

				# really local (wan-pppoe)
				# default via 217.0.116.253 dev pppoe-wan  proto static
				# 8.8.8.8 via 217.0.116.253 dev pppoe-wan  src 87.171.16.58 \    cache

				# really local (wan-dhcp)
				# default via 192.168.2.1 dev eth1  proto static  src 192.168.2.147
				# default via 10.63.71.249 dev tap0  metric 2 onlink
				# 8.8.8.8 via 192.168.2.1 dev eth1  src 192.168.2.147 \    cache

				# FIXME!
				ip -oneline route get '8.8.8.8' | fgrep -q " dev XXX " && {
#				ip -oneline route get '8.8.8.8' | fgrep -q " dev $DEVICE " && {
					_log it $ACTION.$INTERFACE.$DEVICE daemon info '[OK] wow - local inet offer'

					. /etc/init.d/override_uci_vars
					uci_already_added olsrd Hna4 netaddr '0.0.0.0' || {
						pidof olsrd >/dev/null && {
							_log it $ACTION.$INTERFACE.$DEVICE daemon alert 'local inet offer, add missing OLSRd HNA 0/0'
							uci add olsrd Hna4 >/dev/null
							uci set olsrd.@Hna4[-1].netaddr='0.0.0.0'
							uci set olsrd.@Hna4[-1].netmask='0.0.0.0'
							. /etc/rc.common /etc/init.d/olsrd restart
						}
					}
				}
			;;
		esac
	;;
	ifupdate|ifdown)
		# wrong place but works:
		[ -e '/etc/crontabs/root' ] && {
			[ -e '/tmp/loader' ] || . /etc/rc.common /etc/init.d/cron.user boot
			. /tmp/loader

			[ $( _stopwatch stop '/tmp/CRON_LASTCALL' interim,nolog,seconds ) -gt 300 ] && {
				# locking maybe unneeded
				mkdir '/tmp/LOCK_dhcpscript_cron_restart' && {
					for FILE in /proc/*; do {
						case "$FILE" in */[0-9]*)
							# FIXME! the dot must be a TAB
							# TODO: compile zombie.o and test
							grep -sq 'State:.Z' "$FILE/status" && {
								_system crashreboot 'zombies'
							}
						esac
					} done

					if pidof crond >/dev/null; then
						_stopwatch start '/tmp/CRON_LASTCALL' global
						_log it iface_$ACTION daemon alert "cron hangs, restarting"
						/etc/init.d/S51crond_fff+ restart
					else
						_stopwatch start '/tmp/CRON_LASTCALL' global
						_log it iface_$ACTION daemon alert "cron died, starting"
						/etc/init.d/S51crond_fff+ start
					fi

					rm -fR '/tmp/LOCK_dhcpscript_cron_restart'
				}
			}
		}

		. /tmp/loader
		echo >>$SCHEDULER_IMPORTANT '_net local_inet_offer update_cache'
	;;
esac

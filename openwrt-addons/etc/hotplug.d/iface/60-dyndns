#!/bin/sh

case "$ACTION" in
	ifup)
		[ -s '/tmp/loader' ] || . /etc/rc.common /etc/init.d/cron.user boot
		[ -s '/tmp/loader' ] || /etc/kalua_init
		. /tmp/loader
		_system adjust_coredump

		# if unconfigured: disable lan-DHCP
		if   [ -e '/etc/init.d/apply_profile' -a "$INTERFACE" = 'lan' ]; then
			uci set dhcp.lan.ignore='1'
			grep -sq ^'dhcp-range=lan,' '/var/etc/dnsmasq.conf' && {
				/etc/init.d/dnsmasq restart
				logger -s '[OK] no LAN-dhcp on virgin boots'
			}
		elif [ "$INTERFACE" = 'loopback' ]; then
			grep -q ^'[a-z]' '/etc/resolv.conf' || {
				_log it $ACTION.$INTERFACE daemon alert 'empty resolv.conf'
				/etc/init.d/dnsmasq restart
			}
		fi

		uci -q get network.$INTERFACE.dyndns >/dev/null && {
			_curl it "$( uci -q get network.$INTERFACE.dyndns )"
		}

		case "$( uci -q get network.$INTERFACE.proto )" in
			'dhcp')
				echo >>$SCHEDULER '_netparam check'
			;;
			'pppoe')
				# mark state 'good'
				_watch pppoe
			;;
		esac

		case "$( uci -q get network.wan.proto )" in
			*'ppp'*)
			;;
			*)
				_system kmodules unload 'ppp_async pppoe pppox ppp_generic slhc crc_ccitt'
			;;
		esac

		# TODO: move to olsr-hotplug
		echo >>$SCHEDULER_IMPORTANT "_olsr throttle_traffic '$DEVICE' myself"
		echo >>$SCHEDULER_IMPORTANT '_net local_inet_offer update_cache'

		_net active_ap_devices >"$TMPDIR/WIFI_DEVS_AP"

		# e.g. 'wan' or 'wan2'
		case "$INTERFACE" in
			'wlan'*)
				bool_true 'system.@system[0].leds_ignore' || _wifi led on "$DEVICE"

				test -e '/tmp/PHYRESTART' && {
					# see wifi_phy_restart()
					# TODO: this is only the 1st interface
					_log it $ACTION.$INTERFACE daemon info "[OK] acking $INTERFACE/$DEVICE"
					rm '/tmp/PHYRESTART'
				}
			;;
			'mastergate')
				_net roaming_eventlistener start 'hotplug: mastergate comes up'

				$IPT -t nat --new 'NAT_ALIEN_ROAMERS' && {
					# FIXME! -i is empty in POSTROUTING, so restrict to 'br-mastergate' does not work
#					$IPT -t nat -I 'NAT_ALIEN_ROAMERS' -s "$ROAMING_NET/$ROAMING_PRE" ! -d "$ROAMING_NET/$ROAMING_PRE" -j MASQUERADE
					# do not NAT our own OLSR-HNA4-range:
#					$IPT -t nat -I 'NAT_ALIEN_ROAMERS' -s "$ROAMING_NET_LOCAL/$ROAMING_PRE_LOCAL" -j RETURN
					$IPT -t nat -I POSTROUTING -j 'NAT_ALIEN_ROAMERS'
				}
			;;
			'innercityVPN')
				_vpn hideandseek_user_add "$ROAMING_NET_LOCAL/$ROAMING_PRE_LOCAL"

				# in theory, WAN must be up before this interface can be brought up
				# so we can rely on hotplug wan-net file
				read -r PRIVATE_WANNETS <'/tmp/HOTPLUG_PRIVATE_WANNETS' && {
					for OBJ in $PRIVATE_WANNETS; do {
						_vpn hideandseek_user_add "$OBJ" exclude
					} done
				}

				_vpn hideandseek_user_add "$ROAMING_NET/$ROAMING_PRE"
				_vpn hideandseek_user_add '10.63.0.0/16'	# mesh
			;;
			'wan'*|'wwan'*)
				# TODO: special call of 'dev2ip'
				# IPv4 only
				ip -oneline -family inet address show dev "$DEVICE" >"/tmp/hotplug_temp_$INTERFACE"

				while read -r LINE; do {
					# fetch alias-addresses
					set -- $LINE	# FIXME explode
					PWANADR="${4%/*}"
					PWANMSK="${4#*/}"

					_net ip4_is_private "$PWANADR" && {
						LIST_PRIV_WAN="$LIST_PRIV_WAN $PWANADR/$PWANMSK"

						bool_true 'system.@weblogin[0].enabled' && {
							mkdir "/tmp/netfilter_allow_privnet_$PWANADR-$PWANMSK" && {
								# do not splash these hosts
								$IPT -t mangle -I PREROUTING -s $PWANADR/$PWANMSK -j ACCEPT
							}
						}
					}
				} done <"/tmp/hotplug_temp_$INTERFACE"
				rm "/tmp/hotplug_temp_$INTERFACE"

				# needed for e.g. interface 'innercityVPN'
				[ -n "$LIST_PRIV_WAN" ] && echo "$LIST_PRIV_WAN" >'/tmp/HOTPLUG_PRIVATE_WANNETS'

				# here we get the main-IP and no aliases
				WANADR="$( ubus call network.interface.$INTERFACE status | grep '"address": ' | head -n1 | cut -d'"' -f4 )"

				# FIXME! with portforwarding, also a private-IP must be "protected"
				if _net ip4_is_private "$WANADR"; then
					bool_true "network.$INTERFACE.public_ip" && {
						# we know it should be a public ip, but by accident... (e.g. 2nd internal DCHP)
						echo >>$SCHEDULER_IMPORTANT "ifup $INTERFACE"
					}
				else
					_system maintenance_window_active || {
						_log it $ACTION.$INTERFACE daemon alert "unscheduled event: WANADR: $WANADR"
					}

					mkdir "/tmp/fail2ban_$DEVICE" && {
						_log it dyndns.$ACTION daemon info "prevent DNS-AmpAttac on dev '$DEVICE' for IP '$WANADR'"
						$IPT -A INPUT -i $DEVICE -p tcp --dport 53 -j DROP
						$IPT -A INPUT -i $DEVICE -p udp --dport 53 -j DROP

						# ssh only from RFC1918 and thrusted:
						$IPT -I INPUT ! -s $MONITORING_SERVERIP -p tcp --dport 22 -j REJECT
						for RFC1918 in	'172.16.0.0/12' \
								'192.168.0.0/16' \
								'10.0.0.0/8' \
								'169.254.0.0/16' \
								'127.0.0.0/8' \
								'100.64.0.0/10'; do {
							$IPT -I INPUT -s $RFC1918 -p tcp --dport 22 -j ACCEPT
						} done
					}

					# see 'allow_privnet' above
					for PRIV_WAN in $LIST_PRIV_WAN; do {
						$IPT -I INPUT -s $PRIV_WAN -j ACCEPT
					} done

					# important for sending new public ip-address
					. /usr/sbin/cron.monitoring.functions
					heartbeat_minimal_send
				fi

				# FIXME! mask /8 is hardcoded but usually much smaller (so the test is OK)
				if _net both_ipv4_in_same_subnet "$WANADR/8" "${WIFINET:-$LANNET}/${WIFIPRE:-8}"; then
					case "$DEVICE" in
						'wwan'*)
							_netfilter masquerade_start "$DEVICE"
						;;
					esac
				else
					_netfilter masquerade_start "$DEVICE"
				fi

				echo >>$SCHEDULER "_netfilter portforwarding_start $DEVICE"

				# FIXME! - autounroll if interface goes down?

				is_valid_gateway()
				{
					local device="$1"
					local gw_route gw_ipaddr

					cat /proc/uptime	# debug

					gw_route="$( ip -oneline route get '8.8.8.8' )"
					echo "$gw_route" | fgrep -q " dev $device " || return 1

					# 8.8.8.8 via 10.1.3.1 dev eth0.2 src 10.1.3.166 \ cache
					set -- $gw_route	# FIXME: explode
					shift
					gw_ipaddr="$( _sanitizer run "$*" ip4 )"	# 1st IP: 10.1.3.1

					echo "# gw_route: $gw_route"
					echo "# gw_ipaddr: $gw_ipaddr"

					if _net ip_reachable "$gw_ipaddr" 5 "$device"; then
						echo "# OK: _net ip_reachable $gw_ipaddr 5 $device"
					else
						echo "# ERR: _net ip_reachable $gw_ipaddr 5 $device"
						return 1
					fi

					# reversed returncode
					! _ipsystem get "$gw_ipaddr"
				}

				is_valid_gateway "$DEVICE" >"$TMPDIR/is_valid_gateway_$DEVICE" && {
					_log it $ACTION.$INTERFACE.$DEVICE daemon info '[OK] wow - local inet offer'
					_olsr hna4_inetoffer start "hotplug: $ACTION.$INTERFACE.$DEVICE"
				}
			;;
		esac
	;;
	ifupdate|ifdown)
		case "$ACTION.$INTERFACE" in
			'ifdown.wan'*|'ifdown.wwan'*)
				. /tmp/loader
				_olsr hna4_inetoffer stop "hotplug: $ACTION.$INTERFACE.$DEVICE"
			;;
			'ifdown.wlan'*)
				. /tmp/loader
				bool_true 'system.@system[0].leds_ignore' || _wifi led off "$DEVICE"
			;;
		esac

		# wrong place but works:
		[ -e '/etc/crontabs/root' ] && {
			[ -e '/tmp/loader' ] || . /etc/rc.common /etc/init.d/cron.user boot
			. /tmp/loader

			[ $( _stopwatch stop '/tmp/CRON_LASTCALL' interim,nolog,seconds ) -gt 300 ] && {
				# locking maybe unneeded
				mkdir '/tmp/LOCK_dhcpscript_cron_restart' && {
					if pidof crond >/dev/null; then
						_stopwatch start '/tmp/CRON_LASTCALL' global
						_log it iface_$ACTION daemon alert "cron hangs, restarting"
						/etc/init.d/S51crond_fff+ restart
					else
						_stopwatch start '/tmp/CRON_LASTCALL' global
						_log it iface_$ACTION daemon alert "cron died, starting"
						/etc/init.d/S51crond_fff+ start
					fi

					rm -fR '/tmp/LOCK_dhcpscript_cron_restart'
				}
			}
		}

		. /tmp/loader
		echo >>$SCHEDULER_IMPORTANT '_net local_inet_offer update_cache'
	;;
esac

#!/bin/sh

case "$ACTION" in
	ifup)
		# see dnsmasq-magic below
		[ -e '/etc/init.d/apply_profile' -a "$INTERFACE" = 'lan' ] && {
			uci set dhcp.lan.ignore='1'
			grep -sq ^'dhcp-range=lan,' '/var/etc/dnsmasq.conf' && {
				/etc/init.d/dnsmasq restart
				logger -s '[OK] no LAN-dhcp on virgin boots'
			}
		}

		[ -e '/tmp/loader' ] || . /etc/rc.common /etc/init.d/cron.user boot
		. /tmp/loader

		uci -q get network.$INTERFACE.dyndns >/dev/null && {
			_wget do "$( uci -q get network.$INTERFACE.dyndns )"
		}

		[ "$( uci -q get network.$INTERFACE.proto )" = 'dhcp' ] && {
			echo >>$SCHEDULER '/etc/init.d/S41build_static_netparam'
		}

		# TODO: move to olsr-hotplug
		echo >>$SCHEDULER_IMPORTANT "_olsr throttle_traffic '$DEVICE' myself"

		echo >>$SCHEDULER_IMPORTANT '_net local_inet_offer update_cache'

		# e.g. 'wan' or 'wan2'
		case "$INTERFACE" in
			'wlan'*)
				test -e '/tmp/PHYRESTART' && {
					# see wifi_phy_restart()
					# TODO: this is only the 1st interface
					_log do $ACTION.$INTERFACE daemon info "[OK] acking $INTERFACE/$DEVICE"
					rm '/tmp/PHYRESTART'
				}
			;;
			'mastergate')
				case "$CONFIG_PROFILE" in
					liszt28*)
						pidof iw >/dev/null || /usr/sbin/cron.wireless_events &
					;;
				esac

				mkdir '/tmp/nat_for_alien_roamers' && {
					# dont NAT our own OLSR-HNA4-range
					$IPT -t nat --new 'NAT_ALIEN_ROAMERS'
					$IPT -t nat -I 'NAT_ALIEN_ROAMERS' -s "192.168.$NODENUMBER_ROAMING.0/24" -j RETURN
					$IPT -t nat -I 'NAT_ALIEN_ROAMERS' -s '192.168.0.0/16' ! -d '192.168.0.0/16' -j MASQUERADE
					$IPT -t nat -I POSTROUTING -j 'NAT_ALIEN_ROAMERS'
				}
			;;
			'innercityVPN')
				_vpn hideandseek_user_add 'setup_default_route'
				# FIXME
				_vpn hideandseek_user_add "192.168.$NODENUMBER_ROAMING.0/24"
			;;
			'wan'*)
				# TODO: special call of 'dev2ip'
				ip --oneline address show dev "$DEVICE" | while read LINE; do {
					# 19: eth0.2 inet 10.63.99.61/30 brd 10.63.99.63  scope global eth0.2\ ...
					# 19: eth0.2 inet6 fe80::da5d:4cff:fe9c:2f1a/64   scope link \ ...
					case "$LINE" in
						*'inet '*)
							# fetch alias-adresses
							set -- $LINE
							PWANADR="${4%/*}"
							PWANMSK="${4#*/}"

							_net ip4_is_private "$PWANADR" && {
								LIST_PRIV_WAN="$LIST_PRIV_WAN $PWANADR/$PWANMSK"

								bool_true 'system.@weblogin[0].enabled' && {
									mkdir "/tmp/netfilter_allow_privnet_$PWANADR-$PWANMSK" && {
										# dont splash these hosts
										$IPT -t mangle -I PREROUTING -s $PWANADR/$PWANMSK -j ACCEPT
									}
								}
							}
						;;
					esac
				} done

				# here we get the main-IP and no aliases
				WANADR="$( ubus call network.interface.wan status | grep '"address": ' | head -n1 | cut -d'"' -f4 )"

				# FIXME! when there is an portforwarding, even a private-IP must be "protected"
				if _net ip4_is_private "$WANADR"; then
					bool_true 'network.wan.public_ip' && {
						# we know it should be a public ip, but by accident... (e.g. 2nd internal DCHP)
						echo >>$SCHEDULER_IMPORTANT 'ifup wan'
					}
				else
					_system maintenance_window_active || {
						_log do $ACTION.$INTERFACE daemon alert "unscheduled event: WANADR: $WANADR"
					}

					mkdir '/tmp/fail2ban' && {
						_log do dyndns.$ACTION daemon info "prevent DNS-AmpAttac on dev '$DEVICE' for IP $WANADR"

						$IPT -I INPUT -i $DEVICE -p tcp --dport 53 -j DROP
						$IPT -I INPUT -i $DEVICE -p udp --dport 53 -j DROP
						# see 'allow_privnet' above
						for PRIV_WAN in $LIST_PRIV_WAN; do {
							$IPT -I INPUT -s $PRIV_WAN -j ACCEPT
						} done

						# WIFI_IP=10.63.99.1/8
						WIFI_ADR="$( _ipsystem getvar 'WIFI_ADR' )"
						WIFI_PRE="$( _ipsystem getvar 'WIFI_PRE' )"
						THRUSTED_NET="$WIFI_ADR/$WIFI_PRE"

						$IPT -I INPUT ! -s $MONITORING_SERVERIP -p tcp --dport 22 -j REJECT
						$IPT -I INPUT   -s $THRUSTED_NET	-p tcp --dport 22 -j ACCEPT
						$IPT -I INPUT   -s 127.0.0.1            -p tcp --dport 22 -j ACCEPT
					}

					# important for sending new public ip-address
					. /usr/sbin/cron.monitoring.functions
					heartbeat_minimal_send
				fi

				# FIXME!
				bool_true 'system.@weblogin[0].allow_wan' && $IPT -I INPUT -j ACCEPT
				echo >>$SCHEDULER "_netfilter portforwarding_start $WANADR"
			;;
		esac
	;;
	ifupdate|ifdown)
		# wrong place but works:
		[ -e '/etc/crontabs/root' ] && {
			[ -e '/tmp/loader' ] || . /etc/rc.common /etc/init.d/cron.user boot
			. /tmp/loader

			[ "$( _stopwatch stop '/tmp/CRON_LASTCALL' interim,nolog,seconds )" -gt 300 ] && {
				# locking maybe unneeded
				mkdir '/tmp/LOCK_dhcpscript_cron_restart' && {
					if pidof crond >/dev/null; then
						_stopwatch start '/tmp/CRON_LASTCALL' global
						_log do iface_$ACTION daemon alert "cron hangs, restarting"
						/etc/init.d/S51crond_fff+ restart
					else
						_stopwatch start '/tmp/CRON_LASTCALL' global
						_log do iface_$ACTION daemon alert "cron died, starting"
						/etc/init.d/S51crond_fff+ start
					fi

					rm -fR '/tmp/LOCK_dhcpscript_cron_restart'
				}
			}
		}

		. /tmp/loader
		echo >>$SCHEDULER_IMPORTANT '_net local_inet_offer update_cache'
	;;
esac

#!/bin/sh
. /tmp/loader

netparam_for_uci_devices()
{
	local NAME IFNAME ADDRESS NETMASK BROADCAST NETWORK PREFIX line

	for DEVICE in loopback wlan lan wan ; do {
		case "$DEVICE" in
			loopback) NAME="LO" ;;
			wlan)	  NAME="WIFI" ;;
			lan)	  NAME="LAN" ;;
			wan)	  NAME="WAN" ;;
		esac

		IFNAME="$( uci -q get network.$DEVICE.ifname )"

		# make sure, that hybrid interfaces use the adhoc-interface
		# for 'testing' in scheduler: incoming_wifi_activity()
		# otherwise use the first interface
		[ "$DEVICE" = 'wlan' -a -e '/etc/config/wireless' ] && {
			[ -e '/sbin/ifstatus' ] && {
				if DEVICE="$( uci -q get system.@monitoring[0].wifi_netparam_name )"; then
					:
				else
					DEVICE='wlanadhoc'
				fi

				if   fgrep -q "$DEVICE" '/etc/config/wireless'; then
					# typical: wlan0-1
					IFNAME="$( ifstatus "$DEVICE" | fgrep '"device":' | cut -d'"' -f4 )"
				elif fgrep -q "wlan" '/etc/config/wireless'; then
					# typical: wlan0
					DEVICE='wlan'
					IFNAME="$( ifstatus "$DEVICE" | fgrep '"device":' | cut -d'"' -f4 )"
				fi
			}

			[ -z "$IFNAME" ] && {
				bool_true 'wireless.radio0.disabled' || {
					# if we have only disabled all VIF's, there is also no wifi:
					_net dev_is_valid 'wlan0' && IFNAME='wlan0'
				}
			}
		}

		ADDRESS="$( uci -q get network.$DEVICE.ipaddr  )"
		NETMASK="$( uci -q get network.$DEVICE.netmask )"

		case "$( uci get network.$DEVICE.proto )" in
			dhcp)
				ADDRESS="$( _net dev2ip $IFNAME )"
				NETMASK="$( _net dev2ip $IFNAME mask )"
			;;
			pppoe)							# fixme! should also work for pppoe-lan etc.
				IFNAME="pppoe-wan"
				ADDRESS="$( _net dev2ip $IFNAME )"
				NETMASK="$( _net dev2ip $IFNAME mask )"
			;;
		esac

		case "$DEVICE" in
			wlan)
				bool_true 'wireless.radio0.disabled' && {
					IFNAME=; ADDRESS=; NETMASK=
				}
			;;
			lan)
				test -n "$ADDRESS" || {
					# e.g. vpn-server
					get_first_non_loopback_ifname()
					{
						ip --oneline link show | while read -r line; do {
							set -- $line
							[ "$2" = 'lo:' ] || {
								echo "$2" | cut -d':' -f1
								return
							}
						} done
					}

					IFNAME="$( get_first_non_loopback_ifname )"
					ADDRESS="$( _net dev2ip "$IFNAME" 'ip_but_noloopback' )"
					NETMASK="$( _net dev2ip "$IFNAME" 'ip_but_noloopback' 'mask' )"
					PREFIX="$(  _net dev2ip "$IFNAME" 'ip_but_noloopback' 'CIDR' )"
				}
			;;
		esac

		echo "${NAME}DEV=$( _sanitizer run "$IFNAME" firstword )"
		echo "${NAME}ADR=$ADDRESS"
		echo "${NAME}MSK=$NETMASK"

		BROADCAST=;NETWORK=;PREFIX=
		[ -n "$ADDRESS" -a -n "$NETMASK" -a -e '/bin/ipcalc.sh' ] && eval $( ipcalc.sh "$ADDRESS" "$NETMASK" )

		echo "${NAME}BRC=$BROADCAST"
		echo "${NAME}NET=$NETWORK"
		echo "${NAME}PRE=$PREFIX"
	} done

	list_wifi_devs()
	{
		local network_name list_wifi_names i

		# shellcheck disable=SC2034
		for i in 0 1 2 3 4 5 6 7; do {
			list_wifi_names="$list_wifi_names $( uci -q get wireless.@wifi-iface[$i].network )"
		} done

		# for old firmwares
		[ -e "/sbin/ifstatus" ] || {
			[ -n "$list_wifi_names" ] && {
				[ -e '/etc/config/wireless' ] && {
					bool_true 'wireless.radio0.disabled' || echo 'wlan0'
				}
			}

			return 0
		}

		# uci get wireless.@wifi-iface[0].device -> radio0
		# uci get wireless.radio0.disabled -> 1?

		for network_name in $list_wifi_names; do {
			# can be:
			# JSON: "device": "wlan0",
			# or:
			# Interface wlan0 not found
			ifstatus "$network_name" | fgrep '"device":' | cut -d':' -f2 | cut -d'"' -f2
		} done
	}

	# force to 1 line
	echo "WIFI_DEVS='$( for IFNAME in $( list_wifi_devs ); do echo -n "$IFNAME "; done )'"

	[ ! -e '/tmp/dmesg.boot' -a -e '/usr/sbin/cron.check_klog' ] && . /usr/sbin/cron.check_klog
	fgrep -sq "phy0: failed to initialize PHY" "/tmp/dmesg.boot" && {
		echo "WIFIDEV=	# failed to initialize PHY"
	}
}

_build()
{
	local FUNC="build"
	local FILE="/tmp/NETPARAM"

	_log it $FUNC daemon debug "building '$FILE' for an uci-device"
	netparam_for_uci_devices >$FILE
}

if [ $( _system uptime sec ) -lt 60 -a $OPENWRT_REV -gt 0 ]; then
	if [ -e "/www/NETPARAM" ]; then
		cp "/www/NETPARAM" "/tmp/NETPARAM"
	else
		sleep 30		# FIXME! 'ifstatus wlanadhoc' empty, needs about 18 sec till OK on 1043ND
	fi
else
	HASH_OLD="$( _file hash '/tmp/NETPARAM' )"
	_build

	if [ -e '/www/NETPARAM' ]; then
		. '/tmp/NETPARAM'

		needs_newer_copy()
		{
			test "$( grep -s 'DEV=' /www/NETPARAM )" != "$( grep -s 'DEV=' /tmp/NETPARAM )"
		}

		needs_newer_copy && {
			if [ -d '/www' ]; then
				_log it earlyboot_netparam daemon alert 'changed values - updating /www/NETPARAM'
				cp '/tmp/NETPARAM' '/www/NETPARAM'
			else
				_log it earlyboot_netparam daemon info 'changed values: cannot write to /www'
			fi
		}
	else
		if [ -d '/www' ]; then
			_log it earlyboot_netparam daemon alert "store initial version: WIFIDEV='$WIFIDEV'"
			cp '/tmp/NETPARAM' '/www/NETPARAM'
		else
			_log it earlyboot_netparam daemon info 'write initial version: cannot write to /www'
		fi
	fi
fi

HASH_NEW="$( _file hash /tmp/NETPARAM )"
[ "$HASH_OLD" = "$HASH_NEW" ] || {
	/etc/kalua_init			# this includes a static version of NETPARAM
}

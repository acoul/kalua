#!/bin/sh
. /tmp/loader

_system fully_installed || exit

build_network_clients()		# build a fgrep-able list, for fast seeking 'is ipX a client from networkZ?"
{
	local funcname="build_network_clients"
	local ip_any="$1"	# e.g. $LANADR or 178.24.109.129
	local pre="$2"		# e.g. 21 (CIDR-notation)
	local networkname="$3"	# e.g. 'WAN'
	local myip mydev mygateway oldifs networks i
	local a1o3start a1o3ready a1o4ready

	ifname_from_dev()	# WAN -> eth0.2
	{
		eval echo \$${1}DEV
	}

	mydev="$( ifname_from_dev "$networkname" )"
	myip="$( _net dev2ip "$mydev" )" || return 1	# e.g. WIFI on a device without wireless

	_log it $funcname daemon info "writing client list for $ip_any/$pre network: '$networkname'"
	[ -z "$ip_any" ] && return 0

	oldifs="$IFS"; IFS='.'
	explode $ip_any
	local a1o1="$1"; local a1o2="$2"; local a1o3="$3"
	IFS="$oldifs"

	networks=1
	a1o4ready=254

	case "$pre" in
		31|32)
			echo "$myip;"
		;;
		30)
			a1o4ready=2
		;;
		29)
			a1o4ready=6
		;;
		28)
			a1o4ready=14
		;;
		27)
			a1o4ready=30
		;;
		26)
			a1o4ready=62
		;;
		25)
			a1o4ready=126
		;;
		23)
			networks=2
		;;
		22)
			networks=4
		;;
		21)
			networks=8
		;;
		20)
			networks=16
		;;
	esac

	divisor_valid "$networks" || networks=1
	a1o3start=$(( $(( a1o3 / networks )) * networks ))	# 109 / 8 = 13.625 ; 13 * 8 = 104 - divisor_valid
	a1o3ready=$(( a1o3start + networks - 1 ))		# 104 + 8 - 1 = 111

	while [ $a1o3start -le $a1o3ready ]; do {
		i=1
		while [ $i -le $a1o4ready ]; do {
			[ "$myip" = "$a1o1.$a1o2.$a1o3start.$i" ] || echo "$a1o1.$a1o2.$a1o3start.$i;"
			i=$(( i + 1 ))
		} done
		a1o3start=$(( a1o3start + 1 ))
	} done

	case "$networkname" in
		lan|LAN)
			mygateway="$( uci -q get network.lan.gateway )"		# IP
		;;
		wan|WAN)
			mygateway="$( uci -q get network.wan.gateway )"		# IP
		;;
	esac

	[ -n "$mygateway" ] && echo "$mygateway;"
}

build_hosts()				# SENSE: modulary builds /etc/local.hosts
{
	local FUNC="build_hosts"
	local FILE="/etc/local.hosts"
	local SUB_PATH="/tmp"
	local SUB_DROP="$SUB_PATH/hosts.drop"
	local SUB_VIRT="$SUB_PATH/hosts.virtual"
	local SUB_WIFI="$SUB_PATH/hosts.wifi"
	local SUB_LAN="$SUB_PATH/hosts.lan"
	local DOMAIN="$( uci get dhcp.@dnsmasq[0].domain )"
	local LINE file

	case "$1" in
		'join')
			_log it $FUNC daemon debug "joining '$SUB_LAN', '$SUB_WIFI', '$SUB_VIRT', '$SUB_DROP' to '$FILE'"

			for file in HEADER "$SUB_VIRT" "$SUB_LAN" "$SUB_WIFI" "$SUB_DROP"; do {
				[ "$file" = 'HEADER' ] && echo "# generated from $0"
				[ -e "$file" ] && {
					echo "# --- BEGIN: $file ($( wc -l <"$file" ) lines)"
					cat "$file" && rm "$file"
					echo "# --- READY: $file"
					echo
				}
			} done >"$FILE"
		;;
		'wifi')
			# on OS-X the client accept this build hostname, e.g.: user-wifi7-n387.lan
			DEFAULT='user'
			DOMAIN="$( uci get dhcp.@dnsmasq[0].domain )"
			CLIENT=0
			MODE="$1"

			while read -r LINE; do {
				CLIENT=$(( CLIENT + 1 ))

				OLDIFS="$IFS"
				IFS=";"
				explode $LINE
				IFS="$OLDIFS"

				OUT="$( grep "\-${MODE}${CLIENT}\-" /etc/ethers )" # exists in /etc/ethers?

				if [ -z "$OUT" ]; then				# anonymous without hard /etc/ethers entry
					echo "$1 ${DEFAULT}-${MODE}${CLIENT}-n$NODENUMBER.$DOMAIN ${DEFAULT}-${MODE}${CLIENT}-n$NODENUMBER"
				else						# is in /etc/ethers
					echo "$1 $(echo "$OUT" | cut -d" " -f2) $(echo "$OUT" | cut -d" " -f2 | cut -d"." -f1)" 	
				fi
			} done <"/tmp/CLIENTS_WIFI" >>$SUB_WIFI
		;;
		'lan')
			[ -n "$WANADR" ] && {
				echo "# --- BEGIN: wan"
				echo "$WANADR $HOSTNAME.$DOMAIN $HOSTNAME"
				echo "# --- READY: wan"
			} >>$SUB_LAN

			# on OS-X the client accept this build hostname, e.g.: user-lan7-n387.lan
			DEFAULT='user'
			DOMAIN="$( uci -q get dhcp.@dnsmasq[0].domain )"
			CLIENT=0
			MODE="$1"

			while read -r LINE; do {
				CLIENT=$(( CLIENT + 1 ))

				OLDIFS="$IFS"
				IFS=";"
				explode $LINE
				IFS="$OLDIFS"

				OUT="$( grep "\-${MODE}${CLIENT}\-" /etc/ethers )"	# exists in /etc/ethers?

				if [ -z "$OUT" ]; then					# anonymous without hard /etc/ethers entry
					echo "$1 ${DEFAULT}-${MODE}${CLIENT}-n$NODENUMBER.$DOMAIN ${DEFAULT}-${MODE}${CLIENT}-n$NODENUMBER"
				else							# is in /etc/ethers
					echo "$1 $(echo "$OUT" | cut -d" " -f2) $(echo "$OUT" | cut -d" " -f2 | cut -d"." -f1)"
				fi
			} done <"/tmp/CLIENTS_LAN" >>$SUB_LAN
		;;
		'virtual')
			echo  >$SUB_VIRT "# for necessary lookups and safe reaching of device"
			echo >>$SUB_VIRT "255.255.255.255 anyhost.$DOMAIN anyhost"
			echo >>$SUB_VIRT "127.0.0.1 localhost.$DOMAIN localhost"

			[ -n "$LANADR" -a -n "$LANNET" ] && {
				echo >>$SUB_VIRT "$LANNET local_lannet.$DOMAIN local_lannet"
			}

			[ -n "$WANADR" -a -n "$WANNET" ] && {
				echo >>$SUB_VIRT "$WANNET local_wannet.$DOMAIN local_wannet"
			}

			[ -n "$WIFINET" ] && {
				echo >>$SUB_VIRT "$WIFINET local_wifinet.$DOMAIN local_wifinet"
				echo >>$SUB_VIRT
			}

			for ADR in $LANADR; do {
				# the first is taken from OLSR-nameservice_plugin
				for BOXNAME in $HOSTNAME ping gateway kiste box router internet weimarnetz hotel login dorfhotel www; do {
					echo >>$SUB_VIRT "$ADR ${BOXNAME}.$DOMAIN $BOXNAME"
				} done
			} done

			[ -n "$WIFIADR" ] && echo >>$SUB_VIRT "$WIFIADR mywifi.$DOMAIN mywifi"

			VPN_SERVER="$( uci -q get system.@vpn[0].ipaddr )"
			VPN_SERVER="77.87.48.19"				# FIXME!

			echo >>$SUB_VIRT
			echo >>$SUB_VIRT "$VPN_SERVER rootserver.$DOMAIN rootserver"
			echo >>$SUB_VIRT "$VPN_SERVER vpnserver.$DOMAIN vpnserver"
			echo >>$SUB_VIRT "$VPN_SERVER vpn.$DOMAIN vpn"

#			echo >>$SUB_VIRT "# http://technet.microsoft.com/en-us/library/cc766017(WS.10).aspx"
#			echo >>$SUB_VIRT "131.107.255.255 dns.msftncsi.com"

			# echo >>$SUB_VIRT "$VPN_SERVER weimarnetz.de"
			# echo >>$SUB_VIRT "$VPN_SERVER news.weimarnetz.de"
		;;
		'drop')
			local LIST='/etc/hosts.drop'		# see fff-adblock-list.ipk, list of bad domains

			echo  >$SUB_DROP "# for dropping known advertisement servers, see: '$LIST'"
			echo >>$SUB_DROP "# (1.1.0.0/20 gets REJECTed, range is enough for ~4096 hosts)"

			if bool_true 'firewall.@adblock[0].enabled'; then
	                        bool_true 'system.@community[0].splash' && LIST="$LIST forbidden:community_splash_active"
	                        [ -n "$LOWMEM" ] && LIST="$LIST forbidden:lowmem"
	                else
	                        LIST="$LIST forbidden:adblock_disabled"
			fi

			if [ -e "$LIST" ]; then
				_log it $FUNC daemon info "building drop-list"
			else
				_log it $FUNC daemon info "[OK] drop-list not exists '$LIST' - do nothing"
				return 0
			fi

			local X=0
			local Y=0
			local COUNT=0
			local LINE

			add_domain_to_blocklist()
			{
				local domain="$1"

				Y=$(( Y + 1 ))
				case "$Y" in
					255)
						Y=1
						X=$(( X + 1 ))
						COUNT=$(( COUNT + 255 ))
					;;
				esac

				# e.g. '1.1.5.200 www.ebay.de'
				# and packetfilter knows, that this range must be dropped
				printf '%s\n' "1.1.$X.$Y $domain" >>"$SUB_DROP"
			}

			_stopwatch start 'adblock'
			while read -r LINE; do add_domain_to_blocklist "$LINE"; done <"$LIST"
			_stopwatch stop 'adblock' quiet

			# https://github.com/WindowsLies/BlockWindows/blob/master/hosts-dnsmasq
			# wget -qO - https://raw.githubusercontent.com/WindowsLies/BlockWindows/master/hosts-dnsmasq | cut -d'/' -f2
			# http://serverfault.com/questions/219806/how-to-block-completely-windows-update-on-my-network
			bool_true 'firewall.@adblock[0].windowsupdate' && {
				for LINE in sbfunservice-mirror.cc \
						update.microsoft.com \
						windowsupdate.microsoft.com \
						windowsupdate.com \
						download.windowsupdate.com \
						a.ads1.msn.com a.ads2.msads.net a.ads2.msn.com a.rad.msn.com a-0001.a-msedge.net a-0002.a-msedge.net a-0003.a-msedge.net a-0004.a-msedge.net a-0005.a-msedge.net a-0006.a-msedge.net a-0007.a-msedge.net a-0008.a-msedge.net a-0009.a-msedge.net ac3.msn.com ad.doubleclick.net adnexus.net adnxs.com ads.msn.com ads1.msads.net ads1.msn.com aidps.atdmt.com aka-cdn-ns.adtech.de a-msedge.net apps.skype.com az361816.vo.msecnd.net az512334.vo.msecnd.net b.ads1.msn.com b.ads2.msads.net b.rad.msn.com bingads.microsoft.com bs.serving-sys.com c.atdmt.com c.msn.com cdn.atdmt.com cds26.ams9.msecn.net choice.microsoft.com choice.microsoft.com.nsatc.net compatexchange.cloudapp.net corp.sts.microsoft.com corpext.msitadfs.glbdns2.microsoft.com cs1.wpc.v0cdn.net db3aqu.atdmt.com df.telemetry.microsoft.com diagnostics.support.microsoft.com ec.atdmt.com fe2.update.microsoft.com.akadns.net feedback.microsoft-hohm.com feedback.search.microsoft.com feedback.windows.com flex.msn.com g.msn.com h1.msn.com i1.services.social.microsoft.com i1.services.social.microsoft.com.nsatc.net lb1.www.ms.akadns.net live.rads.msn.com m.adnxs.com m.hotmail.com msedge.net msftncsi.com msnbot-65-55-108-23.search.msn.com msntest.serving-sys.com oca.telemetry.microsoft.com oca.telemetry.microsoft.com.nsatc.net pre.footprintpredict.com preview.msn.com pricelist.skype.com rad.live.com rad.msn.com redir.metaservices.microsoft.com reports.wes.df.telemetry.microsoft.com s.gateway.messenger.live.com schemas.microsoft.akadns.net secure.adnxs.com secure.flashtalking.com services.wes.df.telemetry.microsoft.com settings-sandbox.data.microsoft.com settings-win.data.microsoft.com sls.update.microsoft.com.akadns.net so.2mdn.net sqm.df.telemetry.microsoft.com sqm.telemetry.microsoft.com sqm.telemetry.microsoft.com.nsatc.net ssw.live.com static.2mdn.net statsfe1.ws.microsoft.com statsfe2.update.microsoft.com.akadns.net statsfe2.ws.microsoft.com survey.watson.microsoft.com telecommand.telemetry.microsoft.com telecommand.telemetry.microsoft.com.nsatc.net telemetry.appex.bing.net telemetry.microsoft.com telemetry.urs.microsoft.com ui.skype.com view.atdmt.com vortex.data.microsoft.com vortex-bn2.metron.live.com.nsatc.net vortex-cy2.metron.live.com.nsatc.net vortex-sandbox.data.microsoft.com vortex-win.data.microsoft.com watson.live.com watson.microsoft.com watson.ppe.telemetry.microsoft.com watson.telemetry.microsoft.com watson.telemetry.microsoft.com.nsatc.net wes.df.telemetry.microsoft.com; do
					add_domain_to_blocklist "$LINE"
				done
			}

			_log it $FUNC daemon debug "building drop-list ready ($(( COUNT + Y )) hosts)"
		;;
	esac
}

fkt_write_ethers ()			# writes /etc/ethers which is "mac-address hostname" per line
{
	local MODE="$1"			# ARG1: wifi or lan or 'remove' (keyword for nvram-var and for humanreadable hostname)
	local FILE="/etc/ethers"
	local FUNC="write_ethers"

	[ "$MODE" = "remove" ] && {
		rm $FILE
		return
	}

	local CLIENT=0
	local DOMAIN="$( uci get dhcp.@dnsmasq[0].domain )"
	local LIST="$( uci get system.@ethers[0].$MODE )"
	local DEBUG_FILE="/tmp/ethers"
	local DEBUG_VAR="fff_ethers_$MODE"		# format e.g.: fff_ethers_wifi="00:11:22:33:44:55=admin-computername;11:22:33:44:55:66=free-computername;..."
	local DEBUG_VAL hostname

	_log it $FUNC daemon debug "mode '$MODE'"

	[ -z "$LIST" ] && touch "$FILE"			# fixme! why this?

	[ -e $DEBUG_FILE ] && rm $DEBUG_FILE

	local oldifs="$IFS"
	IFS=";"
	for MAC_AND_HOST in $LIST; do {
		CLIENT=$(( CLIENT + 1 ))
		HWADRESS="$( echo $MAC_AND_HOST | cut -d'=' -f1 )"
		HWADRESS="$( _sanitizer run "$HWADRESS" lowercase )"
		hostname="$( echo $MAC_AND_HOST | cut -d'=' -f2 )"

		_log it $FUNC daemon debug "working on mac '$HWADRESS' with hostname '$hostname'"

		if [ -n "$HWADRESS" -a -n "$hostname" ] && ! grep -s ^"$HWADRESS" "$FILE" ; then

			echo "$hostname" | grep -q ^"admin" && {				# "adminbob" -> "admin-bob"
				echo "$hostname" | grep -q ^"admin-" || {
					hostname="$( echo $hostname | sed 's/^admin/admin-/' )"
				}
			}

			echo "$hostname" | grep -q ^"free" && {					# "freealice" -> "free-alice"
				echo "$hostname" | grep -q ^"free-" || {
					hostname="$( echo $hostname | sed 's/^free/free-/' )"
				}
			}

			[ -z "$( echo "$hostname" | cut -d'-' -f2 )" ] && {			# "free|admin-" -> "free|admin-anonym"
				hostname="${hostname}anonym"
			}

			hostname="$( echo $hostname | sed 's/[^0-9a-zA-Z-]//g' )"	# sanitized / RFC-952

			printf '%s' "$HWADRESS=$hostname;" >>$DEBUG_FILE		# must include the sanitized output
											# and must be the same syntax like nvram

			hostname="$hostname-${MODE}${CLIENT}-n$NODENUMBER.$DOMAIN"		# fixme! remove leading/trailing "-"

			_log it $FUNC daemon debug "writing '$HWADRESS' with hostname '$hostname' to '$FILE'"

			echo "$HWADRESS $hostname" >>"$FILE"
		else
			[ -z "$HWADRESS" ] && _log it $FUNC daemon debug "no mac-address given"
			[ -z "$hostname" ] && _log it $FUNC daemon debug "no hostname-address given"

			[ -n "$HWADRESS" ] && {
				grep -sq ^"$HWADRESS" "$FILE" && {
					_log it $FUNC daemon debug "suppressing doubled mac '$HWADRESS'"
				}
			}

			CLIENT=$(( CLIENT - 1 ))
		fi
	} done
	IFS="$oldifs"

	[ -e $DEBUG_FILE ] && {
		DEBUG_VAL="$( sed 's/^\(.*\)\;$/\1/' $DEBUG_FILE )"		# cutting off last ";"

		if [ "$LIST" != "$DEBUG_VAL" ]; then
			# fixme! we need a sanitizer for non allowed characters, e.g. ":"

			_log it $FUNC daemon alert "error in config: is '$LIST' must be '$DEBUG_VAL' - correcting"

			_nvram set "${DEBUG_VAR}" "$DEBUG_VAL"
			_nvram set commit "repaired error in fff_ethers_$MODE"
		else
			_log it $FUNC daemon debug "no config error"
		fi

		rm $DEBUG_FILE
	}
}

fkt_build_clients_list ()	# these lists are used to to a fast 'grep -F "$IP;" $FILE', to know from which interface, an ip comes from...
{
	# TODO: add tunnel-ip's:
	# 10.63.167.94 cityvpn-serverside-n422.olsr cityvpn-serverside-n422		// for nicer traceroute
	# 10.63.167.93 cityvpn-clientside-n422.olsr cityvpn-clientside-n422

	local WIFI_DHCP_PRE="$( _ipsystem getvar 'WIFI_DHCP_PRE' )"
	local WIFINET="$(	_ipsystem getvar 'WIFINET' )"

	build_network_clients "$WIFINET" "$WIFI_DHCP_PRE"	"WIFI"	>/tmp/CLIENTS_WIFI
	build_network_clients "$LANNET"  "$LANPRE"		"LAN"	>/tmp/CLIENTS_LAN
	build_network_clients "$WANNET"  "$WANPRE"		"WAN"	>/tmp/CLIENTS_WAN

	cat /tmp/CLIENTS_WIFI /tmp/CLIENTS_LAN /tmp/CLIENTS_WAN	>/tmp/CLIENTS_ALL	# not used
}

uci get system.@system[0].hostname | grep -q ^node && {					# fixme! unneeded?
	MAC="$( _sanitizer run "$( _net dev2mac $WIFIDEV )" hex )"	
	_nvram set wan_hostname "wifimac$MAC"
}

case "$1" in
	build_network_clients)
		fkt_build_clients_list
	;;
	call)
		fkt_write_ethers remove
		fkt_write_ethers wifi
		fkt_write_ethers lan

		fkt_build_clients_list

		build_hosts lan
		build_hosts wifi
		build_hosts virtual
		build_hosts drop
		build_hosts join

		_net refresh_dnshosts
	;;
	start)
		echo >>$SCHEDULER "$0 call"
	;;
	*)
		echo "Usage: $0 (start|call|build_network_clients)"
	;;
esac

#!/bin/sh
. /tmp/loader

if [ -n "$FAILSAFE" ] || [ -n "$READONLY" ] || [ ! -e "/www/SOFTWARE_FULLY_INSTALLED" ]; then exit; fi

build_network_clients()		# build a fgrep-able list, for fast seeking 'is ipX a client from networkZ?"
{
	local funcname="build_network_clients"
	local ip_any="$1"	# e.g. $LANADR or 178.24.109.129
	local pre="$2"		# e.g. 21 (CIDR-notation)
	local networkname="$3"	# e.g. 'WAN'
	local myip mydev mygateway oldifs networks i
	local a1o3start a1o3ready a1o4ready

	ifname_from_dev()	# WAN -> eth0.2
	{
		eval echo \$${1}DEV
	}

	mydev="$( ifname_from_dev "$networkname" )"
	myip="$( _net dev2ip "$mydev" )" || return 1	# e.g. WIFI on a device without wireless

	_log do $funcname daemon info "writing client list for $ip_any/$pre network: '$networkname'"
	[ -z "$ip_any" ] && return 0

	oldifs="$IFS"; IFS='.'
	set -- $ip_any
	local a1o1="$1"; local a1o2="$2"; local a1o3="$3"; local a1o4="$4"
	IFS="$oldifs"

	networks=1
	a1o4ready=254

	case "$pre" in
		31|32)
			echo "$myip;"
		;;
		30)
			a1o4ready=2
		;;
		29)
			a1o4ready=6
		;;
		28)
			a1o4ready=14
		;;
		27)
			a1o4ready=30
		;;
		26)
			a1o4ready=62
		;;
		25)
			a1o4ready=126
		;;
		23)
			networks=2
		;;
		22)
			networks=4
		;;
		21)
			networks=8
		;;
		20)
			networks=16
		;;
	esac

	a1o3start=$(( $(( $a1o3 / $networks )) * $networks ))		# 109 / 8 = 13.625 ; 13 * 8 = 104
	a1o3ready=$(( $a1o3start + $networks - 1 ))			# 104 + 8 - 1 = 111

	while [ $a1o3start -le $a1o3ready ]; do {
		i=1
		while [ $i -le $a1o4ready ]; do {
			[ "$myip" = "$a1o1.$a1o2.$a1o3start.$i" ] || echo "$a1o1.$a1o2.$a1o3start.$i;"
			i=$(( $i + 1 ))
		} done
		a1o3start=$(( $a1o3start + 1 ))
	} done

#	case "$PRE" in
#		31|32)
#			echo "$myip;"
#		;;
#		*)					# 24...30
#			[ "$PRE" = "30" ] && {
#				OKT4_START=$(( $OKT4_START - 1 ))
#			}
#
#			while [ $OKT4_START -lt $OKT4_END ]; do {
#
#				out="$OKT1.$OKT2.$OKT3.$OKT4_START"
#
#				[ "$myip" = "$out" ] || {
#					echo "$out;"
#				}
#
#				OKT4_START=$(( $OKT4_START + 1 ))
#			} done
#		;;
#	esac

	case "$networkname" in
		lan|LAN)
			mygateway="$( uci -q get network.lan.gateway )"
		;;
		wan|WAN)
			mygateway="$( uci -q get network.wan.gateway )"
		;;
	esac

	[ -n "$mygateway" ] && echo "$mygateway;"
}

_build_hosts()				# SENSE: modulary builds /etc/local.hosts
{
	local FUNC="build_hosts"
	local FILE="/etc/local.hosts"
	local SUB_PATH="/tmp"
	local SUB_DROP="$SUB_PATH/hosts.drop"
	local SUB_VIRT="$SUB_PATH/hosts.virtual"
	local SUB_WIFI="$SUB_PATH/hosts.wifi"
	local SUB_LAN="$SUB_PATH/hosts.lan"
	local DOMAIN="$( uci get dhcp.@dnsmasq[0].domain )"
	local LINE file

	case "$1" in
		'join')
			_log do $FUNC daemon debug "joining '$SUB_LAN', '$SUB_WIFI', '$SUB_VIRT', '$SUB_DROP' to '$FILE'"

			for file in HEADER "$SUB_VIRT" "$SUB_LAN" "$SUB_WIFI" "$SUB_DROP"; do {
				[ "$file" = 'HEADER' ] && echo "# generated from $0"
				[ -e "$file" ] && {
					echo "# --- BEGIN: $file ($( wc -l <"$file" ) lines)"
					cat "$file" && rm "$file"
					echo "# --- READY: $file"
					echo
				}
			} done >"$FILE"
		;;
		'wifi')
			# on OS-X the client accept this build hostname, e.g.: user-wifi7-n387.lan
			DEFAULT='user'
			DOMAIN="$( uci get dhcp.@dnsmasq[0].domain )"
			CLIENT=0
			MODE="$1"

			while read LINE; do {
				let CLIENT+=1
				OLDIFS="$IFS"
				IFS=";"
				set -- $LINE
				IFS="$OLDIFS"

				OUT="$( grep "\-${MODE}${CLIENT}\-" /etc/ethers )" # exists in /etc/ethers?

				if [ -z "$OUT" ]; then				# anonymous without hard /etc/ethers entry
					echo "$1 ${DEFAULT}-${MODE}${CLIENT}-n$NODENUMBER.$DOMAIN ${DEFAULT}-${MODE}${CLIENT}-n$NODENUMBER"
				else						# is in /etc/ethers
					echo "$1 $(echo "$OUT" | cut -d" " -f2) $(echo "$OUT" | cut -d" " -f2 | cut -d"." -f1)" 	
				fi
			} done <"/tmp/CLIENTS_WIFI" >>$SUB_WIFI
		;;
		'lan')
			[ -n "$WANADR" ] && {
				echo >>$SUB_LAN "# --- BEGIN: wan"
				echo >>$SUB_LAN "$WANADR $HOSTNAME.$DOMAIN $HOSTNAME"
				echo >>$SUB_LAN "# --- READY: wan"
			}

			# on OS-X the client accept this build hostname, e.g.: user-lan7-n387.lan
			DEFAULT='user'
			DOMAIN="$( uci -q get dhcp.@dnsmasq[0].domain )"
			CLIENT=0
			MODE="$1"

			while read LINE; do {
				let CLIENT+=1
				OLDIFS="$IFS"
				IFS=";"
				set -- $LINE
				IFS="$OLDIFS"

				OUT="$( grep "\-${MODE}${CLIENT}\-" /etc/ethers )"	# exists in /etc/ethers?

				if [ -z "$OUT" ]; then					# anonymous without hard /etc/ethers entry
					echo "$1 ${DEFAULT}-${MODE}${CLIENT}-n$NODENUMBER.$DOMAIN ${DEFAULT}-${MODE}${CLIENT}-n$NODENUMBER"
				else							# is in /etc/ethers
					echo "$1 $(echo "$OUT" | cut -d" " -f2) $(echo "$OUT" | cut -d" " -f2 | cut -d"." -f1)"
				fi
			} done <"/tmp/CLIENTS_LAN" >>$SUB_LAN
		;;
		'virtual')
			echo  >$SUB_VIRT "# for neccesary lookups and safe reaching of device"
			echo >>$SUB_VIRT "255.255.255.255 anyhost.$DOMAIN anyhost"
			echo >>$SUB_VIRT "127.0.0.1 localhost.$DOMAIN localhost"

			[ -n "$LANADR" -a -n "$LANNET" ] && {
				echo >>$SUB_VIRT "$LANNET local_lannet.$DOMAIN local_lannet"
			}

			[ -n "$WANADR" -a -n "$WANNET" ] && {
				echo >>$SUB_VIRT "$WANNET local_wannet.$DOMAIN local_wannet"
			}

			[ -n "$WIFINET" ] && {
				echo >>$SUB_VIRT "$WIFINET local_wifinet.$DOMAIN local_wifinet"
				echo >>$SUB_VIRT
			}

			for ADR in $LANADR; do {
#			for ADR in $LANADR $WIFIADR; do {
				# the first is taken from OLSR-nameservice_plugin
				for BOXNAME in $HOSTNAME ping gateway kiste box router internet weimarnetz hotel login dorfhotel www; do {
					echo >>$SUB_VIRT "$ADR ${BOXNAME}.$DOMAIN $BOXNAME"
				} done
			} done

			[ -n "$WIFIADR" ] && echo >>$SUB_VIRT "$WIFIADR mywifi.$DOMAIN mywifi"

			VPN_SERVER="$( uci -q get system.@vpn[0].ipaddr )"
			VPN_SERVER="77.87.48.19"				# FIXME!

			echo >>$SUB_VIRT
			echo >>$SUB_VIRT "$VPN_SERVER rootserver.$DOMAIN rootserver"
			echo >>$SUB_VIRT "$VPN_SERVER vpnserver.$DOMAIN vpnserver"
			echo >>$SUB_VIRT "$VPN_SERVER vpn.$DOMAIN vpn"

			echo >>$SUB_VIRT "# http://technet.microsoft.com/en-us/library/cc766017(WS.10).aspx"
			echo >>$SUB_VIRT "131.107.255.255 dns.msftncsi.com"

			# echo >>$SUB_VIRT "$VPN_SERVER weimarnetz.de"
			# echo >>$SUB_VIRT "$VPN_SERVER news.weimarnetz.de"
		;;
		'drop')
			echo  >$SUB_DROP "# for dropping known advertisement servers"
			echo >>$SUB_DROP "# (1.1.0.0/20 gets REJECTed, range is enough for ~4096 hosts)"

			local LIST='/etc/hosts.drop'		# see fff-adblock-list.ipk, list of bad domains

			[ -e "$LIST" ] || {
				_log do $FUNC daemon debug "no drop-list '$LIST' - do nothing"
				return
			}

			_log do $FUNC daemon debug "building drop-list"

			local X=0
			local Y=0
			local COUNT=0
			local LINE

			while read LINE; do {

				Y=$(( $Y + 1 ))
				[ $Y -gt 254 ] && {
					Y=1
					X=$(( $X + 1 ))
					COUNT=$(( $COUNT + 255 ))
				}

				echo "1.1.$X.$Y $LINE"		# e.g. '1.1.5.200 www.ebay.de' -> packetfilter knows, that this range must be dropped

			} done <$LIST >>$SUB_DROP

			_log do $FUNC daemon debug "building drop-list ready ($(( $COUNT + $Y )) hosts)"
		;;
	esac
}

fkt_write_ethers ()			# writes /etc/ethers which is "mac-address hostname" per line
{
	local MODE="$1"			# ARG1: wifi or lan or 'remove' (keyword for nvram-var and for humanreadable hostname)
	local FILE="/etc/ethers"
	local FUNC="write_ethers"

	[ "$MODE" = "remove" ] && {
		rm $FILE
		return
	}

	local CLIENT=0
	local DOMAIN="$( uci get dhcp.@dnsmasq[0].domain )"
	local LIST="$( uci get system.@ethers[0].$MODE )"
	local DEBUG_FILE="/tmp/ethers"
	local DEBUG_VAR="fff_ethers_$MODE"		# format e.g.: fff_ethers_wifi="00:11:22:33:44:55=admin-computername;11:22:33:44:55:66=free-computername;..."
	local DEBUG_VAL

	_log do $FUNC daemon debug "mode '$MODE'"

	[ -z "$LIST" ] && touch "$FILE"			# fixme! why this?

	[ -e $DEBUG_FILE ] && rm $DEBUG_FILE

	local oldifs="$IFS"
	IFS=";"
	for MAC_AND_HOST in $LIST; do {
		CLIENT=$(( $CLIENT + 1 ))
		HWADRESS="$( echo $MAC_AND_HOST | cut -d'=' -f1 )"
		HWADRESS="$( _sanitizer do "$HWADRESS" lowercase )"
		HOSTNAME="$( echo $MAC_AND_HOST | cut -d'=' -f2 )"

		_log do $FUNC daemon debug "working on mac '$HWADRESS' with hostname '$HOSTNAME'"

		if [ -n "$HWADRESS" ] && [ -n "$HOSTNAME" ] && [ -z "$( grep -s ^$HWADRESS "$FILE" )" ]; then

			echo "$HOSTNAME" | grep -q ^"admin" && {				# "adminbob" -> "admin-bob"
				echo "$HOSTNAME" | grep -q ^"admin-" || {
					HOSTNAME="$( echo $HOSTNAME | sed 's/^admin/admin-/' )"
				}
			}

			echo "$HOSTNAME" | grep -q ^"free" && {					# "freealice" -> "free-alice"
				echo "$HOSTNAME" | grep -q ^"free-" || {
					HOSTNAME="$( echo $HOSTNAME | sed 's/^free/free-/' )"
				}
			}

			[ -z "$( echo "$HOSTNAME" | cut -d'-' -f2 )" ] && {			# "free|admin-" -> "free|admin-anonym"
				HOSTNAME="${HOSTNAME}anonym"
			}

			HOSTNAME="$( echo $HOSTNAME | sed 's/[^0-9a-zA-Z-]//g' )"	# sanitized / RFC-952

			echo -en "${HWADRESS}=${HOSTNAME};" >>$DEBUG_FILE		# must include the sanitized output
											# and must be the same syntax like nvram

			HOSTNAME="${HOSTNAME}-${MODE}${CLIENT}-n$NODENUMBER.$DOMAIN"		# fixme! remove leading/trailing "-"

			_log do $FUNC daemon debug "writing '$HWADRESS' with hostname '$HOSTNAME' to '$FILE'"

			echo "$HWADRESS $HOSTNAME" >>"$FILE"
		else
			[ -z "$HWADRESS" ] && _log do $FUNC daemon debug "no mac-address given"
			[ -z "$HOSTNAME" ] && _log do $FUNC daemon debug "no hostname-address given"

			[ -n "$HWADRESS" ] && {
				grep -sq ^"$HWADRESS" "$FILE" && {
					_log do $FUNC daemon debug "suppressing doubled mac '$HWADRESS'"
				}
			}

			CLIENT=$(( $CLIENT - 1 ))
		fi
	} done
	IFS="$oldifs"

	[ -e $DEBUG_FILE ] && {
		DEBUG_VAL="$( sed 's/^\(.*\)\;$/\1/' $DEBUG_FILE )"		# cutting off last ";"

		if [ "$LIST" != "$DEBUG_VAL" ]; then
			# fixme! we need a sanitizer for non allowed characters, e.g. ":"

			_log do $FUNC daemon alert "error in config: is '$LIST' must be '$DEBUG_VAL' - correcting"

			_nvram set "${DEBUG_VAR}" "$DEBUG_VAL"
			_nvram set commit "repaired error in fff_ethers_$MODE"
		else
			_log do $FUNC daemon debug "no config error"
		fi

		rm $DEBUG_FILE
	}
}

fkt_restart_running_dnsserver ()
{
	local FUNC="restart_running_dnsserver"
	local PID="$( _system get_first_pid dnsmasq )"

	[ -n "$PID" ] && {
		_log do $FUNC daemon debug "working"

		kill -SIGHUP $PID		# fixme! we should only reread /etc/hosts, when we are sure, that adblock-filters are working?!
	}
}

fkt_build_clients_list ()	# these lists are used to to a fast 'fgrep "$IP;" $FILE', to know from which interface, an ip comes from...
{
	# TODO: add tunnel-ip's:
	# 10.63.167.94 cityvpn-serverside-n422.olsr cityvpn-serverside-n422		// for nicer traceroute
	# 10.63.167.93 cityvpn-clientside-n422.olsr cityvpn-clientside-n422

	local WIFI_DHCP_PRE="$( _ipsystem getvar 'WIFI_DHCP_PRE' )"
	local WIFINET="$(	_ipsystem getvar 'WIFINET' )"
	local WIFIBRC="$(	_ipsystem getvar 'WIFIBRC' )"

	build_network_clients "$WIFINET" "$WIFI_DHCP_PRE"	"WIFI"	>/tmp/CLIENTS_WIFI
	build_network_clients "$LANNET"  "$LANPRE"		"LAN"	>/tmp/CLIENTS_LAN
	build_network_clients "$WANNET"  "$WANPRE"		"WAN"	>/tmp/CLIENTS_WAN

	cat /tmp/CLIENTS_WIFI /tmp/CLIENTS_LAN /tmp/CLIENTS_WAN	>/tmp/CLIENTS_ALL	# not used
}

uci get system.@system[0].hostname | grep -q ^node && {					# fixme! unneeded?
	MAC="$( _sanitizer do "$( _net dev2mac $WIFIDEV )" hex )"	
	_nvram set wan_hostname "wifimac$MAC"
}

case "$1" in
	build_network_clients)
		fkt_build_clients_list
	;;
	call)
		fkt_write_ethers remove
		fkt_write_ethers wifi
		fkt_write_ethers lan

		fkt_build_clients_list

		_build_hosts lan
		_build_hosts wifi
		_build_hosts virtual

		if bool_true 'firewall.@adblock[0].enabled'; then
			bool_true 'system.@community[0].splash' || DROP=0
			[ -e "/tmp/LOWMEM" ] && DROP=0
		else
			DROP=0
		fi

		DROPFILE="/etc/hosts.drop"
		if [ "$DROP" = "0" ]; then
			[ -e "$DROPFILE" ] && {
				_log do "del_adblock" daemon debug "must be deactivated, removing '$DROPFILE'"
				rm "$DROPFILE"
			}
		else
			_stopwatch start adblock
			_build_hosts drop
			_stopwatch stop 'adblock' quiet

			if [ -e "$DROPFILE" ]; then
				_log do "add_adblock" daemon debug "$( _file size "$DROPFILE" ) bytes in $( _file lines "$DROPFILE" ) entries"
			else
				_log do "add_adblock" daemon debug "was not possible, missing '$DROPFILE'"
			fi
		fi

		_build_hosts join

		fkt_restart_running_dnsserver
	;;
	start)
		echo >>$SCHEDULER "$0 call"
	;;
	*)
		echo "Usage: $0 (start|call|build_network_clients)"
	;;
esac

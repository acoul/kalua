#!/bin/sh
. /tmp/loader

# on the vpn-server we should have this cronjob:
#
# * * * * * test -e /tmp/loader || /etc/kalua_init; . /tmp/loader; _cron vpnserver

patch_udhcpc_script()
{
	local script='/etc/udhcpc.user'		# will be sourced every ~30mins (dhcp-loopback-watchdog)

	# TODO: work with a very simple uptime-compare-calculation?

	[ -e '/lib/netifd/dhcp.script' ] || return 1

	needs_linking()
	{
		[ -h "$script" ] || return 0

		# bad workaround, e.g. r33726
		command -v 'readlink' >/dev/null || return 0
		# and must be in TMPDIR:
		readlink "$script" | grep -v ^"$TMPDIR"
	}

	needs_linking && {
		rm "$script"	# TODO: patch maybe existent user-script
		ln -s "$TMPDIR/$( basename "$script" )" "$script"
	}

	output_udhcpc_script >"$script"
}

output_udhcpc_script()
{
	cat <<EOF
#!/bin/sh
# will be sourced from '/lib/netifd/dhcp.script'
# via udhcpc during loopback-alias-interface
# and regulary via olsr:nameservice-plugin

read -r UP REST </proc/uptime
[ \${UP%.*} -gt 3600 ] && {
	. /tmp/loader
	pidof crond || _system crashreboot cron_died

	# we have seen bad written files even in ramdisk:
	test -s /tmp/CRON_IS_CAREFUL || /etc/init.d/S51crond_fff+ restart
	sh -n /tmp/CRON_IS_CAREFUL || /etc/init.d/S51crond_fff+ restart

	UP=\$( _stopwatch stop '/tmp/CRON_LASTCALL' interim,nolog,seconds )
	[ \$UP -gt 3600 ] && _system crashreboot cron_died
}
EOF
}

func_cron_daemon_start ()
{
	local funcname="cron_daemon_start"

	[ -e /etc/init.d/cron ] && {					# fixme!
		_log it $funcname daemon info "removing unneeded initfile"
		rm /etc/init.d/cron
		killall crond
	}

	pidof crond >/dev/null && {
		_log it $funcname daemon debug "already started"
		return 1
	}

	ulimit -c unlimited
	/usr/sbin/crond -L /dev/null || {
		_log it $funcname daemon debug "error"
		return 1
	}

	_log it $funcname daemon info "[OK] started"
}

func_cron_daemon_stop ()
{
	local FUNC="cron_daemon_stop"

	pidof crond >/dev/null && {
		_log it $FUNC daemon info "killing"
		killall crond
		return
	}

	_log it $FUNC daemon debug "no daemon running"
}

func_cron_start ()
{
	func_cron_config_write $1
	func_cron_daemon_start
}

func_cron_stop ()
{
	func_cron_daemon_stop
}

func_cron_status ()
{
	local FUNC="cron_status"

	pidof crond >/dev/null || {
		_log it $FUNC daemon debug "daemon is NOT running"
		return
	}

	_log it $FUNC daemon debug "daemon is running"
	func_cron_config_write status
}

func_cron_config_write()
{
	local FUNC="cron_config_write"
	local CRONFILE='/etc/crontabs/root'
	local CRONDIR="$( dirname "$CRONFILE" )"
	local LINE
	local PROFILE="$1"

	[ "$PROFILE" = 'status' ] && {
		_log it $FUNC daemon debug "status: '$CRONFILE'"
		cat "$CRONFILE"
		return
	}

	PROFILE='newstyle'

	  if [ "$PROFILE" = 'newstyle' ]; then
		:
	elif [ "$PROFILE" = 'lazy' ]; then		# unused
		:
	elif [ "$PROFILE" = 'nano' ]; then
	  	:
	elif [ "$PROFILE" != 'minimal' -a -z "$LOWMEM" -a -n "$WIFI_DEVS" ] && _system fully_installed; then
		PROFILE='standard'
	else
		PROFILE='minimal'
	fi

	mkdir -p "$CRONDIR"

	_log it $FUNC daemon debug "profile = $PROFILE"


	if [ "$PROFILE" = "minimal" ]; then

		echo >$CRONFILE "* * * * * /usr/bin/scheduler -S minimal; . /tmp/loader; _scheduler run"

	elif [ "$PROFILE" = "lazy" ]; then

		echo >$CRONFILE "* * * * * /usr/bin/scheduler -S lazy; . /tmp/loader; _scheduler run"

	elif [ "$PROFILE" = "newstyle" ]; then

		cp "/usr/sbin/cron.minutely" "/tmp/CRON_IS_CAREFUL"
		[ -e '/tmp/CRON_LOCK' ] && rm '/tmp/CRON_LOCK'		# from a crashed session
		[ -e '/tmp/scheduler.log' ] && rm '/tmp/scheduler.log'	# dito

		dont_need_wait_for_zero_ssh_action()
		{
			_system reboots -gt 50 && return 1

			case "$CONFIG_PROFILE" in
				preskil*|ffweimar*|liszt28*|rehungen*)
					return 0
				;;
			esac

			[ -z "$LOWMEM" ] && return 0

			# otherwise an ssh-attack can "stop" services
			_net local_inet_offer >/dev/null && return 0

			return 1
		}

		dont_need_wait_for_zero_ssh_action && {
			sed -i 's/^.* REM$/#&/g' "/tmp/CRON_IS_CAREFUL"
		}

		/sbin/uci get system.@system[0].hostname >/dev/console && {
			# activate real test, deactivate dummy test
			# in case something is wrong with 'hostname' we only reboot once
			sed -i -e 's|^#\(if /sbin/uci \)|\1|' -e 's|if true|#&|' '/tmp/CRON_IS_CAREFUL'
		}

		pingcheck_needed()
		{
			local ip="$( uci -q get system.@monitoring[0].pingcheck )"

			echo "$ip"
			test -n "$ip"
		}

		pingcheck_needed >/dev/null && {
			sed -i "s/^### PINGCHECK ###/WIFIDEV=$WIFIDEV; IP=$( pingcheck_needed )\n&/" '/tmp/CRON_IS_CAREFUL'

			_file insert_at	"^### PINGCHECK ###" \
					'/usr/sbin/cron.pingchecker' \
					'/tmp/CRON_IS_CAREFUL'

			bool_true 'system.@monitoring[0].pingcheck_lazy' && {
				sed -i 's/^# LOWLOSS #/	/' '/tmp/CRON_IS_CAREFUL'
			}
		}

		forced_wifi_rate_needed()
		{
			grep -q ^'b43 ' '/proc/modules' && {
				[ "$( uci -q get wireless.@wifi-iface[0].mode )" = 'adhoc' ] || {
					[ $OPENWRT_REV -ge 36083 ] || {
						return 0
					}
				}
			}

			return 1
		}

		forced_wifi_rate_needed && {
			sed -i "s|### FORCE_WIFIRATE ###|iw dev $WIFIDEV set bitrates legacy-2.4 6 9 12 18 24 36 48 54|" '/tmp/CRON_IS_CAREFUL'
		}

		lan_olsr_counter_needed()
		{
			case "$CONFIG_PROFILE" in
				hotello-B01*)
					return 0
				;;
			esac

			return 1
		}

		lan_olsr_counter_needed && {
			$IPT -nxvL INPUT | fgrep -q 'dpt:698' || {
				$IPT -I INPUT -p udp --dport 698 -i $LANDEV ! -s $LANADR
			}

			_file insert_at "^### CHECK_OLSR_RATE_LAN ###" '/usr/sbin/cron.check_olsr_rate_lan' '/tmp/CRON_IS_CAREFUL'
		}

		zram_usage_detector_needed()
		{
			[ -n "$LOWMEM" ] && return 1
			[ -e "/sys/block/zram0/num_writes" ]
		}

		zram_usage_detector_needed && {
			sed -i 's|### CALL_ZRAMCHECK ###|test -e /tmp/ZRAMUSED \|\| { test $( cat /sys/block/zram0/num_writes ) -gt 1 \&\& { . /tmp/loader; _log it zram_usage_detector daemon alert "1st zram-usage: load: $LOAD up: $UP"; touch /tmp/ZRAMUSED; }; }|' "/tmp/CRON_IS_CAREFUL"
		}

		zram_reboot_if_used_needed()
		{
			return 1
		}

		zram_reboot_if_used_needed && {
			sed -i 's|### CALL_ZRAMREBOOT ###|test -e /tmp/ZRAMUSED \&\& { sync; echo "c" >/proc/sysrq-trigger; /bin/sleep 5; /sbin/reboot -f; }|' "/tmp/CRON_IS_CAREFUL"
		}

		ubus_checker_needed()
		{
			local funcname='ubus_checker_needed'
			local file='/tmp/UBUSDEAD'
			local file_wasok="/www/$funcname"

			# this fails, if we change the only ethernet from LAN to WAN
			[ -e "$file_wasok" ] && return 0
			[ -n "$LOWMEM" ] && return 1

			# can hang during bootup
			touch "$file"
			( ubus call system info | grep -q '"uptime":' && rm "$file" ) &
			sleep 3

			if [ -e "$file" ]; then
				# can hang during bootup, seen with r38993, r39139
				# http://intercity-vpn.de/files/openwrt/ps_tasklist_r38993_hanging_cron.txt
				_log it $funcname daemon alert "file $file still exist"
				return 1
			else
				if ubus call network.device status | grep -q '"statistics":'; then
					touch "$file_wasok"
					return 0
				else
					_log it $funcname daemon info "2nd call does not work"
					return 1
				fi
			fi
		}

		ubus_checker_needed && {
			_file insert_at "^### CALL_UBUSCHECKER ###" "/usr/sbin/cron.minutely.check_ubus" "/tmp/CRON_IS_CAREFUL"
		}

		wificheck_needed()
		{
			[ -z "$WIFIDEV" ] && return 1

			case "$CONFIG_PROFILE" in
				*ap)
				;;
				liszt28*|schoeneck*)
					return 0
				;;
			esac

			return 1
		}

		wificheck_needed && {
			all_wifi_phys()
			{
				local i=0

				# http://intercity-vpn.de/files/openwrt/highload_unregister_netdevice.txt
				while pidof wifi >/dev/null; do sleep 5; done

				while iw phy phy$i info >/dev/null; do {
					echo -n "phy$i "
					i=$(( i + 1 ))
				} done
			}

			_file insert_at "^### CALL_WIFICHECK ###" "/usr/sbin/cron.minutely_check_wifi_incoming_multicast.sh" "/tmp/CRON_IS_CAREFUL"
			sed -i "s/\$LIST_OF_PHYS/$( all_wifi_phys )/" "/tmp/CRON_IS_CAREFUL"
		}

		audioplayer_check_needed()
		{
			local dev
			local file='/tmp/audioplayer.dev'

			command -v madplay >/dev/null || return 1

			# testplay a 0-byte file
			touch "$file"

			for dev in /dev/dsp*; do {
				madplay --output="$dev" "$file" && {
					echo "$dev" >"$file"
					return 0
				}
			} done

			rm "$file"
			return 1
		}

		audioplayer_check_needed && {
			sed -i "s;### CHECK_AUDIOPLAYER ###;test -e '/tmp/audioplayer.sh' \&\& { pidof madplay >/dev/null || /tmp/audioplayer.sh \& };" "/tmp/CRON_IS_CAREFUL"
		}

		rrd_needed()
		{
			case "$CONFIG_PROFILE" in
				marinabh*|amalienhof*|limona*|olympia*|aschbach*)
					return 0
				;;
				liszt28*)
					touch "/tmp/STATS_FORWARD"
				;;
			esac

			[ -n "$LOWMEM" ] && return 1
			command -v rrdtool >/dev/null || return 1

			_wifi longshot_name >/dev/null && return 0

			case "$HARDWARE" in
				'Ubiquiti Bullet'*)
					return 0
				;;
			esac

			_net local_inet_offer >/dev/null
		}

		rrd_needed && {
			cp '/usr/sbin/cron.rrd' '/tmp'
			. /tmp/cron.rrd
			rrd_setup 'keep_database'

			WATCH_STATION="$( uci -q get system.@monitoring[0].watch_station )"

			sed -i "s|### CALL_RRD ###|IPT='$IPT'; WIFIDEV=$WIFIDEV; . /tmp/cron.rrd; rrd_update '$WATCH_STATION'|" "/tmp/CRON_IS_CAREFUL"
		}

		irqcheck_needed()
		{
			case "$CONFIG_PROFILE" in
				liszt28*)
					case "$HARDWARE" in
						"TP-LINK TL-WR1043ND")
							return 1	# disabled
						;;
					esac
				;;
			esac

			return 1
		}

		[ -e "/etc/init.d/apply_profile" ] && {
			sed -i 's|### CALL_APPLYPROFILE ###|/etc/init.d/apply_profile.watch call; /etc/init.d/apply_profile call|' "/tmp/CRON_IS_CAREFUL"
		}

		irqcheck_needed && {
			cp "/usr/sbin/cron.check_interrupts" "/tmp"
			sed -i 's|### CALL_IRQ ###|. /tmp/cron.check_interrupts|' "/tmp/CRON_IS_CAREFUL"
		}

		backping_needed()
		{
			local backping="$( uci -q get system.@monitoring[0].backping )"

			if [ -n "$backping" ]; then
				test "$backping" = "$NODENUMBER"
			else
				_net local_inet_offer >/dev/null
			fi
		}

		backping_needed && {
			local ifname call_function
			ifname="$( _net local_inet_offer )" || ifname=
			call_function="backping \${UP%.*} $ifname"

			sed -i "s/^### PING_MONITORING_SERVER ###/&\n${call_function}/" '/tmp/CRON_IS_CAREFUL'

			_file insert_at	"^### PING_MONITORING_SERVER ###" \
					'/usr/sbin/cron.backping' \
					'/tmp/CRON_IS_CAREFUL'
		}

		case "$CONFIG_PROFILE" in
			*'ap')
				[ -n "$LOWMEM" ] && {
					sed -i "s/### NOCRON_DURING_CLIENT_ACTION ###/iw dev $WIFIDEV station dump | grep -q ^Station \&\& LOAD=0.90/" "/tmp/CRON_IS_CAREFUL"
				}
			;;
		esac

		if [ -e "/etc/init.d/apply_profile" ]; then
			# wait at least 10 minutes till first cron-action / simulate load
			sed -i 's|### WAIT_FOR_APPLY_PROFILE ###|[ ${UP%.*} -lt 600 ] \&\& LOAD=0.90|' "/tmp/CRON_IS_CAREFUL"
		else
			webcam_is_working()
			{
				[ -e '/dev/video0' ] || return 1
				command -v fswebcam || return 0

				fswebcam --verbose \
					--device '/dev/video0' \
					--resolution '640x480' \
					--png 5 \
					--save '/tmp/webcam.png'

				# output >0 bytes?
				if [ -s '/tmp/webcam.png' ]; then
					rm '/tmp/webcam.png'
					command -v motion >/dev/null && uci set system.@monitoring[0].ignore_load='true'
					return 0
				else
					rm '/tmp/webcam.png'
					return 1
				fi
			}

			webcam_is_working && {
				# motion, ffmpeg , kmod-video-core, kmod-video-xxx (e.g. uvc)
				cp /usr/sbin/cron.webcam /tmp
				sed -i 's|### CALL_WEBCAM ###|. /tmp/cron.webcam|' "/tmp/CRON_IS_CAREFUL"
			}
		fi

		[ -n "$LOWMEM" ] && {
			_log it $FUNC daemon info "lowram: be even more careful, dont work if load > 0.5"

			case "$CONFIG_PROFILE" in
				elephant*)
					sed -i 's/0.8\*/0.8\*|0.7\*|0.6\*|0.5\*|0.4\*/' "/tmp/CRON_IS_CAREFUL"
				;;
				*)
					sed -i 's/0.8\*/0.8\*|0.7\*|0.6\*|0.5\*/' "/tmp/CRON_IS_CAREFUL"
				;;
			esac
		}

		case "$CONFIG_PROFILE" in
			ffweimar*)
				echo >$CRONFILE "* * * * * . /tmp/CRON_IS_CAREFUL; . /tmp/loader; _watch switch_linkstatus"
			;;
			*)
				echo >$CRONFILE "* * * * * . /tmp/CRON_IS_CAREFUL"
			;;
		esac

#				echo >>$CRONFILE "* * * * * test -e /tmp/CRON.DEBUG || { touch /tmp/CRON.DEBUG; while true; do cat /proc/loadavg /proc/uptime /proc/interrupts >/dev/console; sleep 5; done; }"
	fi

	while read -r LINE; do {
		_log it $FUNC daemon debug "+ '$LINE'"
	} done <$CRONFILE
}

case "$1" in
	start)
		_system adjust_coredump
		patch_udhcpc_script

		network_still_upstarting()
		{
			pidof network >/dev/null && return 0
#			pidof iw >/dev/null && return 0
		}

		while network_still_upstarting; do {
			_watch counter "/tmp/wait4network" increment 1 max 10 || {
				_system crashreboot 'network_hangs'
			}
			_log sleep wait4network 10
		} done
		[ -e '/tmp/wait4network' ] && rm '/tmp/wait4network'

		func_cron_start $2
	;;
	minimal)
		_system adjust_coredump
		func_cron_start minimal
	;;
	stop)
		func_cron_stop	
	;;
	restart)
		_system adjust_coredump

		func_cron_stop leave_watchdog
		func_cron_start $2
	;;
	status)
		func_cron_status
	;;
	*)
		echo "Usage: $0 (stop | start [nano|minimal|standard] | restart [...] | status)"
	;;
esac


#!/bin/sh

_1wire_vars ()
{
	SECUSER="$( nvram get owfs_https_user )"
	SECPASS="$( nvram get owfs_https_pass )"
	JOBFILE="/www/1wire_jobs.txt"			# fixme! serialize nvram_var
	JOBDATA="/www/1wire_data.txt"
	LOCKFILE="/tmp/lockfile_1wire_checker"

	# we need:
	# - sensor_name -> 1wire-ID e.g. owfs_sensors="temperaturfuehler_keller=10.DA3D4E010800;zaehlbaustein1=1D.C61209000000"
	# - jobs:
	#   - sensorname, sensorfeld, untere_schwelle, obere_schelle, pollintervall [s]
	#
	# 				 owfs_jobs="temperaturfuehler_keller,temperature,-10,65,600;..."
	# - umrechnungsschema angeben?
	# - zaehlart?
}

_1wire_lockfile_remove ()
{
	rm $LOCKFILE
}

_1wire_lockfile_set ()
{
	while [ -e $LOCKFILE ]; do {
		sleep 1
	} done

	touch $LOCKFILE
}

_1wire_backup ()
{
	local BACKUP_DEST="backup_$( _system date unixtime )_$( _system date humanreadable )_1wire.tgz"
	local BACKUP_DATA="/etc/init.d/S88chip_workflow /www/cgi-bin-chip $JOBFILE $JOBDATA*"
	local USBSTICK="$( df | grep ^/dev/scsi | sed -n 's/^.*[ ]*[0-9]*[ ]*[0-9]*[ ]*[0-9]*[ ]*[0-9]*% \(.*\)/1/p' )"

	if [ -n "$USBSTICK" ]; then
		BACKUP_DEST="$USBSTICK/$BACKUP_DEST"
	else
		BACKUP_DEST="/tmp/$BACKUP_DEST"
	fi

	echo "writing backup to '$BACKUP_DEST'"

	tar cvzf $BACKUP_DEST $BACKUP_DATA
	sync

	echo
	echo "backup done at '$BACKUP_DEST'"
}

_1wire_bus_wait_until_clean ()
{
	local COUNTER=0

	while [ $( owdir -s 3002 | grep -c "^/..\." ) -lt 2 ]; do {
		sleep 6

		COUNTER=$(( COUNTER + 1 ))
		[ $COUNTER -gt 10 ] && {
			logger "1wire bus error - waiting since 1 minute"
			COUNTER=0
		}
	} done
}

_1wire_sensor_show ()
{
	_1wire bus_wait_until_clean

	owdir -s 3002 | grep ^..\.............
}

_1wire_sensorfield_show ()
{
	# vars must be something like:
	# ADDON=uncached
	# CHIP=/1D.C61209000000
	# FIELD=counters.A

	_1wire bus_wait_until_clean
	#	logger "getting: 'owread -s 3002 /${ADDON}${CHIP}/$FIELD'"
	owread -s 3002 /${ADDON}${CHIP}/$FIELD | sed 's/[^a-zA-Z0-9.]//g'
}

_1wire_error_trap ()
{
	local MESSAGE="$1"

	_http header_mimetype_output "text/html"
	echo "ERROR=\"$MESSAGE\""
	_1wire lockfile_remove
	exit 1
}

_1wire_print_endtag ()
{
	echo "ERROR=\"0\""
	_1wire lockfile_remove
	exit
}

_1wire_check_auth ()
{
	if [ "$USER" = "$SECUSER" ] && [ "$PASS" = "$SECPASS" ]; then
		return
	else
		_1wire error_trap "wrong username/password combination from IP: '$REMOTE_ADDR'"
	fi
}

_1wire_file_print ()
{
	local DATA="$2"
	local FILE="$1"

	[ "$DATA" = "ErrorInvalidargument" ] && {

		logger "$0 ARG2=ErrorInvalidargument - leaving database ('$FILE') untouched"
		return
	}

	_1wire file_lock   "$FILE"

	logger "$0 writing '$DATA' to '$FILE'"

	echo  "$DATA" >>"$FILE"

	_1wire file_unlock "$FILE"
}

_1wire_file_remove_line ()
{
	local PATT="$2"					# pattern to remove using grep
	local FILE="$1"

	_1wire file_lock   "$FILE"

	logger "$0 : removing line containing '$PATT'"
	sed -i "/$PATT/d" "$FILE"

	_1wire file_unlock "$FILE"
}

_1wire_file_lock ()
{
	while [ -e "$1.locked" ]; do logger "$0 : waiting for $1.locked"; sleep 1; done
	touch "$1"
}

_1wire_file_unlock ()
{
	rm -f "$1.locked"
}

_1wire_check_https ()
{
	[ "$SERVER_PORT" != "443" ] && _1wire error_trap "only https possible"
}

_1wire_sensor_data_fetch ()
{
	local LINE

	test ! -e "$JOBFILE" && return

	while read LINE; do {			 			# ok of jobs is not 100% sure, e.g. sensor is offline
		set $LINE						# so its better to check each return-code
		# this test is now in _1wire sensorfield_show()
		CHIP="/${1}"
		FIELD="${2}"
		ADDON=uncached

		VALUE="$( _1wire sensorfield_show )"
		if [ -n "$VALUE" ]; then
# 			logger "_1wire file_print "$JOBDATA.$1.$2" "$(_system date unixtime) $VALUE"
			_1wire file_print "$JOBDATA.$1.$2" "$(_system date unixtime) $VALUE"
		else
			logger "zero value - leaving database untouched"
		fi

	} done <"$JOBFILE"
}

_1wire_usage ()
{
	local URL="<small>https://${LANADR}${REQUEST_URI}</small>"	# fixme LANADR must be query-ip?
	local P="<b>"
	local O="</b>"
	local U1="${P}Usage:${O}"
	local U2="${P}Vars:${O}"
	local U3="${P}Output:${O}"

	_http header_mimetype_output "text/html"

	cat <<EOF
<html><head><title>1wire</title><body bgcolor=white text=black><pre>
$U1	${URL}?PASS=...&USER=...&ACTION=${P}joblist${O}

	${URL}?PASS=...&USER=...&ACTION=${P}jobadd${O}&CHIP=...&FIELD=...&THRESHOLDSTART=...&THRESHOLDEND=...&INTERVAL=...

	${URL}?PASS=...&USER=...&ACTION=${P}jobdel${O}&CHIP=...&FIELD=...

	${URL}?PASS=...&USER=...&ACTION=${P}chiplist${O}

	${URL}?PASS=...&USER=...&ACTION=${P}chipget${O}&CHIP=...&FIELD=...

	${URL}?PASS=...&USER=...&ACTION=${P}chipset${O}&CHIP=...&FIELD=...&VALUE=...

	${URL}?PASS=...&USER=...&ACTION=${P}chiphistory${O}&CHIP=...&FIELD=...&TIMESTART=...&TIMEEND=...

$U2	PASS=my_password
	USER=my_username

	CHIP=10.9BBAC5000800	# 1wire-ID

	FIELD=temperature
	FIELD=temperature,uncached

	TIMESTART=1192095247	# unix-timestamp, empty = 0
	TIMEEND=1192095333	# unix-timestamp, empty = now

	THRESHOLDSTART=-12.5	# range, where no alarm is scheduled including these values
	THRESHOLDEND=40.325	# if value is digital/bool and you want alarm only when value = YES, write in both arguments "NO"

	INTERVAL=15		# how often a job must be called in [s] / seconds, empty = 60

	VALUE=-12.5
	VALUE=40.325
	VALUE=on

$U3	- is always zero (!) or more lines of wished output
	- and: last line is always ERROR="0" or ERROR="exact explanation of error circumstances"

	- chiphistory outputs in each line: 	"UNIXTIME VALUE"
	- chiplist outputs in each line: 	"CHIP"
	- chipget outputs in one line: 		"VALUE"
	- joblist outputs in each line:		"CHIP FIELD THRESHOLDSTART THRESHOLDEND"
</pre></body></html>
EOF
}

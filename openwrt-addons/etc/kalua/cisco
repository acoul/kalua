#!/bin/sh

_cisco_cdpsend()
{
	local machine="$( _sanitizer run "$HARDWARE" alphanum )"
	local dev

	# send out information to the switches/neighs
	for dev in $WANDEV $LANDEV $WIFI_DEVS; do {
		# ~16k
		# http://downloads.openwrt.org/barrier_breaker/14.07/ar71xx/generic/packages/oldpackages/cdp-tools_20070302-1_ar71xx.ipk
		cdp-send -o -c 'l3r' -t '999' -m "$machine" -n "$HOSTNAME" -s "r$OPENWRT_REV" "$dev"
	} done
}

_cisco_poeport_repower()
{
	local switch_ip="$1"
	local port="$2"		# e.g. 'all' or 'Fa0/5' (=port5)
	local word i
	local pass_switch="$( uci get system.@monitoring[0].cisco_pass2 )"
	local pass_enable="$( uci get system.@monitoring[0].cisco_pass3 )"

	[ "$port" = 'all' ] && {
		for i in $( seq 0 48 ); do {
			_cisco poeport_repower "$switch_ip" "Fa0/$i"
		} done

		return
	}

	(
	sleep 1

	for word in $pass_switch; do {
		echo "$word"; sleep 1
	} done

	echo 'enable'; sleep 1
	echo "$pass_enable"; sleep 1

	echo 'configure terminal'; sleep 1
	echo "interface $port"; sleep 1
	echo 'power inline never'; sleep 3
	echo 'power inline auto'; sleep 1

	echo 'exit'
	) | telnet "$switch_ip" | tr -d '\r'	# tr: autoremove windows line break ^M
}

_cisco_query()
{
	local ip="$1"
	local auth="$2"		# 1x or 2x
	local word

	_log it query daemon info "ip: $ip auth: $auth"
	echo "# IP: $ip"

	# TODO:
	# wifi-ap: get channel + get assocs
	# get software version

	# last 10 seconds - maybe fire 'show version' only once? and use ';' for multiple commands in 1 line
	(
	sleep 1

	for word in $auth; do {
		echo "$word"; sleep 1
	} done

	echo 'terminal length 0'; sleep 1
	echo 'show ip interface brief'; sleep 1
	echo 'show inventory | include SFP'; sleep 1
	echo 'show version | include uptime\ is'; sleep 1
	echo 'show version | include Model\ number'; sleep 1
	echo 'show version | include Product/Model\ Number'; sleep 1
	echo 'show version | include Base\ ethernet\ MAC\ Address:'; sleep 1	# only on AP
	echo 'exit'
	) | telnet $ip | tr -d '\r'	# tr: autoremove windows line break ^M
}

_cisco_parse()
{
	local file="$1"
	local model_name uptime hostname ip i

	portstatus()
	{
		local name="$1"		# GigabitEthernet0/23
		local mode="$2"		# FIBER
		local port="$( grep "$name " "$file" )"

		explode $port
		local state="$5"

		# NAME: "GigabitEthernet0/2", DESCR: "1000BaseSX SFP"
		# NAME: "GigabitEthernet0/23", DESCR: "1000BaseSX SFP"
		if grep -q ": \"$name\", DESCR: " "$file" ; then
			# thats sure: this port IS fiber
			[ "$mode" = 'FIBER' ] || {
				# user queries the copper port
				state='down'
			}
		else
			# thats sure: this port is copper (no fiber)
			[ "$mode" = 'FIBER' ] && {
				# user queries the (potential) fiber port
				state='down'
			}
		fi

		if [ "$state" = 'up' ]; then
			echo "${mode:-full}"
		else
			echo "down${mode}"
		fi
	}

	hostname="$( grep '>terminal length' "$file" | cut -d'>' -f1 )"

	explode $( grep ^'Vlan1' "$file" )			# on switch
	[ -z "$2" ] && explode $( grep ^'BVI1' "$file" )	# on AP
	ip="$2"
	[ -z "$ip" ] && {
		explode $( grep ^'# IP: ' "$file" )
		ip="$3"						# from query()
	}

	# FIXME! convert to seconds, e.g.
	# 20 minutes
	# 2 hours, 2 minutes
	# 2 hours, 31 minutes
	# 2 weeks, 1 day, 3 hours, 0 minutes
	# 4 weeks, 4 days, 21 hours, 57 minutes
	explode $( grep 'uptime is ' "$file" )
	shift 3
	uptime="$*"

	explode $( grep 'Model .umber' "$file" )
	shift 3
	model_name="$*"

	_switch symbol html_init
	_switch symbol html "${hostname:-host?} | ${ip:-ip?} | ${model_name:-model?} | ${uptime:-up?}"
	_switch symbol newline

	case "$model_name" in
		'AIR-AP1242AG-E-K9')
			_switch symbol "$( portstatus FastEthernet0 )" 100 1
		;;
		'WS-C2960-48TT-L')
			# FIXME: each 12 ports are grouped (little gap)

			for i in $(seq 1 2 48); do {
				_switch symbol "$( portstatus FastEthernet0/$i )" 100 $i
			} done

			_switch symbol newline

			for i in $(seq 2 2 48); do {
				_switch symbol "$( portstatus FastEthernet0/$i )" 100 $i
			} done

			_switch symbol gap
			_switch symbol "$( portstatus GigabitEthernet0/1 )" 1G A
			_switch symbol "$( portstatus GigabitEthernet0/2 )" 1G B
		;;
		'WS-C2960-24TT-L')
			for i in $(seq 1 2 24); do {
				_switch symbol "$( portstatus FastEthernet0/$i )" 100 $i
			} done

			_switch symbol newline

			for i in $(seq 2 2 24); do {
				_switch symbol "$( portstatus FastEthernet0/$i )" 100 $i
			} done

			_switch symbol gap
			_switch symbol "$( portstatus GigabitEthernet0/1 )" 1G A
			_switch symbol "$( portstatus GigabitEthernet0/2 )" 1G B
		;;
		'WS-C2960-24PC-L')
			for i in $(seq 1 2 24); do {
				_switch symbol "$( portstatus FastEthernet0/$i )" 1G $i
			} done

			_switch symbol gap
			_switch symbol "$( portstatus GigabitEthernet0/1 FIBER )" 1G 25
			_switch symbol "$( portstatus GigabitEthernet0/2 FIBER )" 1G 26
			_switch symbol newline

			for i in $(seq 2 2 24); do {
				_switch symbol "$( portstatus FastEthernet0/$i )" 1G $i
			} done

			_switch symbol gap
			_switch symbol "$( portstatus GigabitEthernet0/1 )" 1G 25
			_switch symbol "$( portstatus GigabitEthernet0/2 )" 1G 26
		;;
		'WS-C2960G-24TC-L')
			for i in $(seq 1 2 20); do {
				_switch symbol "$( portstatus GigabitEthernet0/$i )" 1G $i
			} done

			_switch symbol gap
			_switch symbol "$( portstatus GigabitEthernet0/21 FIBER )" 1G 21
			_switch symbol "$( portstatus GigabitEthernet0/22 FIBER )" 1G 22
			_switch symbol "$( portstatus GigabitEthernet0/23 FIBER )" 1G 23
			_switch symbol "$( portstatus GigabitEthernet0/24 FIBER )" 1G 24
			_switch symbol newline

			for i in $(seq 2 2 20); do {
				_switch symbol "$( portstatus GigabitEthernet0/$i )" 1G $i
			} done

			_switch symbol gap
			_switch symbol "$( portstatus GigabitEthernet0/21 )" 1G 21
			_switch symbol "$( portstatus GigabitEthernet0/22 )" 1G 22
			_switch symbol "$( portstatus GigabitEthernet0/23 )" 1G 23
			_switch symbol "$( portstatus GigabitEthernet0/24 )" 1G 24
		;;
		*)
			_switch symbol html "$model_name|$file"
			_switch symbol unimplemented
		;;
	esac

	_switch symbol html_end
	echo -n '<br>'
}

_cisco_collect()	# FIXME! this is a sample
{
	local option="$1"	# <empty> or 'show'
	local pass_wifiap="$( uci get system.@monitoring[0].cisco_pass1 )"
	local pass_switch="$( uci get system.@monitoring[0].cisco_pass2 )"
	local i file

	# FIXME! retry when file is 0 byte?

	if [ -z "$option" ]; then
		for i in $(seq 3 38); do {
			# FIXME! sort by hostname
			_cisco query "192.168.202.$i" "$pass_wifiap" >/tmp/cisco-AP-$( printf "%03d" $i )
		} done

		# TODO: keep files when unreachable, but mark br0ken
		_cisco query 192.168.202.251 "$pass_switch" >'/tmp/cisco-E2-251'	# SWITCH-E2-48PORT
		_cisco query 192.168.202.252 "$pass_switch" >'/tmp/cisco-E2-252'	# SWITCH-E2-24PORT
		_cisco query 192.168.202.254 "$pass_switch" >'/tmp/cisco-E2-254'	# SWITCH-E2-POE24 ???

		_cisco query 192.168.202.232 "$pass_switch" >'/tmp/cisco-E3-232'	# SWITCH-E3-48PORT
		_cisco query 192.168.202.231 "$pass_switch" >'/tmp/cisco-E3-231'	# SWITCH-E3-24PORT
		_cisco query 192.168.202.230 "$pass_switch" >'/tmp/cisco-E3-230'	# SWITCH-E3-POE24

		_cisco query 192.168.202.247 "$pass_switch" >'/tmp/cisco-E5-247'	# SWITCH-E5-48PORT
		_cisco query 192.168.202.248 "$pass_switch" >'/tmp/cisco-E5-248'	# SWITCH-E5-24PORT
		_cisco query 192.168.202.249 "$pass_switch" >'/tmp/cisco-E5-249'	# SWITCH-E5-POE24
	else
		for file in /tmp/cisco-*; do {
			_cisco parse "$file"
		} done
	fi
}

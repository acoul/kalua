#!/bin/sh

_cron_daemon_restart()
{
	local func="cron_daemon_restart"
	local reason="$1"

	_log it $func daemon info "[START] $reason"
	/etc/init.d/*crond* restart
	_log it $func daemon info "[READY]"
}

_cron_vpnserver()
{
	local funcname='cron_vpnserver'
	local ip="${1:-84.38.67.43}"
	local firstrun="$TMPDIR/firstrun_$funcname"

	read -r UP REST </proc/uptime
	[ ${UP%.*} -lt 100 ] && return 0

	[ -e "$firstrun" ] || {
		touch "$firstrun"
		_log it $funcname daemon sms 'firstrun/bootup'
		_cron vpnserver_firstrun
	}

#	read -r LOAD REST </proc/loadavg
#
#	case "$LOAD" in
#		'0.0'*|'0.1'*|'0.2'*|'0.3'*)
#			[ -e '/tmp/DEBUG' ] && rm '/tmp/DEBUG'
#		;;
#		*)
#			echo "cron: $0 - high load - ps:" $PERMLOG
#			ps >>$PERMLOG
#			touch '/tmp/DEBUG'
#			_log it $funcname daemon alert "high load: $LOAD / $REST"
#		;;
#	esac

	ping -s 64 -c1 "$ip" >/dev/null || _log it $funcname daemon alert "ping to $ip failed"
	[ -e '/usr/sbin/olsrd' ] && _olsr build_overview_static
	[ -e '/usr/local/sbin/vtund' ] && _vpn innercity_master_vtund check_on_server
	cron.build_netjson.sh "${CONFIG_PROFILE%_*}" >'/var/www/map.json'

	# uptime.sec->minutes divideable (without rest) by 360? -> each 360 mins
	[ $(( $(( ${UP%.*} / 60 )) % 360 )) -eq 0 ] && {
		_firmware update_pmu
		_watch archivsize "$PERMLOG" 200 300
	}

	_scheduler run
	case "$( date '+%H:%M' )" in
		*':00'|*':15'|*':30'|*':45')
			_http robotstxt_generate
			_watch sshd_or_telnet force
			_watch archivsize '/tmp/messages' 2000
			cron.monitoring send_alive_message
			cron.reverse_ssh_tunnel
		;;
		'04:05')
			_vpn innercity_master_vtund stop

			command -v 'apt-get' >/dev/null && {
				apt-get update
				apt-get -y dist-upgrade
				apt-get -y autoremove

				[ -e '/var/run/reboot-required' ] && {
					_system crashreboot 'apt-get_reboot'
				}
			}
		;;
		'04:06')
			_vpn innercity_master_vtund start
		;;
	esac
}

_cron_vpnserver_portfw()
{
	local node="$1"		# e.g. 612
#	local action="$2"	# add = <empty> | del
	local ip_client="$( _ipsystem getvar 'WIFIVPNCLIENTADR' "$node" )"
	local line port_ext

	# e.g.: ### 612|'c8d3a357f76a') PORT=8293 ;; # client: 192.168.171.222 indev: eth1 mac/id: 00:40:ad:1e:24:ce port: 80 port_ext: 8293
	wget -qO - "http://$ip_client/cgi-bin-tool.sh?OPT=portforwarding_table" | while read -r line; do {
		case "$line" in
			'### '*)
				explode $line
				port_ext="${15}"
				$IPT -t nat -I PREROUTING -p tcp --dport $port_ext -j DNAT --to-destination $ip_client
			;;
		esac
	} done

	$IPT -t nat -I POSTROUTING -d $ip_client -j MASQUERADE
}

_cron_vpnserver_firstrun()
{
	_system sysctl_tweaks
	ln -sf '/www/robots.txt' '/var/www/robots.txt'

	# left from default init-script with dummy-config
	pidof vtund >/dev/null && killall vtund

	_netparam check
	_netfilter ipforwarding_start
	uci set olsrd.@meta[0].allow_no_neigh='true'
	uci set system.@monitoring[0].ignore_lossyethernet='true'	# avoid 'lanping' crashs

	local public_ip="$( _net get_external_ip )"
	local port="$( _vpn innercity_master_vtund get_port )"

	# see _vpn_innercity_master_iface() at 'Interface'
	local ignored_interfaces="$( uci -q get olsrd.@meta[0].ignored_interfaces )"
	local dev
	local ignored_interfaces_list="$( for dev in $ignored_interfaces; do printf '%s' "\"$dev\" "; done )"

	# new vtun-interfaces are automatically added in vpn_innercity_master_iface()
	# TODO: own func + configure MainIP on loopback/VPN? and use for service
	cat >'/etc/olsrd.conf' <<EOF
DebugLevel 0
LinkQualityAlgorithm "etx_ffeth"

LoadPlugin "$( _olsr plugin_filename_get 'txtinfo' )"
 {
	PlParam "accept" "0.0.0.0"
	PlParam "listen" "0.0.0.0"
	PlParam "port" "2006"
 }

LoadPlugin "$( _olsr plugin_filename_get 'jsoninfo' )"
 {
	PlParam "accept" "0.0.0.0"
	PlParam "listen" "0.0.0.0"
	PlParam "port" "9090"
 }

LoadPlugin "$( _olsr plugin_filename_get 'nameservice' )"
 {
	PlParam "name" "$HOSTNAME"
	PlParam "service" "http://$HOSTNAME:80|tcp|VPN-hideandseek:$public_ip:$port"
 }

Hna4
 {
	0.0.0.0 0.0.0.0		# we have internet
 }

Interface "lo"
 {
	# values for speed 7
	Ip4Broadcast  255.255.255.255
	HelloInterval		  4.0
	HelloValidityTime	175.0
	TcValidityTime		700.0
	TcInterval		  3.0
	MidInterval		 35.0
	MidValidityTime		700.0
	HnaInterval		 14.0
	HnaValidityTime		175.0
 }
EOF

	[ -n "$ignored_interfaces" ] && {
		cat >>'/etc/olsrd.conf' <<EOF

# Interface $ignored_interfaces_list ignore
EOF
	}

	[ -h '/var/etc/olsrd.conf' ] || ln -s '/etc/olsrd.conf' '/var/etc/olsrd.conf'
	[ -h '/var/www/log.txt' ]    || ln -s "$PERMLOG" '/var/www/log.txt'

	true
}

_cron_dummy()
{
	:
	### install 'innercity-VPN' on a fresh debian7 VPS-server:
	# apt-get update
	# apt-get -y install build-essential bison flex zlib1g-dev liblzo2-dev libncurses5-dev
	# apt-get -y install libreadline6-dev libcurl4-openssl-dev lsof bsdmainutils cron git
	# enable tun/tap via webinterface
	# maybe tweaks: http://lowendbox.com/blog/yes-you-can-run-18-static-sites-on-a-64mb-link-1-vps/
	#
	### OLSR:
	# wget -O olsrd-latest.tar.bz2 http://www.olsr.org/releases/0.9/olsrd-0.9.0.3.tar.bz2
	# wget -O olsrd-latest.tar.bz2 http://www.olsr.org/releases/latest.tar.bz2
	# tar xjf olsrd-*; cd olsrd-*
	# OR: git clone https://github.com/OLSR/olsrd.git olsrd-git && cd olsrd-git
	# make build_all && sudo make install_all
	# cd ..; rm -fR olsrd-*
	# sudo mkdir -p /var/etc
	# sudo ln -s /usr/local/sbin/olsrd /usr/sbin/olsrd
	# sudo ln -s /etc/olsrd.conf /var/etc/olsrd.conf
	#
	### OLSRv2:
	# apt-get -y install cmake pkg-config libnl-3-dev libnl-genl-3-dev libtomcrypt-dev
	# for cmake 3.x:
	#   // http://askubuntu.com/questions/610291/how-to-install-cmake-3-2-on-ubuntu-14-04
	#   apt-get install python-software-properties
	#   apt-get install software-properties-common
	#   add-apt-repository ppa:george-edison55/cmake-3.x
	#   apt-get update
	#   apt-get install cmake
	# git clone http://olsr.org/git/oonf.git
	# cd oonf/build && cmake .. && make
	# ./olsrd2_static --version
	#
	### TINC:
	# wget http://www.tinc-vpn.org/packages/tinc-1.1pre11.tar.gz
	# tar xzf tinc-*; cd tinc-*
	# ./configure && make && make install
	# rm -fR tinc-*
	#
	### TINC-config:
	# wget -O vpnconfig-master.tar.gz https://github.com/weimarnetz/vpnconfig/archive/latest.tar.gz
	# tar xzf vpnconfig-*; cd vpnconfig-*
	# mkdir -p /etc/tinc/wnvpn
	# cp -vR tinc/wnvpn/* /etc/tinc/wnvpn
	# cp -vR tinc/wnvpn/* /usr/local/etc/tinc/wnvpn
	# READ: https://github.com/weimarnetz/vpnconfig#ip-schema (e.g. 'vpn4' = .52)
	# vi /etc/tinc/wnvpn/tinc-up
	# vi /etc/tinc/wnvpn/tinc-down
	# vi /etc/tinc/wnvpn/tinc.conf
	# tinc -n 'wnvpn' init 'vpn4'
	# ls -l /usr/local/etc/tinc/wnvpn/rsa_key.priv
	# tincd -c /etc/tinc/wnvpn
	#
	### VTUN:
	# TODO: build all 3 variants: normal nossl-lzo nossl-nolzo
	# wget http://downloads.sourceforge.net/project/vtun/vtun/3.0.3/vtun-3.0.3.tar.gz
	# tar xzf vtun-*; cd vtun-*
	# test -e /usr/local/bin/strip || ln -s /bin/true /usr/local/bin/strip
	# sed -i "s/^inline void clear_nat_hack_flags/extern inline void clear_nat_hack_flags/" cfg_file.y
	# ./configure --disable-ssl && make && make install
	# cd ..; rm -fR vtun-*
	#
	### UCI:
	{
	echo 'system.@monitoring[0].url=http://intercity-vpn.de/networks/liszt28'
	echo 'system.@system[0].hostname=MYHOST'
	echo 'system.@fwupdate[0].mode=testing'
	echo 'system.vpn.port=5001'
	echo 'system.@profile[0].name=ffweimar_ap'
	echo 'system.@profile[0].nodenumber=1'
	echo 'system.@profile[0].ipsystem=ffweimar'
	echo 'network.lan.ifname=venet0'		# TODO: autoget first ethernet
	echo 'network.lan.gateway=true'			# workaround: should be an IP
	echo 'olsrd.@meta[0].ignored_interfaces='
	echo 'system.@vds[0].server=root@intercity-vpn.de:/var/www/networks/liszt28/vds/'
	} >/etc/kalua_uci
	#
	# - set sms_password?
	# - system.@monitoring[0].maintenance=reverse_sshtunnel
	#
	### KALUA:
	# TODO: git clone?
	# wget -O /tmp/tarball.tgz http://intercity-vpn.de/networks/liszt28/tarball/testing/tarball.tgz
	# or: scp root@[2a06:8ec0:4:10d::c658]:/tmp/tarball.tgz /tmp
	# cd /; tar xzf /tmp/tarball.tgz && rm -f /tmp/tarball.tgz; cd ~
	# /etc/kalua_init
	# (respect possible error-messages, e.g. bash-linking)
	#
	### WEBSERVER: (for static html only)
	# see: https://lowendbox.com/blog/yes-you-can-run-18-static-sites-on-a-64mb-link-1-vps/
	# apt-get -y install $YOUR_CHOICE
	# - (e.g. lighttpd or http://zeniv.linux.org.uk/~alan/%C2%B5Web/ )
	# - or: git clone http://git.openwrt.org/project/uhttpd.git
	# mkdir -p /var/www
	# test -e /var/www/index.html && mv /var/www/index.html /var/www/index.html_old
	# touch /var/www/cgi-bin-status.html && ln -s /var/www/cgi-bin-status.html /var/www/index.html
	# hint: set 'DocumentRoot' = '/var/www' in
	#	'/etc/apache2/sites-available/000-default.conf' or
	#	'/etc/lighttpd/lighttpd.conf'
	# wget -O /var/www/favicon.ico http://intercity-vpn.de/favicon.ico
	# touch /var/www/cgi-bin-tool.sh
	# /usr/sbin/cron.build_netjson.sh setup_html /var/www
	#
	### crontab -e
	# (for user root: before enabling this crontab, fire this line manually first and solve problems)
	# * * * * * command . /tmp/loader || { /etc/kalua_init; . /tmp/loader; } && _cron vpnserver
	#
	### TODO:
	# wget -O /bin/ipcalc.sh "https://dev.openwrt.org/browser/trunk/package/base-files/files/bin/ipcalc.sh?format=txt"
	# olsr-HNA4/MainIP?: https://github.com/weimarnetz/vpnconfig#ip-schema
	# unalias cp/rm/mv -> avoiding 'cp -i' (always asking)
	# auto-key-update for tinc (1 server changes, all other must update)
	# build an interactive 'vpn_setup'
	# compile 'uci'
	# autoremove build-packages
	# check_deps() e.g. iptables, curl
	#
	# TODO:
	# ssh-copy-id -i ~/.ssh/id_rsa.pub root@intercity-vpn.de
	# ssh root@intercity-vpn.de
	# tail -n1 .ssh/authorized_keys >.ssh/authorized_keys.giancarlo.camserver
	# apt-get install dropbear -> reverse-ssh-tunnel
}

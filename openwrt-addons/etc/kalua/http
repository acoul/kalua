#!/bin/sh

_http_query_string_sanitize()	# we await the global var 'QUERY_STRING' which is set from webserver
{
#	local debug="$1"	# real input is the global var 'QUERY_STRING' (set by webserver)
#	logger "debug: $debug - $$ - QUERY_STRING='$QUERY_STRING'"

	[ "$REQUEST_METHOD" = 'POST' ] && {
		[ ${CONTENT_LENGTH:-0} -eq 0 ] || {
			local postdata="$( dd count=$CONTENT_LENGTH bs=1 2>/dev/null )"
			QUERY_STRING="${QUERY_STRING}${QUERY_STRING:+&}${postdata}"
		}
	}

	[ -z "$QUERY_STRING" ] && return

	# 1) now we have joined POST+GET in one string
	# 2) special characters like %20 (space) must be decoded (httpd -d)
	# 3) hide all single-quotes (') by escaping them from shell
	# 4) delete all '&'/'$'-signs and append a single-quote + pipe to /dev/null + newline
	# 5) now we have a de-serialized query-string and each line looks like
	#    VARNAME=VALUE' >/dev/null 2>/dev/null;
	# 6) replace the first equal-sign with =' , now we have in each line
	#    VARNAME='VALUE' >/dev/null 2>/dev/null;
	# 7) varname must only consist of "a-z A-Z 0-9 _" (no spaces), all other things are deleted

	/usr/sbin/*httpd -d "$QUERY_STRING" 2>/dev/null |
	 sed  -e "s/'/'\\\''/g" \
	      -e "s/&/' >\/dev\/null 2>\/dev\/null;\n/g" \
	      -e "s/$/' >\/dev\/null 2>\/dev\/null;\n/" |
	  sed -n "s/^\([a-zA-Z0-9_]*\)=\(.*\)/\1='\2/p"

	# FIXME! hide backticks

	# FIXME! allow separator ; and & for dividing vars

	# FIXME! check: "The equals sign may be omitted if the value is an empty string"

	# FIXME! values cant have ? or & inside,
	#	 because we first decode and then split

	# FIXME! automatically build php-style array[] -> array=$array $value ...
	#	 sed -ne 's/^\([a-zA-Z0-9]*\)\[]=\(.*\)/\1=${\1}\2 #/'

	# FIXME! security: detect IFS-change

	# here we do the same for our ENV-variables, so user can't overwrite/inject special vars
	# whole output of this function can be used like:
	#
	# eval $( _http query_string_sanitize "$debugmessage" )

	/usr/bin/env |
	 sed -e "s/'/'\\\''/g" \
	     -e "s/=/='/" \
	     -e "s/$/' >\/dev\/null 2>\/dev\/null; /"
}

_http_query_string_group2list()		# outputs a list for iterating, formed from all vars beginning with GROUP
{					# e.g. myform_checkbox_1="foo" myform_checkbox_5="bar" -> 1 5
	local GROUP="$1"

	echo "$QUERY_STRING" |
	 sed "s/${GROUP}\([0-9a-zA-Z]*\)/\n\1#\n/g" |
	  sed -n '/#$/s/^\(.*\)#/\1/p'
}

_http_url_get_serverstring()
{
	echo "$1" | sed -n 's|^http://\([a-zA-Z0-9\.-]*\)/.*$|\1|p'	# http://bla.com/blubb -> bla.com
}

_http_header_mimetype_output()
{
	local mime="$1"		# e.g. 'text/html'
	local option="$2"	# e.g. 'gzip' or <filename>

	case "$option" in
		'')
			echo -en "Content-type: ${mime}\n\n"
		;;
		'gzip')
			echo -en "Content-type: ${mime}\nContent-Encoding: gzip\n\n"
		;;
		*)
			echo -en "Content-type: ${mime}\nContent-Disposition: attachment; filename=\"$option\"\n\n"
		;;
	esac
}

_http_spoof_captive_portal_checker_microsoft()
{
	_http header_mimetype_output 'text/plain'

	echo -n 'Microsoft NCSI'
}

_http_redirect()
{
	local funcname='http_redirect'
	local ERRORCODE="$1"		# e.g '307'
	local DESTINATION="$2"
	local KEYWORD="$3"		# e.g. profile_id from user-db or 'html_only'
	local REASON
	local PROTO="http"

	case "$DESTINATION" in
		ip_*)
			case "$DESTINATION" in
				ip_incoming_interface)
					if _net ip4_is_private $REMOTE_ADDR ; then
						DESTINATION="$( ip route get $REMOTE_ADDR | sed -n 's/^.*src \([0-9\.]*\).*/\1/p;q' )"
					else
						read -r DESTINATION 2>/dev/null </tmp/MY_PUBLIC_IP || DESTINATION=
					fi
				;;
				ip_wifi)
					DESTINATION="$WIFIADR"
				;;
				ip_lan)
					DESTINATION="$LANADR"
				;;
				ip_wan)
					DESTINATION="$WANADR"
				;;
				ip_clients_real_gateway)
					local clientip="$KEYWORD"
					local nodenumber="$( _ipsystem get "$clientip" )"
					local client_gateway="$( _ipsystem getvar 'LANADR' $nodenumber )"

					DESTINATION="$client_gateway"
				;;
			esac

			[ "$SERVER_PORT" = "443" ] && PROTO="https"

			DESTINATION="${PROTO}://${DESTINATION:=$WIFIADR}${SCRIPT_NAME:-/$( _weblogin splashscript )}?REDIRECTED=1"
		;;
		landing_page)
			case "$KEYWORD" in
				"http://"*)
					DESTINATION="$KEYWORD"
				;;
				*)
					DESTINATION=
					read -r DESTINATION 2>/dev/null </www/images/landing_page.txt	# fixme! remove this...
					[ -z "$DESTINATION" -a -n "$KEYWORD" ] && {
						eval "$( _db user profile show $KEYWORD )"
						DESTINATION="$LANDING_URL"
					}

					# FIXME! userlang -> TLD (e.g. google.es)
					DESTINATION="${DESTINATION:=http://google.com}"
				;;
			esac
		;;
	esac

	case "$ERRORCODE" in
		302)
			REASON="Temporary Redirect"
		;;
	esac

	_log it $funcname daemon info "to '$REMOTE_ADDR' code/reason/destination: '$ERRORCODE'/'$REASON'/'$DESTINATION'"

	local CGI_PREAMBEL="Status: $ERRORCODE $REASON"

	[ "$KEYWORD" = 'html_only' ] || {
		cat <<EOF
$CGI_PREAMBEL
Connection: close
Cache-Control: no-cache
Content-Type: text/html
Location: $DESTINATION

EOF
		# normally the webserver ends execution here
	}

	cat <<EOF
<HTML><HEAD>
<TITLE>$ERRORCODE $REASON</TITLE>
<META HTTP-EQUIV="cache-control" CONTENT="no-cache">
<META HTTP-EQUIV="pragma" CONTENT="no-cache">
<META HTTP-EQUIV="expires" CONTENT="0">
<META HTTP-EQUIV="refresh" CONTENT="0; URL=$DESTINATION">
</HEAD><BODY>
<H1>$ERRORCODE - $REASON</H1>
<P>click <A HREF="$DESTINATION">here</A> if you are not redirected automatically.</P>
</BODY></HTML>
EOF
}

_http_include_js_sorttable()
{
	local file='/tmp/sorttable.js'
	local url='http://intercity-vpn.de/scripts/sorttable.js_googleclosure.includeable'

	# adds 7kb to HTML-output, we can reduce to 2.8k when better minified
	if [ -e "$file" ]; then
		cat "$file"
	else
		wget -qO "$file" "$url" && {
			if grep -q ^'<script type="text/javascript">' "$file"; then
				cat "$file"
			else
				rm "$file"
			fi
		}
	fi
}

#!/bin/sh

_ipsystem_get()
{
	local nodenumber_or_ipaddr="$1"		# e.g. <empty> or <nodenumber> or <ipaddr>

	# dont use CONFIG_PROFILE here, it does not work during early bootstrapping in apply_profile
	local system="$( uci -q get system.@profile[0].ipsystem )"

	_ipsystem "${system:-ffweimar}" "$nodenumber_or_ipaddr"
}

_ipsystem_getvar()
{
	local varname="$1"
	local nodenumber="$2"	# <empty> = myself

	_ipsystem get $nodenumber | grep ^"$varname=" | cut -d'=' -f2
}

_ipsystem_ipv4_extract_octetts()	# fixme! code duplication in sanitizer()
{
	local ip="$1"
	local oldifs="$IFS"; IFS="."; set $ip; IFS="$oldifs"
	echo "local o1=$1; local o2=$2; local o3=$3; local o4=$4"
}

_ipsystem_amiga()			# lannet  = 10.10.x.128/25
{					# wifinet = 10.10.x.0/25
	local nodenumber="$1"
	local city=10
	local network=10
	local range_start=2
	local range_end=254
	local range_first_random=250

	nodenumber_is_in_range()
	{
		test $nodenumber -ge $range_start -a $nodenumber -le $range_end 2>/dev/null
	}

	  if [ -z "$nodenumber" ]; then
		nodenumber="${NODENUMBER:-$( _math random_integer $range_first_random $range_end )}"
	elif [ "$nodenumber" = "random" ]; then
		nodenumber=$( _math random_integer "$range_first_random" "$range_end" )
	elif _sanitizer run "$nodenumber" ip4 check ; then	# ip2nodenumber()
		o1=;o2=;o3=
		eval $( _ipsystem ipv4_extract_octetts "$nodenumber" )

		if [ $o1 -eq $network -a $o2 -eq $city ]; then
				echo "$o3"
				return 0
		else
			return 1
		fi
	elif ! nodenumber_is_in_range ; then
		return 1
	fi

	# fixme! implement random-case()

	cat <<EOF
WIFINET=$network.$city.$nodenumber.0
WIFIBRC=$network.$city.$nodenumber.127
WIFI_ADR=$network.$city.$nodenumber.1
WIFIADR=$network.$city.$nodenumber.1
WIFI_PRE=8
WIFI_DHCP_PRE=25
WIFIDHCPSTART=$network.$city.$nodenumber.2
WIFIDHCPNUM=122

LANADR=$network.$city.$nodenumber.129
LANMSK=255.255.255.128
LANDHCPSTART=130
LANDHCPNUM=125

WANADR=$network.$city.$nodenumber.125
WANMSK=255.255.255.252

OLSR_HNA=$network.$city.$nodenumber.0/24
NODE_NUMBER_RANDOM=false
FFF_CITY=$city
EOF
}

_ipsystem_ffsundi ()			# ARG1: - empty       -> has_nodenumber? -> output for my nodenumber
{					#  	- "random" or empty && no_nodenumber?  -> output for random nodenumber
	local NODE_NUMBER="$1"		#       - IP-address  -> output nodenumber
	local CITY=10			#	- node-number -> output for this nodenumber, return 1 if not in range
	local NW=10
	local RANGE_START=2
	local RANGE_END=254
	local RANGE_FIRST_RANDOM=220
	local oct1 oct2 oct3 oct4 oldIFS

	  if [ -z "$NODE_NUMBER" ]; then
		NODE_NUMBER="${NODENUMBER:-$( _math random_integer $RANGE_FIRST_RANDOM $RANGE_END )}"
	elif [ "$NODE_NUMBER" = "random" ]; then
		NODE_NUMBER=$( _math random_integer $RANGE_FIRST_RANDOM $RANGE_END )
	elif [ "$( echo $NODE_NUMBER | sed 's/[^\.]//g' )" = '...' ]; then	# is IPv4
		oldIFS="$IFS"; IFS='.'; explode $NODE_NUMBER; IFS="$oldIFS"
		oct1="$1"; oct2="$2"; oct3="$3"; oct4="$4"

		[ $oct1 -eq $NW ] && [ $oct2 -eq $CITY ] && {
			  if [ $oct3 -eq 10 ]; then                echo $oct4		# input = wifi-ip4
			elif [ $oct4 -ge 0 -a $oct4 -le 63 ]; then echo $oct3		# input = lan-ip4
			fi
			return 0
		}

		return 1
	fi

	if test "$NODE_NUMBER" -ge $RANGE_START -a "$NODE_NUMBER" -le $RANGE_END 2>/dev/null; then
		local S=0			# subnetstart 	e.g. network.city.100.${S}
		local N=$NODE_NUMBER		# nodenumber_id	e.g. network.city.${N}.0
		local RANDOM=false

		if [ "$NODE_NUMBER" -ge $RANGE_FIRST_RANDOM ]; then
			RANDOM=true
		fi
	else
		return 1
	fi

	cat<<EOF
NODE_NUMBER=$NODE_NUMBER
NODE_NUMBER_RANDOM=$RANDOM
OLSR_HNA=$NW.$CITY.$N.$S/25

LAN_ADR=$NW.$CITY.$N.$(( S + 1 ))
LAN_IP=$NW.$CITY.$N.$(( S + 1 ))/26
LAN_IP_1ST=$NW.$CITY.$N.$(( S + 2 ))/26
LAN_PRE=26
LAN_DHCP_PRE=26
LAN_DHCP_NUM=40
LAN_DHCP_LEASETIME=12h

WAN_ADR=$NW.$CITY.$N.$(( S + 61 ))
WAN_PRE=30
WAN_IP=$NW.$CITY.$N.$(( S + 61 ))/30

WIFI_ADR=$NW.$CITY.10.$NODE_NUMBER
WIFI_IP=$NW.$CITY.10.$NODE_NUMBER/8
WIFI_IP_1ST=$NW.$CITY.$NODE_NUMBER.97
WIFI_PRE=8
WIFI_DHCP_PRE=28
WIFI_DHCP_NUM=14
WIFI_DHCP_LEASETIME=2h

DHCP_LAN="$NW.$CITY.$NODE_NUMBER.$(( S + 2 ))/26,40,12h"
DHCP_WIFI="$NW.$CITY.$NODE_NUMBER.97/28,14,2h"
# ---
FFF_CITY=$CITY
FFF_NET=$NW
FFF_NODE=$NODE_NUMBER
FFF_HNA=$NW.$CITY.$N.$S/25
LANADR=$NW.$CITY.$N.$(( S + 1 ))
LAN1ST=$NW.$CITY.$N.$(( S + 2 ))
LANMSK=255.255.255.192
LANBRC=$NW.$CITY.$N.$(( S + 63 ))
LANNET=$NW.$CITY.$N.$S
LANPRE=26
LANDHCPSTART=$(( S + 2 ))
LANDHCPNUM=40
WIFIADR=$NW.$CITY.10.$NODE_NUMBER
WIFI1ST=$NW.$CITY.$NODE_NUMBER.97
WIFIMSK=255.255.255.240
WIFIBRC=$NW.$CITY.$N.111
WIFINET=$NW.$CITY.$N.96
WIFIPRE=28
WANADR=$NW.$CITY.$N.61
WAN1ST=$NW.$CITY.$N.62
WANMSK=255.255.255.252
WANBRC=$NW.$CITY.$N.63
WANNET=$NW.$CITY.$N.60
WANPRE=30
WIFIDHCPSTART=$NW.$CITY.$N.98
WIFIDHCPNUM=14
WIFIVPNSERVERADR=$NW.$CITY.$N.110
WIFIVPNCLIENTADR=$NW.$CITY.$N.109
WIFIVPNNET=$NW.$CITY.$N.108
WIFIVPNBRC=$NW.$CITY.$N.111
WIFIVPNPRE=30
ROAMING_IP4=172.31.$CITY.$NW
ROAMING_PRE=24
EOF
}

_ipsystem_classc()
{
	_ipsystem ffweimar "$1" "168" "192" "1" "254" "250" "16"	# fixme!
}

_ipsystem_leonardo()
{
	_ipsystem ffweimar "$1" "10"
}

_ipsystem_ffweimar()			# ARG1: - empty       -> has_nodenumber? -> output for my nodenumber
{					#  	- "random" or empty && no_nodenumber?  -> output for random nodenumber
	local node_number="$1"		#       - IP-address  -> output nodenumber
	local city="${2:-63}"		#	- node-number -> output for this nodenumber, return 1 if not in range
	local network="${3:-10}"
	local range_start="${4:-2}"
	local range_end="${5:-1020}"
	local range_first_random="${6:-970}"
	local wifi_mask="${7:-8}"

	local wifi_leasetime='30m'	# dnsmasq-syntax = 30 min
	local wifi_leasenum='29'
	local lan_leasenum='13'
	local oct1 oct2 oct3 oct4 oldIFS s n random

	# a typical node 16:
	# all:  10.63.16.0  /26  (=  0...64)
	# WIFI: 10.63.16.0  /27  (=  1...30) = 29 x DHCP
	# LAN:  10.63.16.32 /28  (= 33...46) = 13 x DHCP
	# ---:          .48 /29  (= 49...54) =  6 x IP (unused)
	# VPN:  10.63.16.56 /30  (= 57...58) =  1 x here, 1 x remote
	# WAN:  10.63.16.60 /30  (= 61...62) =  1 x here, 1 x remote

	if   [ -z "$node_number" ]; then
		node_number="${NODENUMBER:-$( _math random_integer $range_first_random $range_end )}"
	elif [ "$node_number" = 'random' ]; then
		node_number=$( _math random_integer "$range_first_random" "$range_end" )
	elif _sanitizer run "$node_number" ip4 check ; then
		oldIFS="$IFS"; IFS='.'; explode $node_number; IFS="$oldIFS"
		oct1="$1"; oct2="$2"; oct3="$3"; oct4="$4"

		if [ $oct1 -eq $network -a $oct2 -eq $city ]; then
			if   [ $oct4 -gt 191 ]; then
				echo $(( oct3 + 765 ))
			elif [ $oct4 -gt 127 ]; then
				echo $(( oct3 + 510 ))
			elif [ $oct4 -gt  63 ]; then
				echo $(( oct3 + 255 ))
			else
				echo $oct3
			fi

			return 0
		else
			return 1
		fi
	fi

	if test "$node_number" -ge $range_start -a "$node_number" -le $range_end 2>/dev/null; then
		s='0'			# subnetstart 	e.g. network.city.100.${S}
		n="$node_number"	# nodenumber_id	e.g. network.city.${N}.0
		random='false'

		if   [ "$node_number" -ge $range_first_random ]; then
			n=$(( node_number - 765 ))
			s=192
			random='true'
		elif [ "$node_number" -gt 765 ]; then
			n=$(( node_number - 765 ))
			s=192
		elif [ "$node_number" -gt 510 ]; then
			n=$(( node_number - 510 ))
			s=128
		elif [ "$node_number" -gt 255 ]; then
			n=$(( node_number - 255 ))
			s=64
		fi
	else
		return 1
	fi

	cat <<EOF
NODE_NUMBER=$node_number
NODE_NUMBER_RANDOM=$random
OLSR_HNA=$network.$city.$n.$s/26

LAN_ADR=$network.$city.$n.$(( s + 33 ))
LAN_IP=$network.$city.$n.$(( s + 33 ))/28
LAN_IP_1ST=$network.$city.$n.$(( s + 34 ))/28
LAN_PRE=28
LAN_DHCP_PRE=28
LAN_DHCP_NUM=$lan_leasenum
LAN_DHCP_LEASETIME=12h
LANADR=$network.$city.$n.$(( s + 33 ))
LAN1ST=$network.$city.$n.$(( s + 34 ))
LANMSK=255.255.255.240
LANBRC=$network.$city.$n.$(( s + 47 ))
LANNET=$network.$city.$n.$(( s + 32 ))
LANPRE=28
LANDHCPSTART=$(( s + 34 ))
LANDHCPNUM=$lan_leasenum

WIFI_ADR=$network.$city.$n.$(( s + 1 ))
WIFI_IP=$network.$city.$n.$(( s + 1 ))/$wifi_mask
WIFI_IP_1ST=$network.$city.$n.$(( s + 2 ))
WIFI_PRE=8
WIFI_DHCP_PRE=27
WIFI_DHCP_NUM=$wifi_leasenum
WIFI_DHCP_LEASETIME=$wifi_leasetime

DHCP_LAN="$network.$city.$n.$(( s + 34 ))/28,$lan_leasenum,12h"
DHCP_WIFI="$network.$city.$n.$(( s + 2 ))/27,$wifi_leasenum,$wifi_leasetime"

FFF_CITY=$city
FFF_NET=$network
FFF_NODE=$node_number
FFF_HNA=$network.$city.$n.$s/26

WIFIADR=$network.$city.$n.$(( s + 1 ))
WIFI1ST=$network.$city.$n.$(( s + 2 ))
WIFIMSK=255.255.255.224
WIFIBRC=$network.$city.$n.$(( s + 31 ))
WIFINET=$network.$city.$n.$s
WIFIPRE=27

WANADR=$network.$city.$n.$(( s + 61 ))
WAN1ST=$network.$city.$n.$(( s + 62 ))
WANMSK=255.255.255.252
WANBRC=$network.$city.$n.$(( s + 63 ))
WANNET=$network.$city.$n.$(( s + 60 ))
WANPRE=30
WAN_ADR=$network.$city.$n.$(( s + 61 ))
WAN_PRE=30
WAN_IP=$network.$city.$n.$(( s + 61 ))/30

WIFIDHCPSTART=$network.$city.$n.$(( s + 2 ))
WIFIDHCPNUM=$wifi_leasenum

WIFIVPNNET=$network.$city.$n.$(( s + 56 ))
WIFIVPNSERVERADR=$network.$city.$n.$(( s + 57 ))
WIFIVPNCLIENTADR=$network.$city.$n.$(( s + 58 ))
WIFIVPNBRC=$network.$city.$n.$(( s + 59 ))
WIFIVPNPRE=30

ROAMING_IP4=172.31.$city.$network
ROAMING_PRE=24
EOF
}

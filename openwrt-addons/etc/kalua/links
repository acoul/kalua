#!/bin/sh

_links_firmware_url_get()		# ARG1:	stable|beta|testing|empty
{					#	stable|beta|testing	<crc>			# .. (fetching crc)
					#	version_installed				# fixme! move to _firmware()
					#	version_current		<stable|beta|testing>	# ..
					#	version_current_main	<stable|beta|testing>	# ..
	local COMMAND="$1"		#	tarball|tarball_hash
	local KEYWORD="$2"		#	olsr_whitelist

	[ -z "$KEYWORD" ] && {
		case "$COMMAND" in
			stable|beta|testing)
				KEYWORD="$COMMAND"	# workaround for bad API 8-)
			;;
		esac
	}

	local UPDATEMODE="$( _firmware updatemode "$KEYWORD" override )"
	local BASE="$( uci get system.@fwupdate[0].url )"	# http://intercity-vpn.de/firmware
	local ARCHITECTURE="$( _system architecture )"
	local url
	BASE="${BASE:-http://intercity-vpn.de/firmware}"

	case "$COMMAND" in
		olsr_whitelist)
			echo -n "$( uci get system.@monitoring[0].url )/whitelist/"
		;;
		tarball)
			# http://intercity-vpn.de/networks/liszt28/tarball/testing/tarball.tgz
			echo -n "$( uci -q get system.@monitoring[0].url )/tarball/$UPDATEMODE/tarball.tgz?host=$HOSTNAME"
		;;
		tarball_hash)
			local i=0
			local CRC

			[ "$UPDATEMODE" = '0' ] && i=100

			while [ -z "$CRC" -a $i -lt 100 ]; do {
				# http://intercity-vpn.de/networks/liszt28/tarball/testing/info.txt
				url="$( uci -q get system.@monitoring[0].url )/tarball/$UPDATEMODE/info.txt"
				# CRC[md5]: 2c099506285a25ba5eb304a76ce2715d  SIZE[byte]:  250628  FILE: 'tarball.tgz'
				CRC="$( _wget do "$url" | fgrep "FILE: 'tarball.tgz'" | cut -d' ' -f2 )"
				sleep 5
				i=$(( i + 1 ))
			} done

			echo -n "${CRC:=0}"
		;;
		version_current*)
			local OUTPUT

			OUTPUT="$( _wget do "$BASE/$ARCHITECTURE/images/$UPDATEMODE/info.txt" | head -n1 )"
			[ -n "$OUTPUT" ] && {
				local GENERATED VERSION KERNEL MAINTAINER VERSION_MAIN
				eval $OUTPUT
			}

			if [ "$COMMAND" = "version_current_main" ]; then
				echo -n "${VERSION_MAIN:=1.6.37}"
			else
				echo -n "${VERSION:=000000}"
			fi
		;;
		version_installed)
			echo -n "${FFF_PLUS_VERSION:=000000}"
		;;
		*)
			local FILEWISH dir= usecase=

			if usecase="$( _firmware get_usecase 'hash' )"; then
				# e.g. http://intercity-vpn.de/firmware/ar71xx/images/testing/usecase/18c5d9ba35511b0b03491993b9507089/TP-LINK%20TL-WR1043ND.bin
				# see copy_firmware_files() in build.sh
				#
				# [symlink]
				# /var/www/firmware/ar71xx/images/testing/usecase/
				#	18c5d9ba35511b0b03491993b9507089/TP-LINK TL-WR1043ND.bin
				# [symlink]
				# /var/www/firmware/ar71xx/images/testing/usecase/
				#	Standard,VDS,kalua/TP-LINK TL-WR1043ND.bin
				# [realfile]
				# /var/www/firmware/ar71xx/images/testing/usecase/
				#	Standard,VDS,kalua/TP-LINK TL-WR1043ND.openwrt=r43102_kernel=_option=Standard,debug,VDS,kalua@3731799_rootfs=squash_image=sysupgrade.bin

				case "$CONFIG_PROFILE" in
					liszt28*)
						# https://$monitoringserver/networks/$NET/firmware/models/$HW/testing/$fullname.bin

						# http://intercity-vpn.de/networks/liszt28
						dir="$( uci get system.@monitoring[0].url )"
						# https://intercity-vpn.de/networks/liszt28/firmware/models/$HW/testing/$fullname.bin
						dir="$dir/firmware/models/$HARDWARE/$usecase/"

						FILEWISH="$HARDWARE.bin"
					;;
					*)
						dir="usecase/$usecase/"
						FILEWISH="$HARDWARE.bin"
					;;
				esac
			else
				FILEWISH="$HARDWARE.sysupgrade.bin"
			fi

			# very special: slashes are not allowed in filename,
			# e.g. 'Linksys WRT54G/GS/GL' -> 'Linksys WRT54G:GS:GL'
			FILEWISH="${FILEWISH////:}"

			case "$COMMAND" in
				crc)
					local i=0
					local GENERATED VERSION KERNEL MAINTAINER CRC url

					[ "$UPDATEMODE" = "0" ] && i=100

					case "$CONFIG_PROFILE" in
						liszt28*)
							# TODO: newstyle
							url="$BASE/$ARCHITECTURE/images/$UPDATEMODE/info.txt"
						;;
						*)
							url="$BASE/$ARCHITECTURE/images/$UPDATEMODE/info.txt"
						;;
					esac

# if pattern/filename matches, get 2nd word:
# NEW:
# CRC[md5]: 6128dc961fb0369df5ae79dc7a0654db  SIZE[byte]: 999999  BLOCKS[64k]: 49  FILE: 'La Fonera 2.0N.bin'  USECASE: b1cc2a438170a6fff4d08b08da4030af = Standard,LuCIfull,VDS,kalua  REV: r45678
# OLD:
# CRC[md5]: 6128dc961fb0369df5ae79dc7a0654db  SIZE[byte]: 999999  BLOCKS[64k]: 49  FILE: 'La Fonera 2.0N.bin'

					get_crc()
					{
						local url="$1"
						local usecase="$2"
						local pattern="'${FILEWISH}'${usecase:+  USECASE: }${usecase}${usecase:+ = }"
						local line

						_wget do "$url" |
						 while read line; do {
							case "$line" in
								*"$pattern"*)
									echo "$line" | cut -d' ' -f2
									return 111
								;;
								'# END')
									_log do $funcname daemon info "pattern for '$usecase' in $url not found: $pattern"
									echo '0'
									return 111
								;;
							esac
						} done

						test $? -eq 111
					}

					while [ $i -lt 100 ]; do {
						if get_crc "$url" "$usecase"; then
							break
						else
							_log sleep "firmware_getcrc_run_${i}_outof_100" 10 step 1
							i=$(( i + 1 ))
						fi
					} done
				;;
				*)
					echo -n "$BASE/$ARCHITECTURE/images/$UPDATEMODE/${dir}$( _sanitizer do "$FILEWISH" urlvalue )"
				;;
			esac
		;;
	esac
}

#!/bin/sh

_links_firmware_url_get()		# ARG1:	stable|beta|testing|empty
{					#	stable|beta|testing	<crc>			# .. (fetching crc)
					#	version_installed				# fixme! move to _firmware()
					#	version_current		<stable|beta|testing>	# ..
					#	version_current_main	<stable|beta|testing>	# ..
	local COMMAND="$1"		#	tarball|tarball_hash
	local KEYWORD="$2"		#	olsr_whitelist
	local funcname='links_firmware_url_get'

	[ -z "$KEYWORD" ] && {
		case "$COMMAND" in
			stable|beta|testing)
				KEYWORD="$COMMAND"	# workaround for bad API 8-)
			;;
		esac
	}

	local UPDATEMODE="$( _firmware updatemode "$KEYWORD" override )"
	local BASE="$( uci get system.@fwupdate[0].url )"	# http://intercity-vpn.de/firmware
	local ARCHITECTURE="$( _system architecture )"
	local url filewish dir usecase=
	BASE="${BASE:-http://intercity-vpn.de/firmware}"

	case "$COMMAND" in
		olsr_whitelist)
			printf '%s' "$( uci get system.@monitoring[0].url )/whitelist/"
		;;
		tarball)
			# http://intercity-vpn.de/networks/liszt28/tarball/testing/tarball.tgz
			printf '%s' "$( uci -q get system.@monitoring[0].url )/tarball/$UPDATEMODE/tarball.tgz?host=$HOSTNAME"
		;;
		tarball_hash)
			local i=0
			local CRC

			[ "$UPDATEMODE" = '0' ] && i=100

			while [ -z "$CRC" -a $i -lt 100 ]; do {
				# http://intercity-vpn.de/networks/liszt28/tarball/testing/info.txt
				url="$( uci -q get system.@monitoring[0].url )/tarball/$UPDATEMODE/info.txt"
				# CRC[md5]: 2c099506285a25ba5eb304a76ce2715d  SIZE[byte]:  250628  FILE: 'tarball.tgz'
				CRC="$( _curl it "$url" | grep -F "FILE: 'tarball.tgz'" | cut -d' ' -f2 )"
				sleep 5
				i=$(( i + 1 ))
			} done

			printf '%s' "${CRC:=0}"
		;;
		version_current*)
			local OUTPUT

			OUTPUT="$( _curl it "$BASE/$ARCHITECTURE/images/$UPDATEMODE/info.txt" | head -n1 )"
			[ -n "$OUTPUT" ] && {
#				local GENERATED KERNEL MAINTAINER
				local VERSION VERSION_MAIN
				eval $OUTPUT
			}

			if [ "$COMMAND" = "version_current_main" ]; then
				printf '%s' "${VERSION_MAIN:=1.6.37}"
			else
				printf '%s' "${VERSION:=000000}"
			fi
		;;
		version_installed)
			printf '%s' "${FFF_PLUS_VERSION:=000000}"
		;;
		*)
			# falling back to: Standard,kalua
			usecase="$( _firmware get_usecase 'hash' )" || usecase='49c4b5bf00fd398fba251a59f628de60'

			# see copy_firmware_files() in build.sh
			#
			# [symlink] -> Standard,VDS,kalua = 18c5d9ba35511b0b03491993b9507089 -> see: _firmware get_usecase hash
			# /var/www/networks/$NET/firmware/models/$HARDWARE/$UPDATEMODE/
			#	18c5d9ba35511b0b03491993b9507089/TP-LINK TL-WR1043ND.bin
			# [symlink]
			# /var/www/firmware/$NET/firmware/models/$HARDWARE/$UPDATEMODE/
			#	Standard,kalua/TP-LINK TL-WR1043ND.bin
			# [realfile]
			# /var/www/firmware/$NET/firmware/models/$HARDWARE/$UPDATEMODE/
			#	Standard,kalua/TP-LINK TL-WR1043ND.openwrt=r43102_kernel=_option=Standard,VDS,kalua@3731799_rootfs=squash_image=sysupgrade.bin

			dir="$( uci get system.@monitoring[0].url )"
			dir="$dir/firmware/models/$( _sanitizer run "$HARDWARE" urlvalue )/$UPDATEMODE/$usecase"
			filewish="$HARDWARE.bin"

			# very special: slashes are not allowed in filenames,
			# e.g. 'Linksys WRT54G/GS/GL' -> 'Linksys WRT54G:GS:GL'
			filewish="$( echo "$filewish" | tr '/' ':' )"

			case "$COMMAND" in
				crc)
					local i=0
					local url="$dir/info.txt"

					get_crc()
					{
						local url="$1"
						local line

						# checksum_md5='8e06d6efb3179eb1efd11ad2b2ad5648' file='TP-LINK....bin'
						line="$( _curl it "$url" | grep ^'checksum_md5=' | cut -d"'" -f2 )"
						test ${#line} -eq 32 && echo "$line"
					}

					while [ $i -lt 100 -a "$UPDATEMODE" != '0' ]; do {
						if get_crc "$url"; then
							break
						else
							_log sleep "$funcname()-$COMMAND-$i/100" 10 step 1
							i=$(( i + 1 ))
						fi
					} done
				;;
				*)
					printf '%s\n' "$dir/$( _sanitizer run "$filewish" urlvalue )"
				;;
			esac
		;;
	esac
}

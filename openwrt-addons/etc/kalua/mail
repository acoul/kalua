#!/bin/sh

# while read -r LINE; do explode $LINE; echo "_mail send 'newsletter XY' wlan-assistance@gmx.de '$3 $4' $( for M in $LINE; do :; done; echo $M | sed 's/[<>]//g' ) /tmp/newsletter.txt"; echo "sleep 60"; done </tmp/.muttrc_alias >/tmp/doit.sh

_mail_stash_for_later_resend()
{
	local funcname='mail_stash_for_later_resend'
	local file
	local storage_dir='/www/cgi-bin/mail'

	for file in "/tmp/outgoing_mail_"*; do {
		[ -e "$file" ] && {
			mkdir -p "$storage_dir"
			_log it $funcname daemon info "mail '$file' to '$storage_dir'"
			mv "$file" "$storage_dir"
		}
	} done
}

_mail_stash_resend()
{
	local funcname='mail_stash_resend'
	local file
	local storage_dir='/www/cgi-bin/mail'

	for file in "$storage_dir/outgoing_mail_"* ; do {
		[ -e "$file" ] && {
			_log it $funcname daemon info "[OK] move mail '$file' to '/tmp'"
			mv "$file" '/tmp'
			# if 'send_mailfile' fails, it will reschedule it automatically to 'storage_dir'
			_mail send_mailfile "/tmp/$( basename "$file" )"
		}
	} done
}

_mail_pop3_check_stats()
{
	local funcname="mail_pop3_check_stats"
	local option="$1"	# e.g. force

	local user="$(   uci get mail.@pop3[0].username )"
	local pass="$(   uci get mail.@pop3[0].password )"
	local server="$( uci get mail.@pop3[0].server	)"
	local port="$(   uci get mail.@pop3[0].port	)"
	local line rc_netcat
	local netcat_bin="nc"			# tested with busybox-netcat + gmx.net
	local answer answer_short

	local file="/tmp/$funcname"
	local uptime="$( _system uptime sec )"
	local uptime_lastcheck
	[ "$option" = "force" ] && rm "$file"
	[ -e "$file" ] && read -r uptime_lastcheck <"$file"

	[ $(( uptime - ${uptime_lastcheck:-0} )) -le 180 ] && {
		_log it $funcname daemon debug "no need to auth"
		return 0	# http://faq.gmx.de/messages/email/mailprogramme/smtp_sicherheit/3.html
	}

	_log it $funcname user info "contacting server '$server'"

	answer="$( echo -e "USER $user\nPASS $pass\nSTAT\nQUIT\n" | $netcat_bin $server $port )"
	rc_netcat=$?
	answer_short="$( echo "$answer" | cut -d' ' -f1 | while read -r line; do echo -n "$line"; done )"	# removes LF/CR

	case "$answer_short" in			# normal answer:
		"+OK+OK+OK+OK+OK"*)		# +OK POP server ready H migmx104
			echo "$uptime" >"$file"	# +OK password required for user "0123456789"
			return 0		# +OK mailbox "0123456789" has 0 messages (0 octets) H migmx104
		;;				# +OK 0 0
	esac					# +OK POP server signing off

	_log it $funcname user info "[ERR] returncode netcat: '$rc_netcat' - '$server'-serveranswer: '$answer_short'"
	echo "$answer" | _log it $funcname user info

	return 1
}

_mail_send_newsletter()
{
	local funcname='mail_send_newsletter'
	local file="$1"			# 'file' must look like:
	local sendername="$2"		# email1
	local senderemail="$3"		# email2
					#
					# subject
					# .
					# bodytext with X lines and keywords
					# $VAR1 and $VAR2 (which is firstname+lastname and firstname)
	local emailbody="/tmp/$funcname.$$"
	local line email firstname lastname subject

	while read -r line; do {
		case "$line" in
			*'@'*|'#'*)
				# list of emails or comments
			;;
			*)
				if [ -z "$subject" ]; then
					subject="$line"
					echo  >"$emailbody" "$subject"
				else
					echo >>"$emailbody" "$line"
				fi
			;;
		esac
	} done <"$file"

	while read -r line; do {
		case "$line" in
			*'@'*)
				explode $line	# e.g.: <email@domain.tld> Full Name
				email="$1"
				firstname="$2"
				shift 2
				lastname="$*"

				_mail send "$sendername" "$senderemail" \
					   "$firstname $lastname" "$email" \
					   "$emailbody" \
					   "$firstname $lastname" "$firstname"
			;;
			'')
				rm "$emailbody"
				break
			;;
		esac
	} done <"$file"
}

_mail_send()		# todo: we need a simple addressbook for phone,email,shortname,name...
{
	local           FUNC="mail_send"
	local      FROM_REAL="$1"	# ARG1, string (name,  format: title, surname name  )
	local      FROM_MAIL="$2"	# ARG2, string (email, format: recipient@domain.foo )
	local RECIPIENT_REAL="$3"	# ARG3, string (name)
	local RECIPIENT_MAIL="$4"	# ARG4, string (email)
	local       MAILFILE="$5"	# ARG5, string (name of file with body-text and variables)
	local           VAR1="$6"	# ARG6, string (user-defineable, for using in mail.txt)
	local           VAR2="$7"	# ARG7, string
	local           VAR3="$8"	# ARG8, string
	local      LIST_FILE="$9"
	local FILE
	local NETCAT_BIN="nc"

	[ -e "$MAILFILE" ] || {
		_log it $FUNC user crit "can't read '$MAILFILE' - aborting (usage: _$FUNC myname me@world.org yourname you@world.org mailfile"
		return
	}

	local SUBJECT="$( head -n1 $MAILFILE | sed "s#\$VAR1#$VAR1#g" )"
	local FQDN="$( uci get system.@system[0].hostname ).local"		# fixme! we should handshake the HELO with the servers name, not ours
	local ADMIN_REAL="$( uci get system.@admin[0].name )"
	local ADMIN_MAIL="$( uci get system.@admin[0].mail )"
	local MAIL="/tmp/outgoing_mail_$CONFIG_PROFILE.$NODENUMBER.$( _system date humanreadable ).$( _system date unixtime )"
	local BOUNDARY="dc+cDN39EJAMEtIO"					# maybe random?
	local tar_archiv

	_log it $FUNC daemon debug "[BEGIN]"

	_do ()
	{
		case "$1" in
			'raw_smtp')
				# copy key manually:
				# scp .ssh/dropbear_dss_host_key.pub -P 222 bastian@bwireless.mooo.com:.ssh/authorized_keys.$CONFIG_PROFILE.$HOSTNAME
				# on server:
				# cat ~/.ssh/authorized_keys.* >~/.ssh/authorized_keys
				case "$( uci get mail.@smtp[0].auth )" in
					*'smtp'*)
						shift
					;;
					*)
						# ignore in 'scp'-mode
						return 0
					;;
				esac
			;;
		esac

		local text="$1"

		_log it $FUNC daemon debug "do() '$text'"

		case "$text" in
			init)
				[ -e "$MAIL" ] && rm "$MAIL"
			;;
			linefeed)
				printf >>$MAIL '\\n'
			;;
			*'&acute;'*)
				# FIXME! it must decode to 'A-dach' = accent aigu
				printf >>$MAIL '%s' "$( echo "$text" | sed 's/&acute;//g' )\\r\\n"
			;;
			*)
				printf >>$MAIL '%s' "${text}\\r\\n"
			;;
		esac
	}

	netcat_version_information ()
	{
		$NETCAT_BIN --help 2>&1 | fgrep "BusyBox v"	&& return
		$NETCAT_BIN --help 2>&1 | fgrep "GNU netcat"	&& return
		$NETCAT_BIN -h     2>&1 | fgrep "netcat"	&& return
		$NETCAT_BIN -h     2>&1 | fgrep "[v"		&& return
	}

	wellform_mailaddress_and_realname()
	{
		local mailaddress="$1"
		local realname="$2"

		if [ -n "$realname" ]; then
			echo "\"$realname\" <$mailaddress>"
		else
			echo "<$mailaddress>"		# some Micro$oft Exchange Servers deny realnames which are not on a whitelist, so simply let it empty
		fi
	}

	_do init	

	_do raw_smtp "HELO ${FQDN}"
#	_do raw_smtp "MAIL FROM: $( wellform_mailaddress_and_realname "$FROM_MAIL" "$FROM_REAL"		 )"
	_do raw_smtp "MAIL FROM: $FROM_MAIL"
#	_do raw_smtp "RCPT TO: $(   wellform_mailaddress_and_realname "$RECIPIENT_MAIL" "$RECIPIENT_REAL" )"
	_do raw_smtp "RCPT TO: $RECIPIENT_MAIL"
	_do raw_smtp "DATA"

	_do "From: $( wellform_mailaddress_and_realname "$FROM_MAIL" "$FROM_REAL"		)"
	_do "To: $(   wellform_mailaddress_and_realname "$RECIPIENT_MAIL" "$RECIPIENT_REAL"	)"	# can be multiple RCPT's:
#	_do "Cc: $(   wellform_mailaddress_and_realname "$ADMIN_MAIL" "$ADMIN_REAL"		)"

	_do "Date: $( _system date mail )"
	_do "Message-ID: <$( date +%s%d%b%y-%H_%M )@${FQDN}>"		# 121016909907May08-16_04@buffalo422.local

	_do "MIME-Version: 1.0"
	_do "Content-Type: multipart/mixed; boundary=\"${BOUNDARY}\""
	_do "Content-Disposition: inline"
	_do "Content-Transfer-Encoding: 8bit"

	_do "Organization: ${ADMIN_REAL}"
	_do "Reply-To: $( wellform_mailaddress_and_realname "$ADMIN_MAIL" "$ADMIN_REAL" )"
	_do "X-Mailer: netcat is $( netcat_version_information )"
	_do "X-Operating-System: $( cat /proc/version )"
	_do "X-Firmware: $FFF_PLUS_VERSION / r$OPENWRT_REV"
	_do "Subject: ${SUBJECT}\r\n"
	_do linefeed

	_do "--${BOUNDARY}"
	_do "Content-Type: text/plain; charset=iso-8859-1"
	_do "Content-Disposition: inline"
	_do "Content-Transfer-Encoding: 8bit"
	_do ""

	local oldifs="$IFS"
	IFS="
"
						# 1st/2nd line subject/empty
	sed '3,999!d' $MAILFILE |
	 sed	-e "s#\$VAR1#$VAR1#g" \
		-e "s#\$VAR2#$VAR2#g" \
	 	-e "s#\$VAR3#$VAR3#g" |
	  while read -r LINE; do {
	  	_do "$LINE"
	  } done

	IFS="$oldifs"

	_do ""

	case "$CONFIG_PROFILE" in
		liszt28*|adagio*|lisztwe*)
			tar_archiv="/tmp/archiv.tar"
			tar cf "$tar_archiv" $LIST_FILE && {
				echo "all_files_together" >"$tar_archiv.desc"
				LIST_FILE="$LIST_FILE $tar_archiv"
			}
		;;
	esac

	for FILE in $LIST_FILE; do {
		_do "--${BOUNDARY}"
		_do "Content-Type: $( _filetype detect_mimetype "$FILE" )"

		[ -e "$FILE.desc" ] && {
			_do "Content-Description: $( cat "$FILE.desc" )"
		}

		_do "Content-Disposition: attachment; filename=\"$( basename "$FILE" )\""
		_do "Content-Transfer-Encoding: quoted-printable"
		_do ""

		_mail encode_quoted_printable "$FILE" >>$MAIL
		_do ""
	} done

	[ -n "$FILE" ] && {
		_do "--${BOUNDARY}--"
	}

	_do raw_smtp "."
	_do raw_smtp "QUIT"

	_log it $FUNC daemon info "sending mail to '${RECIPIENT_MAIL}'"
	if _mail send_mailfile "$MAIL" ; then
		_log it $FUNC user notice "[OK] sent mail to '$RECIPIENT_MAIL' went fine"
	else
		_log it $FUNC user notice "[ERR] sending mail to '$RECIPIENT_MAIL' failed, but is re-scheduled"
		return 1
	fi
}

_mail_send_mailfile()
{
	local MAILFILE="$1"			# must be ready formatted
						# important: 'file' will be removed after good sending from this function
	[ -e "$MAILFILE" ] || return 1

	local FUNC="mail_send_mailfile"
	local LINE OUT RC ERROR unixtime
	local NETCAT_BIN="nc"
	local SERVER="$( uci get mail.@smtp[0].server )"
	local PORT="$(   uci get mail.@smtp[0].port   )"
	local ERRORFILE="/tmp/$FUNC.error.$$"
	local auth="$( uci get mail.@smtp[0].auth )"		# e.g. '-P 222 user@server:dir'
	local auth_port=

	case "$auth" in
		*'smtp'*)
			_mail pop3_check_stats || {			# pop before smtp must be configured on mailserver
				_mail stash_for_later_resend "$MAILFILE"
				return 0
			}
		;;
		'-P '*)
			# separate port and destination
			auth_port="-P $( echo "$auth" | cut -d' ' -f2 )"
			auth="$(         echo "$auth" | cut -d' ' -f3 )"
		;;
	esac

	# normal netcat output:
	# 220 mail.gmx.net GMX Mailservices ESMTP {mp017}
	# 250 mail.gmx.net GMX Mailservices {mp017}
	# 250 2.1.0 ok {mp017}
	# 250 2.1.5 ok {mp017}					// means "RCPT OK"
	# 354 mail.gmx.net Go ahead {mp017}
	# 250 2.6.0 Message accepted {mp017}
	# 221 2.0.0 GMX Mailservices {mp017}

	# error output:
	# 220 *******************************************
	# 250 mail.gmx.net GMX Mailservices {mp027}
	# 250 2.1.0 ok {mp027}
	# 250 2.1.5 ok {mp027}
	# 354 mail.gmx.net Go ahead {mp027}			// attachement?
	# 451 4.3.0 Temporary problem {mp027}

	cleanup()
	{
		local option="$1"

		[ "$option" = 'error' ] && _log it $FUNC daemon info 'function_cancelled'

		[ -e "$MAILFILE"  ] && rm "$MAILFILE"
		[ -e "$ERRORFILE" ] && rm "$ERRORFILE"

		trap - HUP INT QUIT TERM
	}

	trap 'cleanup error' HUP INT QUIT TERM

	sanitize_server_answer ()		# add '+' and remove LF/CR
	{
		echo "$1" |
		 while read -r LINE; do {
		 	_log it $FUNC daemon info "SERVER: $LINE"
		 } done

		echo "$1" |
		 cut -d' ' -f1 |
		  while read -r LINE; do {
		  	[ -n "$LINE" ] && {
		  		echo -n "+$LINE"
		  	}
		  } done
	}

	case "$auth" in
		*'smtp'*)
			OUT="$( echo -e "$( cat "$MAILFILE" )" | $NETCAT_BIN $SERVER $PORT 2>"$ERRORFILE" )"; RC=$?
			OUT="$( sanitize_server_answer "$OUT" )"
		;;
		*)
			# we use a unixtimestamp, otherwise the next file overwrites the old file on server
			unixtime=$( _system date unixtime )

			_log it $FUNC daemon info "scp $auth_port '$MAILFILE.$unixtime.readable' $auth"
			echo -e "$( cat "$MAILFILE" )" >"$MAILFILE.$unixtime.readable"

			if   pidof scp >/dev/null; then
				_log it $FUNC daemon info "scp already running"
				echo "scp-already active" >"$ERRORFILE"
			elif scp -i '/etc/dropbear/dropbear_dss_host_key' $auth_port "$MAILFILE.$unixtime.readable" $auth ; then
				OUT='+220+250+250+250+354+250+221'
			else
				RC=$?
				_log it $FUNC daemon info "scp '$MAILFILE.$unixtime.readable' $auth - failed: rc: $RC"
				echo "scp-error" >"$ERRORFILE"
			fi

			rm "$MAILFILE.$unixtime.readable"
		;;
	esac

	case "$OUT" in
		"+220+250+530"*)
			# 530 = Authentication required
			_mail pop3_check_stats force

			cleanup ok
			return 1
		;;
		"+220")
			# 220 only = hanging connection with buggy telnet/nc client: e.g. busybox 1.19.4 = b0rken to mail.gmx.net, 1.21.1 = OK
			# maybe also, when password is invalid temporarily
			_log it $FUNC user alert "[ERR] returncode: '$RC' - '$SERVER'-answer: '$OUT' message: '$ERROR' - mail stashed"
			_mail stash_for_later_resend

			cleanup ok
			return 0
		;;
		"+220+250+501"*|"+220+250+250+250+354+501"*)
			# 501 = Syntax error in parameters or arguments
			# 220 only = hanging connection with buggy telnet/nc client: e.g. busybox 1.19.4 = b0rken to mail.gmx.net, 1.21.1 = OK
			_log it $FUNC user alert "[ERR] returncode: '$RC' - '$SERVER'-answer: '$OUT' message: '$ERROR' - mailfile deleted"

			cleanup ok
			return 0
		;;
		"+220+250+250+250+354+250+221"*)	# fixme! maybe too strict...
			case "$OUT" in			# fixme! for each RCPT we must add an additional "250 2.1.5"
				*"+354+250+221")
					cleanup ok
					return 0
				;;
			esac
		;;
		*)
			read -r ERROR <"$ERRORFILE"
			rm "$ERRORFILE"

			_log it $FUNC user info "[ERR] returncode: '$RC' - '$SERVER'-answer: '$OUT' message: '$ERROR' - debug file '$MAILFILE'"

			case "$ERROR" in
				*'scp-error'*)
					_mail stash_for_later_resend
					return 0
				;;
				*"No route to host"*)
					_log it $FUNC user alert "[ERR] during smtp to $SERVER $PORT, message: $ERROR, file: $MAILFILE, port blocked? try 587"
					_mail stash_for_later_resend
					return 0
				;;
				*)
					echo >>$SCHEDULER "_mail send_mailfile '$MAILFILE'"
				;;
			esac

			return 1
		;;
	esac
}

_mail_encode_quoted_printable()		# http://en.wikipedia.org/wiki/Quoted-printable#Example | http://tools.ietf.org/html/rfc2045
{					# http://rand-mh.sourceforge.net/book/overall/mulmes.html	// debug: apt-get install qprint
	local funcname="mail_encode_quoted_printable"

	local FILE="$1"			# fixme! there is no check for special chars, done already:
	local WRAP=71			# - tab/space at the end of a line to '=09' / '=20'
	local BUFFER="$WRAP"		# - newlines to '=0A'
	local WINDOWSTART=1		# - linewrap at 75 column + a softbreak '='
	local LINE OUTPUT		# - encoded special chars must not be line-wrapped

	_stopwatch start "$funcname"

	local oldifs="$IFS"
	IFS="
"
#	sed -e 's/	$/=09/' -e 's/ $/=20/' -e 's/$/=0A/' "$FILE" | while read -r LINE; do {
	sed -e 's/=/=3D/g' -e 's/$/=00/' "$FILE" | while read -r LINE; do {
		while true; do {
			case "$LINE" in
				"."*) LINE="=2E$( echo "$LINE" | cut -b 2- )"
			esac

			if   [ ${#LINE} -lt $BUFFER ]; then
				LINE="$( echo "$LINE" | sed 's/=00$//' )"
				echo -en "$LINE\r\n"
				break
			elif [ ${#LINE} -eq $BUFFER ]; then
				echo "${LINE}="
				BUFFER=$WRAP
				break		# fetch next LINE
			else
				# means: ${#LINE} -gt $BUFFER
				OUTPUT="$( echo "$LINE" | cut -b $WINDOWSTART-$BUFFER )"	# fixme! newer busybox can 'echo ${A:5:7}'

				case "$OUTPUT" in
					*=|*" ")				# =A0 at the end (encoded) must not be wrapped
						BUFFER=$(( BUFFER - 1 ))
						OUTPUT="$( echo "$OUTPUT" | cut -b $WINDOWSTART-$BUFFER )"
					;;
					*=?|*" 0")				# means: '=' and <anychar> at the end
						BUFFER=$(( BUFFER - 2 ))
						OUTPUT="$( echo "$OUTPUT" | cut -b $WINDOWSTART-$BUFFER )"
					;;
					*=??)
						BUFFER=$(( BUFFER - 3 ))
						OUTPUT="$( echo "$OUTPUT" | cut -b $WINDOWSTART-$BUFFER )"
					;;
				esac

				echo -en "${OUTPUT}=\r\n"
				LINE="$( echo "$LINE" | cut -b $(( BUFFER + 1 ))- )"	# idea: simply raise startcounter
				BUFFER=$WRAP
			fi
		} done
	} done

	IFS="$oldifs"

	_stopwatch stop "$funcname" quiet
}

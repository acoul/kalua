#!/bin/sh

_monitoring_url()		# TODO: unused
{
	local mac="$1"
	local hostname="$2"
	local channel="$3"
	local hardware="$4"
	local version="$5"
	local uptime="$6"
	local load="$7"
	local ssid="$8"
	local mypubip="$9"
	local uname="${10}"
	local switch="${11}"
	local ram="${12}"
	local myip="${13}"
	local mygw="${14}"

	local url date network

	# http://intercity-vpn.de/networks/liszt28
	url="$( uci get system.@monitoring[0].url )"
	network="$( basename "$url" )"
	url="$url/meshrdf"
	date="$( date +%Y%b%d_%Huhr%M )"

	url="$url/?local=${date}&node=0&city=168&mac=${mac}&latlon=&hostname=${hostname}&update=0&wifidrv=&olsrver=&olsrrestartcount=0&olsrrestarttime=&portfw=&optimizenlq=&optimizeneigh=off&txpwr=0&wifimode=ap&channel=${channel}&mrate=auto&hw=${hardware}&frag=&rts=&pfilter=&gmodeprot=0&gmode=11ng&profile=${network}_ap&noise=-1&rssi=&distance=&version=${version}&reboot=1&up=${uptime}&load=${load}&forwarded=0&essid=${ssid}&bssid=&gw=1&gwnode=1&etx2gw=1&hop2gw=0&neigh=&users=&pubip=${mypubip}&sens=&wifiscan=&v1=${uname}&v2=&s1=${switch}&h1=${ram}&h2=&h4=2&h5=33&h6=4096&h7=337&d0=&d1=&n0=&i0=static&i1=wan&i2=${myip}%2f29&i3=0&i4=0&i5=${mygw}&r0=&w0=wlan0&w1=0"
}

_monitoring_screenshot()
{
	local file="$TMPDIR/screenshot.jpg"
	local hash_old hash_new mac key dest

	command -v 'scrot' >/dev/null && {
		hash_old="$( _file hash "$file" )"

		# this only works as user (not root)
		export DISPLAY=:0
	        scrot --quality 10 "$file"

		hash_new="$( _file hash "$file" )"
		[ "$hash_old" = "$hash_new" ] || {
			read -r mac <'/www/monitoring.wifimac' && {
				# root@intercity-vpn.de:/var/www/networks/liszt28/vds/
				dest="$( uci get system.@vds[0].server )../settings/$mac.screenshot.jpg"
				key="$( _ssh key_public_fingerprint_get keyfilename )"
				scp -i "$key" "$file" "$dest"
			}
		}
	}
}

_monitoring_webcamshot()
{
	local file="$TMPDIR/monitoring_webcamshot.jpg"
	local hash_old hash_new
	local width=640
	local height=480

	[ -e '/dev/video0' ] || return 0

	command -v 'fswebcam' >/dev/null && {
		hash_old="$( _file hash "$file" )"
		fswebcam -d /dev/video0 --quiet --no-banner --no-timestamp --fps 1 -r ${width}x${height} "$file"
		hash_new="$( _file hash "$file" )"

		# TODO: upload
		test "$hash_old" = "$hash_new"
	}
}

_monitoring_heartbeat_minimal_send()
{
	local funcname='monitoring_heartbeat_minimal_send'
	local up="$1"		# hours
	local load="$2"		# 15mins

	local file_url="$TMPDIR/MONITORING_HEARTBEAT_URL"
	local file_archiv="$TMPDIR/ARCHIV_MONITORING.recent"
	local mac url up free load lan_clients wifi_clients answer neigh_now neigh_old

	if [ -e "$file_url" ]; then
		read -r url <"$file_url"
	else
		# at least 1 normal sending/monitoring-run is needed
		[ -e "$file_archiv" ] || return 1

		read -r mac <"$WWWDIR/monitoring.wifimac"
		url="$( uci get system.@monitoring[0].url )/meshrdf/?refresh=true&mac=$mac"
		echo "$url" >"$file_url"
	fi

	up="$( _system uptime hours )"
	free="$( _system ram_free )"
	load="$( _system load 1min )"
	wifi_clients="$( _net count_wireless )"
	lan_clients="$( _net count_wired )"

	read -r neigh_now 2>/dev/null <'/tmp/OLSR/meshrdf_neighs.urlsafe'	# see olsr_build_tables()
	read -r neigh_old 2>/dev/null <'/tmp/OLSR/meshrdf_neighs.urlsafe.old'	# only send changed values
	neigh_old='foo'		# FIXME! keep latest value on server

	if [ "$neigh_now" = "$neigh_old" ]; then
		url="$url&up=$up&h2=$free&load=$load&version=$FFF_PLUS_VERSION&r4=$wifi_clients&r5=$lan_clients"
	else
		url="$url&up=$up&h2=$free&load=$load&version=$FFF_PLUS_VERSION&r4=$wifi_clients&r5=$lan_clients&neigh=$neigh_now"

		# remember last value:
		echo "$neigh_now" >'/tmp/OLSR/meshrdf_neighs.urlsafe.old'
	fi

	answer="$( _curl it "$url" 30 )"
	case "$answer" in
		'REFRESHED')
			touch "$file_archiv"
		;;
		'REFRESHED:PMU')
			touch "$file_archiv"
			_firmware update_pmu
		;;
		*)
			_log it $funcname daemon info "answer: '$answer'"
		;;
	esac
}

_monitoring_heartbeat_mapapi_http_put()
{
	local file="$1"
	local server="$2"
	local url="$3"

	printf '%s\r\n' "PUT /$url HTTP/1.1"
	printf '%s\r\n' 'User-Agent: netcat'
	printf '%s\r\n' "Host: $server"
	printf '%s\r\n' 'Accept: */*'
	printf '%s\r\n' "Content-Length: $( _file size "$file" )"
	printf '%s\r\n' 'Content-Type: application/x-www-form-urlencoded'
	printf '\r\n'

	cat "$file"
}

_monitoring_heartbeat_mapapi()	# curl "http://mapapi.weimarnetz.de/db/_all_docs?include_docs=true" | jq '.' > data.json
{				# curl "http://mapapi.weimarnetz.de/db/$HOSTNAME.olsr"
				# http://map.weimarnetz.de/#detail?node=$HOSTNAME.olsr
	local funcname='monitoring_heartbeat_mapapi'
	local server='mapapi.weimarnetz.de'	# owm: https://github.com/freifunk/openwifimap-api/blob/master/API.md
	local url="update_node/$HOSTNAME.olsr"
	local file="$TMPDIR/mapapi.cache"
	local meshrdf='/tmp/OLSR/meshrdf_neighs'
	local json="$TMPDIR/links.json"
	local nexthop gateway system_type latlon lat lon
	local version_string="$( _system version_string )"

	# refresh when >1h
	_file age "$json" -gt 3600 && _olsr neighs_meshrdf_evalable >"$meshrdf"		# will also build '$json'
	[ -e "$json" ] || return 1

	latlon="$( uci -q get system.@admin[0].latlon )"	# 50,97389;11,31875
	latlon="$( echo "$latlon" | tr ',' '.' )"
	lat="${latlon%;*}"					# 50.97389
	lon="${latlon#*;}"					# 11.31875

	read -r gateway <'/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY'
	read -r nexthop <'/tmp/GATEWAY_CHECK_RECENT_NEXTHOP_IP_ONLY'

	# system type : ... and/or platform : ...
	explode $( grep ^'system type' '/proc/cpuinfo' || grep ^'platform' '/proc/cpuinfo' )
	shift 2; case "$*" in ':'*) shift ;; esac
	system_type="$*"	# e.g. 'Atheros AR9132 rev 2' or 'Freescale P1014'
	system_type="${system_type:-unknown_SoC}"

	cat >"$file" <<EOF
 {
"api_rev": "1.0",
"hostname": "$HOSTNAME",
"hardware": "$system_type",
"latitude": ${lat:-50.97},
"longitude": ${lon:-11.31},
"type": "node",
"updateInterval": 3600,
"location": "$HOSTNAME",
"system": {
	"sysinfo": [
		"$system_type",
		"$HARDWARE"
	],
	"uptime": [
		$( _system uptime sec )
	]
	},
"weimarnetz": {
	"gateway": "$gateway",
	"nodenumber": $NODENUMBER,
	"nexthop": "$nexthop",
	"gatewaycost": 1
	},
$( cat "$TMPDIR/links.json" 2>/dev/null && printf ',' )
"firmware": {
	"distname": "",
	"luciname": "no LuCI",
	"fffversion": "$FFF_PLUS_VERSION",
	"luciversion": "0",
	"revision": "$version_string",
	"distversion": "$version_string",
	"name": ""
	}
 }
EOF

	# FIXME! suppress server-answer?
	_log it $funcname daemon info "netcat'ing file '$file' to '$server' port 80 / $url"
	_monitoring heartbeat_mapapi_http_put "$file" "$server" "$url" | nc "$server" 80
}

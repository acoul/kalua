#!/bin/sh

_net_roaming_eventlistener()
{
	local funcname='net_roaming_eventlistener'
	local option="$1"
	local dev='br-mastergate'
	local pids1 pids2
	local i=15

	case "$option" in
		'start')
			grep -q ^"$dev:" '/proc/net/dev' || {
				_log do $funcname daemon debug "refusing to start, missing dev $dev"
				return 1
			}

			case "$( pidof iw )" in
				*' '*)
					_log do $funcname daemon info "[ERR] too much 'iw' instances, will not start"
					return 1
				;;
				*)
					/usr/sbin/cron.wireless_events &
				;;
			esac
		;;
		'stop')
			pids1="$( pidof iw )" && {
				while pids2="$( pidof iw )"; do {
					# FIXME! special 'command' for listener
					# FIXME! (really 2 calls needed...)
					iw reg set 00
					iw reg set US
					let i-=1 || break

					_log do $funcname daemon info "still running 'iw' (pid: $pids2)"
					sleep 1
				} done

				if   [ $i -eq 0 -a "$pids1" = "$pids2" ]; then
					_watch hanging_command iw
					_watch hanging_command iw
				elif [ -n "$pids2" ]; then
					_log do $funcname daemon alert "still running 'iw'-instance $pids2"
				fi
			}
		;;
		'restart')
			_$funcname stop
			_$funcname start
		;;
	esac
}

_net_roaming_cleanup_cache()
{
	local file='/tmp/roaming'
	local unixtime="$( _system date unixtime )"
	local line

	[ -e "$file" ] || return 0

	# TODO: keep newest entry of same mac
	# 00:21:00:ce:c5:8f 192.168.2.3 1433623803
	# 00:21:00:ce:c5:8f 192.168.2.4 1433623818
	# 00:21:6a:32:7c:1c 192.168.2.61 1433621675
	# 00:21:6a:32:7c:1c 192.168.23.61 1433616647

	# format: mac ip expires
	while read line; do {
		set -- $line
		test $3 -gt $unixtime && echo "$line"
	} done <"$file" >"$file.tmp"

	# FIXME! double write access, e.g. from collect.sh?
	mv "$file.tmp" "$file"
}

_net_roaming_fetch_cache()
{
	local file='/tmp/roaming'
	local url authserver query ip

	# only if roaming enabled
	grep -q 'br-mastergate:' '/proc/net/dev' || return 0

	if _weblogin authserver is_myself; then
		[ -e "$file" ] || {
			ip="$( _olsr neigh_random_get )" && {
				query='action=roaming_getlist'
				url="http://$ip/cgi-bin-collect.sh?$query"
				_wget do "$url" >"$file.tmp"

				grep -n '' "$file.tmp" | sort -rn | cut -d: -f2- >"$file"
				rm "$file.tmp"
			}
		}
	else
		authserver="$( _weblogin authserver )"
		query='action=roaming_getlist'
		url="http://$authserver/cgi-bin-collect.sh?$query"
		_wget do "$url" >"$file"
	fi
}

_net_roaming_mac2ip()
{
	local mac="${1:-no_mac_given}"
	local file='/tmp/roaming'
	local file_dhcp='/tmp/roaming_dhcp'
	local line url authserver ip query

	[ -e "$file" ] || _net roaming_fetch_cache

	get_local()
	{
		if line="$( grep -s ^"$mac" "$file_dhcp" )"; then
			:
		elif _weblogin authserver is_myself; then
			# use 'tac'
			line="$( grep -sn '' '/tmp/roaming' | sort -rn | cut -d: -f2- | grep ^"$mac" )"
		else
			line="$( grep -s ^"$mac" "$file" )"
		fi
	}

	# format: mac ip expires
	if get_local; then
		set -- $line
		echo $2
	else
		_weblogin authserver is_myself || {
			authserver="$( _weblogin authserver )"
			query="action=roaming_querymac&mac=$mac"
			url="http://$authserver/cgi-bin-collect.sh?$query"

			ip="$( _wget do "$url" )"
			test -n "$ip" && {
				echo "$ip"
			}
		}

		# TODO: normal waiting for ARP
	fi
}

_net_roaming_report_new()
{
	local mac="$1"
	local ip="$2"
	local expires="$3"		# e.g. DNSMASQ_LEASE_EXPIRES (unixtime)
	# TODO: signal? channel?
	local file='/tmp/roaming'
	local authserver url query answer

	if _weblogin authserver is_myself; then
		echo "$mac $ip $expires" >>"$file"
	else
		authserver="$( _weblogin authserver )"
		query="action=roaming_add&mac=${mac//:/%3a}&ip=$ip&expires=$expires"
		url="http://$authserver/cgi-bin-collect.sh?$query"
		answer="$( _wget do "$url?$query" )"

		case "$answer" in
			'OK'*)
				# TODO: fetch recent list
			;;
			*)
				echo >>$SCHEDULER "_net roaming_report_new $mac $ip $expires"
			;;
		esac
	fi
}

_net_track_ap()		# helper/debug for a roaming laptop -> move to _wifi()?
{
	local wifidev="${1:-wlan0}"
	local gateway_ip url apmac last unixtime_connstart elapsed diff
	rm /tmp/MAC_* 2>/dev/null

	get_gateway_ip()
	{
		ip route list exact '0.0.0.0/0' | cut -d' ' -f3
	}

	get_apmac()
	{
		set -- $( iw dev "$wifidev" station dump | grep ^'Station' )
		echo "${2:-unconnected}"
	}

	get_signal()
	{
		set -- $( iw dev "$wifidev" station dump | grep 'signal:' )
		echo "${2:-0}"
	}

	get_hostname()
	{
		local mac="$1"
		local url="$2"
		local i=10
		local hostname

		[ -z "$mac" ] && return 1
		read hostname 2>/dev/null <"/tmp/MAC_$mac"

		while [ -z "$hostname" ]; do {
			hostname="$( wget -qO - "$url" || sleep 3 )"
			let i-=1 || {
				echo 'unknown_hostname'
				return 1
			}
		} done

		hostname="$( _sanitizer do "$hostname" firstline hostname )"

		# FIXME! make sure we have not change the ap
		echo "$hostname" >"/tmp/MAC_${mac}"
		echo "$hostname"
	}

	# show ping loss?
	while true; do {
		gateway_ip="$( get_gateway_ip )"
		url="http://$gateway_ip/cgi-bin-tool.sh?OPT=hostname"
		apmac="$( get_apmac )"

		test "$apmac" = "$last" || {
			unixtime_connstart="$( _system date unixtime )"
			echo
			echo "$( date ) new: $apmac"
		}
		last="$apmac"

		hostname='???'
		[ -n "$gateway_ip" -a -n "$apmac" ] && hostname="$( get_hostname "$apmac" "$url" )"
		diff=$(( $( _system date unixtime ) - unixtime_connstart ))
		elapsed="$( _stopwatch seconds2humanreadable "$diff" pedantic )"
		echo -en "$( date )      $apmac $( get_signal ) : $hostname ($elapsed)        \r"
		sleep 1
	} done
}

_net_count_wireless()
{
	local wifi_clients_sum=0
	local file clients

	# build during watch_wifistuff()
	for file in /tmp/wifi_hasclients_*; do {
		case "$file" in
			*'_max'|*'_*')
			;;
			*)
				read clients <"$file"
				wifi_clients_sum=$(( clients_sum + clients ))
			;;
		esac
	} done

	echo "$wifi_clients_sum"
}

_net_count_wired()
{
	local funcname='net_count_wired'
	local list_noclients line dev ip mac
	local i=0

	# see cisco_collect() IMPROVE!
	list_noclients="$( grep -s ' MAC ' /tmp/cisco-AP* | cut -d' ' -f5 | tr '[A-Z]' '[a-z]' | while read line; do echo -n " $line"; done )"

	# /proc/net/arp is not always correct
	ip neigh show >"/tmp/$funcname"

	while read line; do {
		set -- $line
		ip="$1"
		dev="$3"
		mac="$5"

		case "$mac" in
			*':'*)
				_list contains_element "$list_noclients" "$mac" && continue
			;;
			*)
				# no valid arp
				continue
			;;
		esac

		case "$ip" in
			*'::'*)
				# dont count IPv6 - maybe unneeded (because no IPv6 in /proc/net/arp?)
				continue
			;;
		esac

		case "$dev" in
			$LANDEV|$WANDEV)
				# list all wired, which are not OLSR, see olsr_build_tables()
				fgrep -q "REMOTE=$ip;" '/tmp/OLSR/LINKS.sh' || i=$(( i + 1 ))
			;;
		esac
	} done <"/tmp/$funcname" && rm "/tmp/$funcname"

	echo "$i"
}

_net_my_isp()
{
	local option="$1"
	local cachefile='/tmp/myisp'
	local isp fresh

	[ "$option" = 'cached' ] || fresh='true'
	[ -e "$cachefile" ] || fresh='true'

	[ "$fresh" = 'true' ] && {
		_wget do 'http://www.whoismyisp.org/' | sed -n "/ (ISP) is /s/^.*'\(.*\)'.*/\1/p" >"$cachefile"
	}

	read isp <"$cachefile"
	[ -z "$isp" ] && rm "$cachefile"

	echo "$isp"
}

_net_fulltrace()
{
	local ip interface speed output mbit nexthop
	local ip_list=

	# '?' or '10.63.160.161 LAN 4369'
	set -- $( _wifi speed cached verbose )
	nexthop="$1"
	interface="$2"
	speed="${3:-0}"
	[ "$nexthop" = '?' ] && read nexthop <'/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY'

	case "$interface" in
		WAN|LAN)
			speed=12500	# 100 mbit FIXME! - not true with a transparent wifi bridge
			ip="$LANADR"
		;;
		*)
			ip="$WIFIADR"
		;;
	esac

	mbit=$(( speed * 8 / 1000 ))
	ip_list="$ip_list $nexthop "
	echo "ip: $ip nexthop: $nexthop interface: $interface speed: $speed kilobyte/s = $mbit megabit/s"

	while true; do {
		if [ "$1" = '?' ]; then
			output='?'
		else
			output="$( _tool remote "$1" speed_nexthop )"
			ip="$1"
		fi

		case "$output" in
			'?'|'')
				echo "ready: '$output' (stop at $ip)"
				return 0
			;;
			*)
				case " $ip_list " in
					" $ip ")
						# avoid loop: maintain list of already asked nodes
						# and abort if the same comes again
						echo "loop/abort: $ip"
						return 1
					;;
				esac

				# 10.63.160.161 LAN 4369
				set -- $output
				nexthop="$1"
				interface="$2"
				speed="$3"

				case "$interface" in
					WAN|LAN)
						speed=12500	# 100 mbit FIXME! - not true with a transparent wifi bridge
					;;
				esac

				mbit=$(( speed * 8 / 1000 ))
				ip_list="$ip_list $nexthop "
				echo "ip: $ip nexthop: $nexthop interface: $interface speed: $speed kilobyte/s = $mbit megabit/s"
			;;
		esac
	} done
}

_net_arp_reset()
{
	local line

	while read line; do {
		# 10.63.196.161  0x1  0x6  00:10:75:2d:80:e1  *  eth0.1
		set -- $line
		_net arp_permanent "$1" "$4" "$6" 'reachable'
	} done <'/proc/net/arp'
}

_net_show_traffic()
{
	local iface="$1"
	local interval="${2:-1}"
	local bytes_rx bytes_tx old_rx old_tx diff_rx diff_tx mbit_rx mbit_tx percent_tx percent_rx txt change
	local max_tx=1 max_rx=1
	local oldIFS="$IFS"

	[ -z "$iface" ] && {
		# default via 10.63.99.61 dev eth0.2  metric 2 onlink
		set -- $( ip route list exact '0.0.0.0/0' | head -n1 )
		while test ! "$1" = 'dev' -a -n "$1"; do shift; done
		iface="$2"
	}

	local pre="$( _net dev2name "$iface" )/$iface"

	while true; do {
		# RX bytes:4863348071 (4.5 GiB)  TX bytes:2369902904 (2.2 GiB)
		IFS=': '
		set -- $( ifconfig "$iface" | fgrep 'RX bytes:' )
		IFS="$oldIFS"

		bytes_rx="$3"
		bytes_tx="$8"
		diff_rx=$(( ( bytes_rx - ${old_rx:-0} ) / interval ))
		diff_tx=$(( ( bytes_tx - ${old_tx:-0} ) / interval ))
		mbit_rx=$(( $diff_rx / 80000 ))
		mbit_tx=$(( $diff_tx / 80000 ))		# FIXME for small values, e.g. 0.25mbit show only '0'
		old_rx=$bytes_rx
		old_tx=$bytes_tx

		change=
		test $diff_rx -gt $max_rx -a -n "$txt" && { max_rx=$diff_rx; change='newMAX'; }
		test $diff_tx -gt $max_tx -a -n "$txt" && { max_tx=$diff_tx; change='newMAX'; }
		percent_tx="$( _math percentof $diff_tx $max_tx )"
		percent_rx="$( _math percentof $diff_rx $max_rx )"

		txt="$pre: rx/tx = down/upload: $diff_rx | $diff_tx [bytes/s] = $mbit_rx/$mbit_tx [mbit/s] = ${percent_rx%.*}/${percent_tx%.*}% $change"
		_sanitizer do "$txt" number_humanreadable
		echo

		sleep $interval
	} done
}

_net_get_external_ip()
{
	local url="$( uci get system.@monitoring[0].url )"
	test -z "$url" && url='http://intercity-vpn.de/networks/liszt28'
	url="$url/getip"

	local ip="$( _wget do "$url" )"

	echo "$ip"
}

_net_ping_getlatency()
{
	local server="$1"	# e.g. <ip> or <host>
	local pings="${2:-3}"

	# round-trip min/avg/max = 24.638/24.638/24.638 ms	// busybox
	# rtt min/avg/max/mdev = 33.415/33.415/33.415/0.000 ms	// debian
	set -- $( ping -q -c${pings} -W1 "$server" 2>/dev/null | tail -n1 )

	# bad return on error
	test -n "$4" &&	{
		# round-trip min/avg/max = 15.887/24.931/42.406 ms
		# -> 15.887/24.931/42.406 -> 15 887 24 931 42 406
		local oldIFS="$IFS"; IFS=[/.]; set -- $4; IFS="$oldIFS"

		# output 'average' round trip time: 24.931 -> 24
		echo "$3"
	}
}

_net_ping6()
{
	local dev="${1:-$LANDEV}"		# or a mac
	local option="${2:-$LANDEV}"		# or dev
	local line mac address

	# e.g. dev = macaddress
	grep -q "$dev:" '/proc/net/dev' || {
		mac="$dev"
		dev="$option"
		line="$( _net mac2linklocal "$mac" )"
		address="${line}%$dev"

		ping -c1 $address

		echo "ping $address"
		echo "ssh $address"
		echo "curl 'http://[$address]/robots.txt'	# needs v7.37.1+"
		echo "telnet $address"

		return 0
	}

	# FIXME!
	# ping for ~5 secs and remove myself + double

	# option '-L' ("Suppress loopback of multicast packets") is not supported by busybox
	# ip=$(ping6 -L -c 1 -W 2 ff02::1%$iface | grep "^64 bytes" | head -n1 | cut -d ' ' -f 4 | sed "s/:$/%$iface/") ;echo ${ip:-no_reply}
	# idea: filter out own fe80::address from $dev

	# root@Probenraum:~ ping ff02::1
	# PING ff02::1 (ff02::1): 56 data bytes
	# 64 bytes from ff02::1: seq=0 ttl=64 time=0.481 ms
	# 64 bytes from ff02::1: seq=0 ttl=64 time=0.936 ms (DUP!)
	# 64 bytes from ff02::1: seq=1 ttl=64 time=0.554 ms
	# 64 bytes from ff02::1: seq=1 ttl=64 time=1.371 ms (DUP!)
	#
	# -> look at 'ip neigh'

	# e.g. 64 bytes from fe80::6670:2ff:fed3:240a: seq=0 ttl=64 time=2.187 ms
	ping -6 -c1 "ff02::1%$dev" | grep ^'64 bytes' | cut -d' ' -f4 | while read line; do {
		# remove last ":"
		line="$( echo "$line" | sed 's/:$//' )"
		# suppress my own
		ip address show dev "$dev" | grep -q "inet6 $line/64" || echo "$line"
	} done
}

_net_dns_resolvconf_change_first_nameserver()
{
	local funcname='net_dns_resolvconf_change_first_nameserver'
	local ip_wish="$1"	# <IP> or 'remove'
	local option="$2"	# e.g. simple

	local file='/tmp/resolv.conf'
	local temp='/tmp/resolv.tmp'
	local replaced='false' line ip
	local testserver='intercity-vpn.de'

	[ "$ip_wish" = 'remove' ] || {
		nslookup "$$.$testserver" "$ip_wish" 2>/dev/null >/dev/null || {
			_log do $funcname daemon alert "DNS fails via $ip_wish - abort"
			return 1
		}
	}

	while read line; do {
		case "$line" in
			'nameserver '*)
				if [ "$replaced" = 'false' ]; then
					if [ "$line" = "nameserver $ip_wish" ]; then
						# first entry is already our wish, no action needed
						return 0
					else
						[ "$ip_wish" = 'remove' ] || {
							_log do $funcname daemon alert "$file: nameserver $ip_wish"
							echo "nameserver $ip_wish"
						}

						if [ "$option" = 'simple' ]; then
							_log do $funcname daemon alert "$file: nameserver 127.0.0.1"
							echo 'nameserver 127.0.0.1'
							break
						else
							_log do $funcname daemon alert "$file: $line"
							echo "$line"
							replaced='true'
						fi
					fi
				else
					if [ "$line" = "nameserver $ip_wish" ]; then
						# no action, ignore the old entry
						:
					else
						_log do $funcname daemon alert "$file: $line"
						echo "$line"
					fi
				fi
			;;
			*)
				_log do $funcname daemon alert "$file: $line"
				echo "$line"
			;;
		esac
	} done <"$file" >"$temp"

	mv "$temp" "$file"
}

_net_mac2linklocal()	# SENSE: mac-address to IPv6 fe80::*
{
	local mac="$1"
	local url="http://ben.akrin.com/ipv6_mac_address_to_link_local_converter/?mode=api"
	local line

	case "$mac" in
		*':'*)
		;;
		*)
			# 112233445566 -> 11:22:33:44:55:66
			mac="$( echo "$mac" | sed 's/\(\w\w\)\(\w\w\)\(\w\w\)\(\w\w\)\(\w\w\)\(\w\w\)/\1:\2:\3:\4:\5:\6/g' )"
		;;
	esac

	# root@R4-Revklappe-AP:~ ip neigh | grep ^'fe80::' | grep "lladdr $mac"
	# fe80::1cfc:fe65:769:3784 dev wlan0 lladdr 84:b1:53:b2:b8:b3 STALE
	# fe80::cea:3b47:5812:96be dev wlan0 lladdr 84:b1:53:b2:b8:b3 STALE
	line="$( ip neigh | grep ^'fe80::' | grep "lladdr $mac" | cut -d' ' -f1 )"

	if [ -n "$line" ]; then
		echo "$line"
	else
		wget -qO - "${url}&mac=${mac}"
	fi
}

_net_ip_reachable()
{
	local funcname='net_ip_reachable'
	local ip="$1"
	local max_attempts="${2:-30}"			# must be >1 or 'ping'
	local dev="${3:-$( _net ip2dev "$ip" )}"
	local dev_list="$dev"
	local pingtest='127.0.0.1'
	local line

	[ "$max_attempts" = 'ping' ] && {
		max_attempts=3
		pingtest="$ip"
	}

	case "$dev" in
		'')
			_log do $funcname daemon info "[ERR] empty devname"
			return 0
		;;
		'wlan'*)
			# TODO: ip2dev() net reliable for multiradio - introduce $WIFI_DEVS_ADHOC?
			# without known arp-entry, we must check all adhoc-channels
			for dev in $dev $WIFI_DEVS; do {
				iw dev "$dev" info | grep -q 'type IBSS'$ && dev_list="$dev_list $dev"
			} done
			dev_list="$( _list uniq "$dev_list" )"
		;;
	esac

	echo "$funcname" >"/tmp/CRON_OVERLOAD"

	while let max_attempts-=1 ; do {
		for dev in $dev_list; do {
			# arping also returns with 0, without reply (so we grep the output)
			#
			# root@feld-sollstedt:~ arping -D -c 1 -I eth0 -f 10.10.249.33
			# ARPING to 10.10.249.33 from 0.0.0.0 via eth0
			# Sent 1 probe(s) (1 broadcast(s))
			# Received 0 reply (0 request(s), 0 broadcast(s))
			# root@feld-sollstedt:~ echo $?
			# 0

			if   arping -D -c 1 -I "$dev" -f "$ip" | grep -q ^'Received 1 replies'; then
				rm "/tmp/CRON_OVERLOAD"
				ping -c1 "$pingtest" >/dev/null
				return
			elif arping    -c 1 -I "$dev" -f "$ip" | grep -q ^'Received 1 replies'; then
				rm "/tmp/CRON_OVERLOAD"
				ping -c1 "$pingtest" >/dev/null
				return
			else
				line="$( ip neigh show to "$ip" )"
				_log do $funcname daemon info "arping: $ip dev: $dev list: '$dev_list' line: '$line' try: $max_attempts"
			fi
		} done
	} done

	rm "/tmp/CRON_OVERLOAD"
	return 1
}

_net_text2port()
{
	local text="$1"
	local position char ascii sum value

	while [ ${position:=1} -le ${#text} ]; do {
		char="$( echo "$text" | cut -b $position )"
		ascii="$( printf '%d' "'$char" )"
		value=$(( ( $ascii * 17 ) / 3 ))	# nearly no collisions in testsuite
		sum=$(( ${sum:-1025} + $value ))
		position=$(( $position + 1 ))
	} done

	[ ${sum:=1025} -gt 65535 ] && sum="65535"
	echo "${sum:-1025}"
}

_net_refresh_dnshosts()		# this is mostly for getting recent values from nameservice-plugin of olsr
{
	local pid cmdline line
	local list_pids="$( pidof dnsmasq )"

	# TODO: has_changed '/var/run/hosts_olsr' || return 0

	for pid in $list_pids; do {
		read cmdline <"/proc/$pid/cmdline"

		case "$cmdline" in
			*'fakedns'*)
			;;
			*)
				while read line; do {
					case "$line" in
						'PPid:'*)
							set -- $line

							# it only works with the 'nobody' dnsmasq,
							# which has PPid = 1
							if [ "$2" = '1' ]; then
								# logging stats
								kill -SIGUSR1 $pid
								# rereads /etc/hosts + /etc/ethers + /var/run/hosts_olsr
								# and calls dhcp_old via dhcp-script
								kill -HUP $pid

								return 0
							else
								break
							fi
						;;
					esac
				} done <"/proc/$pid/status"
			;;
		esac
	} done
}

_net_dhcp_lease_filename()
{
	local file

	if   [ -e '/tmp/dhcp.leases' ]; then		# openwrt
		file="/tmp/dhcp.leases"
	elif [ -e '/var/run/dhcp.leases' ]; then	# freifunk-firmware
		file="/var/run/dhcp.leases"
	else
		file="$( uci -q get dhcp.@dnsmasq[0].leasefile )"
	fi

	[ -z "$file" -o ! -e "$file" ] && {
		file='/tmp/fake_dhcp_lease_file'
		touch "$file"
	}

	echo "$file"
}

_net_dhcp_lease_show()
{
	cat "$( _net dhcp_lease_filename )"
}

_net_dhcp_lease_remove()
{
	local mac="$1"
	local line
	local dhcp_lease_file="$( _net dhcp_lease_filename )"
	local tempfile="/tmp/dhcp_leases_$$"

	# typical leasfile:
	# 1397204975 f8:e0:79:de:e9:fc 10.10.12.6 anonymous-lan6-n12 *
	# 1397204779 e4:ce:8f:0e:4f:9e 10.10.12.5 anonymous-lan5-n12 01:e4:ce:8f:0e:4f:9e
	while read line; do {
		case "$line" in
			*" $mac "*)
			;;
			*)
				echo "$line"
			;;
		esac
	} done <"$dhcp_lease_file" >"$tempfile"

	mv "$tempfile" "$dhcp_lease_file"

	kill -SIGUSR1 $( _system get_first_pid dnsmasq )	# logging stats
	echo >>$SCHEDULER '/etc/init.d/dnsmasq restart'
}

_net_mac2vendor()
{
	local funcname='net_mac2vendor'
	local oui="$1"					# ab12cd | AB12CD | 1122334455AA | 11-22-33-44-55-aa | 11:22:33:44:55:AA
	local option="$2"				# e.g. 'short'
	local url="http://$MONITORING_SERVERIP/oui"	# see /api.txt

	# OUI = O.rganizationally U.nique I.dentifier

	if   [ ${#oui} -eq 6 -o ${#oui} -eq 12 ]; then
		:
	elif [ ${#oui} -eq 17 ]; then
		oui=${oui//:/}
		oui=${oui//-/}
		[ ${#oui} -eq 12 ] || return 1
	else
		[ ${#oui} -eq 0 ] && return 1
		oui="$( _sanitizer do "$oui" mac hex lowercase length:6 )"
		[ ${#oui} -eq 6 ] || return 1
	fi

	# 112233445566
	case "$oui" in
		'ffffff'|'ffffffffffff')
			echo 'locally_administered (802.11p OCB)'
		;;
		# test 2nd bit of first byte: http://de.wikipedia.org/wiki/MAC-Adresse#Vergabestelle
		# for DEC in $(seq 0 255); do HEX="$( printf "0x%X\n" $DEC )"; test $(( $HEX & 2 )) -eq 2 && echo $HEX; done | cut -b4- | sort -u
		?'2'*|?'3'*|?'6'*|?'7'*|?'a'*|?'b'*|?'e'*|?'f'*|?'A'*|?'B'*|?'E'*|?'F'*)
			echo 'locally_administered'
		;;
		*)
			local cache="/tmp/oui/$oui"
			[ -e "$cache" ] || {
				mkdir -p "/tmp/oui"
				url="$url/${oui:0:2}/${oui:2:2}/${oui:4:2}"
				_sanitizer do "$( _wget do "$url" 5 2>/dev/null )" shellsafe >"$cache"

				[ $( _file size "$cache" ) -eq 0 ] && {
					_log do $funcname daemon info "download '$url' failed or empty data"
					rm "$cache"
					return 1
				}
			}

			if [ "$option" = "short" ]; then
				head -n1 "$cache"
			else
				cat "$cache"
			fi
		;;
	esac
}

_net_ip4_is_private()		# RFC-1918
{
	case "$1" in
		192.168.*|172.1[6-9].*|172.2[0-9].*|172.3[0-1].*|169.254.*|10.*|127.*)
			return 0
		;;
		*)
			return 1
		;;
	esac
}

_net_ip2dns()
{
	local ip="$1"
	local startparse last line error output do_olsr

	# root@box:~ nslookup 10.63.6.3
	# Server:    127.0.0.1			// these 2 lines are
	# Address 1: 127.0.0.1 localhost	// optional
	#
	# Name:      10.63.6.3
	# Address 1: 10.63.6.3 mid1.F36-Dach4900er-MESH		// hostname is missing if lookup fails

	output="$( nslookup "$ip" 2>/dev/null || echo 'ERROR ERROR' )"
	set -- $output

	case "$6" in
		*'mywifi'*|*'user-lan'*)
			do_olsr='true'
		;;
		*)
			[ "$1" = 'ERROR' ] && {
				do_olsr='true'
				error='true'
			}
		;;
	esac

	[ -n "$do_olsr" ] && {
		while read line; do {
			# 10.63.194.131   mid1.Sommerbar-Kamera   # 10.63.194.161 (mid #1)
			set -- $line

			case "$1" in
				"$ip")
					echo "$2"
					return 0
				;;
			esac
		} done <'/var/run/hosts_olsr'

		if [ -n "$error" ]; then
			return 1
		else
			# use nslookup-output
			set -- $output
		fi
	}

	while shift; do {
		case "$1" in
			'Name:')
				startparse='true'
			;;
			'Address')
				[ -n "$startparse" ] && {
					if [ -n "$4" ]; then
						echo "$4"
					else
						echo "$3"
					fi

					return 0
				}
			;;
			'')
				echo "$last"
				return 0
			;;
		esac

		last="$1"
	} done

	return 1
}

_net_ip2mac()		# works only for local/active IP's, but: maybe we want to "guess" using /etc/ethers...?
{			# TODO: send ping for onehop-neighs?
	local get_ip="$1"
	local option="$2"	# string: 'lazy' (mostly for OLSR-neighs, where total exact match is not important)
	local mac=
	local line ip dev

	# this can be outdated, see http://www.intercity-vpn.de/files/openwrt/login_error.ejbw.wrong.mac.txt
	[ "$option" = 'lazy' ] && {
		cat "/tmp/IP2MAC_${get_ip}" 2>/dev/null && return 0
	}

	# get mac from interface
	case "$get_ip" in
		$WIFIADR)
			read mac 2>/dev/null <"/tmp/IP2MAC_${get_ip}" || mac="$( _net dev2mac "$WIFIDEV" )"
		;;
		$LANADR)
			read mac 2>/dev/null <"/tmp/IP2MAC_${get_ip}" || mac="$( _net dev2mac "$LANDEV" )"
		;;
		$WANADR)
			read mac 2>/dev/null <"/tmp/IP2MAC_${get_ip}" || mac="$( _net dev2mac "$WANDEV" )"
		;;
	esac

	# get mac from arp-cache
	[ -z "$mac" ] && {
		while read line; do {
			set -- ${line:-unset}
			ip="$1"
			mac="$4"

			case "$mac" in
				'00:00:00:00:00:00')
					mac=
					continue
				;;
				'24:a4:2c'*)
					# KOUKAAM / NetIO-230b
					[ -e '/tmp/WATCHDOG_TYPE1' ] || _sanitizer do "$ip-$mac" alphanum >'/tmp/WATCHDOG_TYPE1'
				;;
			esac

			if [ "$ip" = "$get_ip" ]; then
				_sanitizer do "$mac" lowercase >"/tmp/IP2MAC_$get_ip"
				break
			else
				mac=
			fi
		} done <'/proc/net/arp'
	}

	# get mac from OLSR-neigh
	if [ -z "$mac" ]; then
		[ -e "/tmp/OLSR/isneigh_$get_ip" ] && {
			mac="$( _tool remote "$get_ip" ip2mac )"
			mac="$( _sanitizer do "$mac" mac )"

			[ -z "$mac" ] && {
				# LuCI-based:
				mac="$( _wget do "http://$get_ip/cgi-bin/luci/freifunk/status" | grep -- '-bssid">' | grep -v '>02:' )"
				mac="$( _sanitizer do "$mac" mac lowercase )"

				[ -z "$mac" ] && {
					# Sven-Ola based:
					mac="$( _wget do "http://$get_ip/cgi-bin-status.html" | grep ^'MAC:' )"
					mac="$( _sanitizer do "$mac" mac lowercase )"
				}
			}
		}

		if [ -n "$mac" ]; then
			echo "$mac" >"/tmp/IP2MAC_$get_ip"
		else
			# translate IPs from local interfaces (which are not in arp-cache), e.g. WIFI-2
			dev="$( ip --oneline address show to "$get_ip" | cut -d' ' -f2 )"
			# dev is empty, when IP is not local
			mac="$( _net dev2mac "$dev" )" && {
				echo "$mac" >"/tmp/IP2MAC_${get_ip}"
			}
		fi
	else
		echo "$mac" >"/tmp/IP2MAC_$get_ip"
	fi

	cat "/tmp/IP2MAC_$get_ip" 2>/dev/null
}

_net_dns2ip()
{
	local dns="$1"
	local go ip

	# set -- $( nslookup host86-139-31-49.range86-139.btcentralplus.com )
	# Server: 127.0.0.1 Address 1: 127.0.0.1 localhost Name: host86-139-31-49.range86-139.btcentralplus.com Address 1: 86.139.31.49 host86-139-31-49.range86-139.btcentralplus.com
	set -- $( nslookup "$dns" || echo 'ERROR ERROR' )

	while shift; do {
		case "$1" in
			'ERROR')
				return 1
			;;
			'Name:')
				go='true'
			;;
			'Address:'|'Address')
				[ "$go" = 'true' ] || continue

				# 'Address 1: 84.38.67.43'
				# 'Address 1: 2a02:2e0:3fe:100::8 redirector.heise.de'
				# 'Address 2: 193.99.144.80 redirector.heise.de'
				# 'Address:    193.99.144.80'	// spaces on kernel 2.4
				[ "$1" = 'Address' ] && shift
				shift

				case "$1" in
					*':'*)
						# ignore IPv6
					;;
					*)
						echo "$1"
						return 0
					;;
				esac
			;;
		esac
	} done
}

_net_dev2name()
{
	local dev="$1"	# e.g. eth0.2 or pppoe-lan

	if _net dev_is_wifi "$dev"; then
		echo 'wifi'
	else
		case "$dev" in
			'pppoe-'*)
				echo "${dev#*-}"
			;;
			*)
				cat "/var/run/interfaces/dev2name_$dev"
			;;
		esac
	fi
}

_net_dev2ip()		# only first ip
{
	local funcname='net_dev2ip'
	local dev="$1"
	local option="$2"	# "ip"|"mask"|"debug"
	local type="$3"		# "cidr"

	local line ip_with_mask key

	[ -z "$dev" ] && return 1
	line="$( ip -oneline -f inet address show dev "$dev" )"

	set -- ${line:-is_empty}

	case "$3" in
		inet)
			key="$5"

			case "$key" in
				brd|scope)
					# e.g.:
					# 6: wlan0    inet 10.63.10.1/8 brd 10.255.255.255 scope global wlan0
					# 7: wlan0-1    inet 10.63.10.1/32 scope global wlan0-1
					ip_with_mask="$4"
				;;
				*)
					# e.g.:
					# 8: ppp0 inet 84.183.156.159 peer 217.0.116.17/32 scope global ppp0
					ip_with_mask="$6"
				;;
			esac
		;;
		*)
			if [ "$option" = 'debug' ];then
				_log do $funcname daemon info "[ERR] dev: $dev line: '$line'"
			else
				if [ $( _system uptime sec ) -lt 120 ]; then
					_log do $funcname daemon info "[ERR] dev: $dev line: '$line'"
				else
					_log do $funcname daemon alert "[ERR] dev: $dev line: '$line'"
					ip address show dev $dev >>$EVERLOG
				fi
			fi

			return 1
		;;
	esac

	case "$option" in
		mask)
			case "$type" in
				cidr)
					echo "${ip_with_mask%/*}"
				;;
				*)
					_net cidr2mask "${ip_with_mask#*/}"
				;;
			esac
		;;
		*)
			echo "${ip_with_mask%/*}"
		;;
	esac
}

_net_dev2mac()
{
	local dev="${1:-empty_dev}"

	set -- $( ip --oneline link show dev "$dev" )

	while [ -n "$1" ]; do {
		case "$1" in
			*':'*)
				_sanitizer do "$1" mac check && {
					echo "$1"
					return 0
				}
			;;
		esac

		shift
	} done

	return 1
}

_net_devtype2symbol()
{
	case "$1" in
		'tunnel') echo -n '=' ;;
		'wifi') echo -n '~' ;;
		'unknown') echo -n '?' ;;
		*) echo -n "-" ;;
	esac
}

_net_dev_is_valid()
{
	local dev="$1"		# e.g. 'eth0.2'
	local line

	while read line; do {
		case "$line" in
			"$dev:"*|" $dev:"*|"  $dev:"*|"   $dev:"*|"    $dev:"*)
				return 0
			;;
		esac
	} done <'/proc/net/dev'

	return 1
}

_net_dev_type()		# out: string, "wifi/tunnel/wire"
{
	local dev="$1"
	local option="$2"	# short
	local out

	if   [ -z "$dev" ]; then
		out='unknown'
	elif _net dev_is_wifi "$dev" ; then
		out='wifi'
	elif _net dev_is_tuntap "$dev" ; then
		out='tunnel'
	else
		out='wire'
	fi

	if [ "$option" = 'short' ]; then
		_net devtype2symbol "$out"
	else
		echo "$out"
	fi
}

_net_ip2metric ()
{
	local ip="$1"
	local option="$2"

	case "$option" in
		olsr)
			_olsr remoteip2metric $ip
		;;
		*)
			ip route list $ip | sed -n 's/^.*metric \([0-9]*\).*/\1/p;q'
		;;
	esac
}

_net_dev_is_wifi()
{
	# case " $WIFI_DEVS " in
	# 	*" $dev "*)
	#		// is_wifi
	#	;;
	# esac

	grep -sq ^".*${1:-empty_devname}:" '/proc/net/wireless'
}

_net_dev_is_tuntap()
{
	local dev="$1"

	case "$dev" in
		'tun'*|'tap'*)
			return 0
		;;
		*)
			[ -d "/etc/tinc/$dev" ] && return 0
		;;
	esac

	return 1
}

_net_ip2dev()		# outputs real devname like 'br0' or 'wlan0-1'
{
	local funcname='net_ip2dev'
	local ip="$1"
	local line

	# TODO: make use of /tmp/CLIENTS_*?

	while read line; do {
		case "$line" in
			"$ip "*)
				# 10.63.61.1  0x1  0x2  66:70:02:f3:90:6c  *  wlan1
				set -f
				set -- $line
				set +f		# globbing ON (default)

				[ "$4" = '00:00:00:00:00:00' ] || {
					_log do $funcname daemon debug "try1: $6 <- $@"
					echo "$6"
					return 0
				}
			;;
		esac
	} done <'/proc/net/arp'

	# FIXME! we can be wrong:
	#
	# root@E2-ayse:~ _net ip2dev 10.63.22.65
	# ip -oneline route get 10.63.22.65
	# set -- 10.63.22.65 via 10.63.22.89 dev eth0.2 src 10.63.20.89 \ cache
	#
	# it shows the routing-table (over wire), not the expected way over wifi

	# e.g.
	# 192.168.99.243 dev br-mybridge  src 192.168.99.1 \ cache
	# fe80::221:6aff:fe32:7c1c from :: dev eth0  src fe80::da5d:4cff:fe9c:2f1a  metric 0 \ cache
	set -- $( ip -oneline route get "$ip" 2>/dev/null || echo 'ERROR ERROR' )

	while shift; do {
		case "$1" in
			'dev')
				dev="$2"
				# batman/macvlan-hack, maybe unneeded
				[ "$dev" = "gateway0" ] && dev="br-mybridge"
				echo "$dev"

				return 0
			;;
			'ERROR'|'metric'|'cache')
				return 1
			;;
		esac
	} done
}

_net_iplocal2dev ()		# does it really make sense to have this func?
{
	ip -oneline address show | sed -ne "/ inet $1\//{s/^[0-9]*: \([a-zA-Z0-9@\.]*\).*/\1/p;q}"

	# does not work for local IP's:
	# ip -o route get $1 | cut -d' ' -f3
}

_net_local_inet_offer()			# SENSE: check if default-route is local
{					# OUT1: string, false|wan|lan|pppoe
	local funcname='net_local_inet_offer'
	local option="$1"

	local cachefile="/tmp/$funcname-cache"
	local MODE="false"		# RC: true = inetoffer, false = no inetoffer
	local PHYDEV=0 METRIC=0 D=0 N=0 trash wan_proto cache

	case "$option" in
		'update_cache')
			_net local_inet_offer >"$cachefile"
			return 0
		;;
		'cached')
			[ -e "$cachefile" ] || _net local_inet_offer >"$cachefile"

			read cache <"$cachefile" && {
				echo "$cache"

				if [ "$cache" = 'false' ]; then
					return 1
				else
					return 0
				fi
			}
		;;
	esac

	wan_proto="$( uci -q get network.wan.proto )"
	[ "$wan_proto" = "pppoe" ] && {
		_log do $funcname daemon info "early_boot_estimation: pppoe"
		echo "pppoe"
		return 0
	}

	[ -e '/tmp/NETPARAM' ] || {
		local WAN_GATEWAY="$( uci get network.wan.gateway )"
		[ -n "$WAN_GATEWAY" ] && {
			if [ "$WAN_GATEWAY" = "0.0.0.0" ]; then
				_nvram set wan_gateway
				_nvram set commit "config-mistake, unsetting wan-gateway which was '$WAN_GATEWAY'"
			else
				[ "$wan_proto" = "pppoe" ] && {
					_log do $funcname daemon info "early_boot_estimation: pppoe"
					echo "pppoe"
					return 0			# fixme!
				}

				_log do $funcname daemon info "early_boot_estimation: wan"
				echo "wan"
				return 0
			fi
		}

		[ -n "$( uci get network.lan.gateway )" ] && {
			_log do $funcname daemon info "early_boot_estimation: lan"
			echo "lan"
			return 0
		}

#		/etc/init.d/S52vpnc_fff+ check && {
#			_log do $funcname daemon info "early_boot_estimation: tun"
#			echo "tun"
#			return 0
#		}

		# fixme! wan-dhcp?

		_log do $funcname daemon info "early_boot_estimation: false"
		echo "false"
		return 1
	}

	local LAN_GATEWAY="$( uci -q get network.lan.gateway )"
	[ -n "$LAN_GATEWAY" ] && {
		[ -z "$( ip route list exact '0.0.0.0/0' via $LAN_GATEWAY )" ] && {
			[ "$LAN_GATEWAY" = '0.0.0.0' ] || {
				_log do $funcname daemon info "alien_gateway '$LAN_GATEWAY': lan"
				echo 'lan'
				return 0
			}
		}
	}

	# only look for the first default-route
	# some examples:
	#
	# default via 192.168.1.1 dev vlan1		-> wan-offer|wan_gateway
	# default via 191.255.255.1 dev venet0		-> root-server
	# default via 217.0.116.253 dev ppp0		-> pppoe
	# default dev tun0  scope link			-> vpnc
	# default dev venet0  scope link		-> on vpn-server
	# default via 10.63.52.36 dev br0 		-> lan-offer|lan-gateway
	# default via 10.63.99.33 dev eth0.1  metric 2 onlink		-> since ~git29366 "onlink"
	# default via 192.168.101.112 dev eth0.1  src 192.168.101.222	-> lan-offer via alias-interface
	# default via 192.168.1.1 dev eth1  proto static ->841nd
	# default via 192.168.2.1 dev br-mybridge	-> batman/no_local_inet_offer

	eval $( ip route list exact 0.0.0.0/0 | head -n1 |
		while read N N D N PHYDEV METRIC N trash; do {	# we must eval it, otherwise		// fixme! look for 'table all'?
			echo PHYDEV=$PHYDEV			# the vars from subprocess are
			echo METRIC=$METRIC			# not known
			echo N=$N
			echo D=$D				# fixme! better use 'eval $( ip route list exact 0.0.0.0/0 | sed 'xyz' )'
		} done
	)

	[ "$METRIC" = "src" ] && METRIC=			# lan-offer via alias-interface
	[ "$N" = static ] && METRIC=

	if [ -z "$METRIC" ]; then				# found no metric = local inet-offer
		_log do $funcname daemon debug "PHYDEV: '$PHYDEV' METRIC: '$METRIC' N: '$N' D: '$D'"

		if [ -z "${PHYDEV}${METRIC}${N}" ]; then	# ip route list exact 0.0.0.0/0 -> "default via eth0" or similar

			[ "$LAN_GATEWAY" = "0.0.0.0" ] && {	# fixme! move to early-boot-estimation
				_nvram set lan_gateway
				_nvram set commit "config-mistake, unsetting lan-gateway which was '$LAN_GATEWAY'"

				ip route delete default via $D
			}
		else
			if   [ "$PHYDEV" = "$WANDEV" ]; then
				MODE="wan"
			elif [ "$PHYDEV" = "$LANDEV" ]; then
				MODE="lan"
			elif [ "$PHYDEV" = "$WIFIDEV" ]; then
				MODE="wifi"
			elif [ "$PHYDEV" = "br-mybridge" ]; then
				MODE="false"	# batman
			else
				MODE="pppoe"	# && WANDEV=ppp0          # FIXME! this is not exact!
			fi

			[ "$PHYDEV" = "link" ] && {
				if   echo $D | grep -q "^tun[0-9]*" ; then
					MODE=tun
				elif echo $D | grep -q "^tap[0-9]*" ; then
					MODE=tap
				else
					MODE="$D"				# e.g. tun0 / vpnc
				fi
			}

			_log do $funcname daemon info "found local default-gateway over device '$PHYDEV' = '$MODE'"
		fi
	else
		if [ $N -eq 0 ]; then
			_log do $funcname daemon info "no local default-gateway, no default-gateway, no internet 8-("
		else
			_log do $funcname daemon info "no local default-gateway found, only $N hops away 8-)"
		fi
	fi

	echo $MODE

	[ "$MODE" = "false" ] && return 1	
	return 0
}

_net_inet_seems_stable()					# FIXME! also check path to gateway (add wireless costs/hops)
{								# FIXME! apply these checks regulary
	local option="$1"
	local FILE="/tmp/GATEWAY_CHECK_RECENT_COSTINT_ONLY"	# FIXME! test dns also?
	local funcname='net_inet_seems_stable'			# FIXME! use dnsfaker if unstable/unfake if stable
	local max_cost="$( uci -q get system.@monitoring[0].maxcost )"
	local file_broken="/tmp/$funcname"
	local routing_proto
	local proto_uptime_ok="true"

	max_cost="${max_cost:-50000}"		# FIXME! correct would be to only take the weakest hop into account

	# with missing netifd we cannot change ESSID/restart AP-interfaces anyway
	# TODO: but we can show it in weblogin and redirect to fake-DNS
	[ -n "$LOWMEM" ] && return 0

	if pidof bat_events >/dev/null; then
		routing_proto='batman'
		[ $( _system uptime sec ) -gt 600 ] || proto_uptime_ok="false"
		FILE=
	else
		routing_proto='olsr'
		_olsr uptime is_short && proto_uptime_ok='false'
	fi

	gateway_found()
	{
		local proto="$1"
		local gateway_check="$( uci -q get system.@weblogin[0].gateway_check )"

		case "$proto" in
			batman)
				local i=3
				local authserver="$( _weblogin authserver )"

				# special agreement: every node is a server (answers DHCP-requests)
				# and announces 512kbit, the real gateway announces 16mbit

				if batctl gateways | grep -q 'MBit'; then
					case "$CONFIG_PROFILE" in
						'apphalle'*)
							while let i=i-1; do {
								ping -q -c1 "$authserver" && return 0
							} done

							return 1
						;;
						*)
							return 0
						;;
					esac
				else
					# special: 16M/16M = real inet offer
					test "$( uci get batman-adv.bat0.gw_bandwidth )" = '16384kbit/16384kbit'
				fi
			;;
			olsr)
				[ -n "$gateway_check" ] && {
					_olsr gateways_get | grep -q ^"$( _sanitizer escape_dots "$gateway_check" )"$ || {
						# gateway dont see the other GW's
						_net local_inet_offer >/dev/null || {
							_log do $funcname daemon info "[ERR] gateway '$gateway_check' not found"
							return 1
						}
					}
				}

				test -n "$( ip route list exact '0.0.0.0/0' table main )"
			;;
		esac
	}

	[ "$proto_uptime_ok" = "true" ] && {
		if gateway_found "$routing_proto"; then
			[ -e "$file_broken" ] && {
				rm "$file_broken"
				_log do $funcname daemon alert "unstable inet fixed after: $( _stopwatch stop "$funcname.broken" nolog,humanreadable )"

				if pidof bat_events >/dev/null; then
					# FIXME!
					_system reboot_safe "ssid_change"
				else
					_weblogin generate_prebuilt_splash_htmlfile persistent
					_wifi change_essid_ap original
				fi
			}
		else
			if _watch counter "$file_broken" increment 1 max 5 ; then
				[ -e "$funcname.broken" ] || _stopwatch start "$funcname.broken" global
			else
				_wifi change_essid_ap
			fi

			_log do $funcname daemon info "unstable inet, no default route in main-table"
			return 1
		fi
	}

	[ -e "$FILE" ] && {
		read COST_INT <$FILE

		[ "$COST_INT" 2>/dev/null -gt $max_cost ] && {
			_log do $funcname daemon alert "unstable inet1, cost_int: '$COST_INT' > $max_cost"
			return 1
		}

		[ "$COST_INT" = "0" ] && {
			_log do $funcname daemon alert "unstable inet2, cost_int: '$COST_INT'"
			return 1
		}
	}

	return 0
}

_net_mac2ip()		# SENSE: get client-IP from different sources
{
	local mac="$1"
	local funcname="mac2ip"

	# 6 x hex-bytes + 5 x ':' = 17
	[ -z "$mac" -o ${#mac} -ne 17 ] && return 1

	_sanitizer include

	local MAC="$( _sanitizer do "${mac:-unset_mac}" lowercase )"
	local IP=
	local HOSTNAME=
	local COUNT=

	try_0()
	{
		case "$MAC" in
			02:00:ca:*|02:00:de:*)
				# we use selfdefined mac's on some batman-nodes, e.g.
				# 02:00:ca:b1:01:11 = node 111 (last 4 digits)
				# 02:00:ca:fe:02:22 = node 222
				# 02:00:ca:ff:00:33 = node  33
				# 02:00:de:ad:01:34 = node 134
				MAC="$( echo "$MAC" | cut -d':' -f5 )$( echo "$MAC" | cut -d':' -f6 )"

				MAC="${MAC#0}"          # e.g. 0002 -> 2
				MAC="${MAC#0}"
				MAC="${MAC#0}"

				IP="192.168.$MAC.1"
			;;
		esac
	}

	try_1()		# is filled during _netfiler_user_add() (macs are lowercase)
	{
		if [ -e "/tmp/MAC2IP_$MAC" ]; then
			read IP <"/tmp/MAC2IP_$MAC"
		else
			[ -e "/tmp/NETFILTER/MAC2IP/$MAC" ] && {
				read IP <"/tmp/NETFILTER/MAC2IP/$MAC"
			}
		fi
	}

	try_2()		# arp-cache (macs are lowercase)
	{
		local mac ip line

		while read line; do {
			set $line
			ip="$1"
			mac="$( _sanitizer do "$4" lowercase )"

			[ "$MAC" = "$mac" ] && {
				IP="$ip"
				return
			}

		} done </proc/net/arp
	}

	try_3()		# DHCP-leases (macs are lowercase)
	{
		local leasefile="$( _net dhcp_lease_filename )"

		[ -e "$leasefile" ] && {
			IP="$( sed -e "/$MAC/!d" -ne 's/^.* ..:..:..:..:..:.. \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\) .*/\1/p' "$leasefile" )"
		}
	}

	try_4()		# /etc/ethers -> /etc/local.hosts (macs are lowercase)
	{
		HOSTNAME="$( sed -n "s/^$MAC \(.*\)/\1/p" /etc/ethers 2>/dev/null )"
		[ -n "$HOSTNAME" ] && IP="$( sed -n "/$HOSTNAME/s/^\([0-9\.]*\) ${HOSTNAME}.*/\1/p" /etc/local.hosts )"
	}

	for COUNT in 0 1 2 3 4 ; do {
		try_${COUNT}

		[ -n "$IP" ] && {
			echo "$MAC" >/tmp/IP2MAC_$IP
			echo "$IP"
			return 0
		}
	} done

	_log do $funcname daemon info "could not get ip for mac $MAC"
	return 1
}

_net_mac2hostname ()
{
	local MAC="$1"

	local NAME="$( grep -i $MAC /etc/ethers | sed -n 's/^..:..:..:..:..:.. \(.*\)-.*-.*\..*$/\1/p' )"	# cutting off e.g. "-lan1-n364.domain"
	echo ${NAME:=anonym}
}

_net_mac2dev()
{
	local get_mac="$1"
	local exact="$2"		# e.g. for arp_permanent we need 'br-mybridge' and not 'wlan1'
	local mac dev dummy wifidev

	_sanitizer include

	while read dummy dummy dummy mac dummy dev; do {
		mac="$( _sanitizer do "$mac" lowercase )"

		[ "$get_mac" = "$mac" ] && {
			[ -n "$exact" ] || {
				case "$dev" in
					'br-mybridge'|'gateway0')
						for wifidev in $WIFI_DEVS; do {
							iw dev "$wifidev" station get "$mac" 2>/dev/null >/dev/null && {
								dev="$wifidev"
								break
							}
						} done
					;;
				esac
			}

			echo "$dev"
			return 0
		}

	} done </proc/net/arp

	return 1
}

_net_mac2media()
{
	local MAC="$1"				# ARG1: (string) mac-address
	local SHORT="$2"			# ARG2: (string) keyword "short" (optional)
	local OUT=0				# OUT1: (string) wifi,wire OR ~,-
	local DEV="$( _net mac2dev "$MAC" )"

	  if [ "$DEV" = "$WIFIDEV" ]; then
	  	OUT=wifi
	elif uci get system.@ethers[0].wifi | grep -qi $MAC ; then
		OUT=wifi
	elif grep -sq ^"$( _sanitizer do "$( _net mac2ip $MAC )" escape_dots );" /tmp/CLIENTS_WIFI ; then
		OUT=wifi
	else
		OUT=wire		# fixme! this can also be guessed!
	fi

	[ -n "$SHORT" ] && OUT="$( _net devtype2symbol $DEV )"

	echo -n "$OUT"
}

_net_arp_permanent()
{
	local FUNC="net_arp_permanent"
        local IP="$1"
        local MAC="$( _sanitizer do "$2" lowercase )"
        local FORCE="$3"				# or <dev>
	local nudmode="${4:-permanent}"			# or 'reachable'
	local dev_keyword= MODE LINE DEV

        _log do $FUNC daemon info "IP: '$IP' MAC: '$MAC' FORCE: '$FORCE' nudmode: '$nudmode'"

	[ "$MAC" = "00:00:00:00:00:00" ] && {		# fixme! see dhcp-script
		return 1
	}

	LINE="$( ip neigh show to $IP 2>/dev/null )"
	echo "$LINE" | fgrep -i -q " $nudmode" && {
		_log do $FUNC daemon info "already nud '$nudmode' - do nothing"
		return
	}

	if [ -n "$LINE" ]; then
		MODE="change"
	else
		MODE="add"
	fi

	if fgrep -q "$FORCE:" '/proc/net/dev'; then
		DEV="$FORCE"
		dev_keyword="$DEV (user input)"
	else
		DEV="$( _net mac2dev "$MAC" )"		# fixme! probe up to 3 times?
	fi

 	if [ -z "$DEV" ]; then
		_log do $FUNC daemon info "not in neigh-list, probing"

 		  if [ "$FORCE" = 'wifi' ]; then
			dev_keyword="wifi (forced)"
			DEV="$WIFIDEV"
 		elif [ "$( _net mac2media $MAC )" = 'wire' ]; then		# why a 2nd try? -> checked: is needed somethimes
			dev_keyword="wire (detected at 2nd try)"
			DEV="$LANDEV"
 		else
			dev_keyword="wifi (defaulting)"
			DEV="$WIFIDEV"
 		fi
 	else
		[ -z "$dev_keyword" ] && dev_keyword="$DEV (autodetected)"
 	fi

	_log do $FUNC daemon info "detected physical-device ${dev_keyword:-unknown}: ip neigh $MODE $IP dev $DEV lladdr $MAC nud $nudmode"
	ip neigh $MODE $IP dev $DEV lladdr $MAC nud "$nudmode" 2>/dev/null
}

_net_mask2cidr()	# see https://lists.openwrt.org/pipermail/openwrt-devel/2015-June/033540.html
{			# e.g.: 255.255.255.0 -> 24
	local x=${1##*255.}
	local allones=$(( (${#1} - ${#x}) * 2 ))
	local tbl='0^^^128^192^224^240^248^252^254^'
	x=${tbl%%${x%%.*}*}
	echo $(( $allones + (${#x}/4) ))
}

_net_cidr2mask()	# OUT1: string
{
	local o

	case "$1" in
		31) o=255.255.255.254 ;;
		30) o=255.255.255.252 ;;
		29) o=255.255.255.248 ;;
		28) o=255.255.255.240 ;;
		27) o=255.255.255.224 ;;
		26) o=255.255.255.192 ;;
		25) o=255.255.255.128 ;;
		24) o=255.255.255.0 ;;
		23) o=255.255.254.0 ;;
		22) o=255.255.252.0 ;;
		21) o=255.255.248.0 ;;
		20) o=255.255.240.0 ;;
		19) o=255.255.224.0 ;;
		18) o=255.255.192.0 ;;
		17) o=255.255.128.0 ;;
		16) o=255.255.0.0 ;;
		15) o=255.254.0.0 ;;
		14) o=255.252.0.0 ;;
		13) o=255.248.0.0 ;;
		12) o=255.240.0.0 ;;
		11) o=255.224.0.0 ;;
		10) o=255.192.0.0 ;;
		 9) o=255.128.0.0 ;;
		 8) o=255.0.0.0 ;;
		 7) o=254.0.0.0 ;;
		 6) o=252.0.0.0 ;;
		 5) o=248.0.0.0 ;;
		 4) o=240.0.0.0 ;;
		 3) o=224.0.0.0 ;;
		 2) o=192.0.0.0 ;;
		 1) o=128.0.0.0 ;;
		 *) o=255.255.255.255 ;;
	esac

	echo -n $o
}

_net_hosts2cidr ()
{
	local o
	local HOSTS="$1"

	  if [ $HOSTS -le 1 ]; then
		o=32
	elif [ $HOSTS -le 2 ]; then
		o=31
	elif [ $HOSTS -le 4 ]; then
		o=30
	elif [ $HOSTS -le 8 ]; then
		o=29
	elif [ $HOSTS -le 16 ]; then
		o=28
	elif [ $HOSTS -le 32 ]; then
		o=27
	elif [ $HOSTS -le 64 ]; then
		o=26
	elif [ $HOSTS -le 128 ]; then
		o=25
	elif [ $HOSTS -le 256 ]; then
		o=24
	fi

	echo -n $o
}

#!/bin/sh

_pdf_filename ()
{
	local TYPE="$1"		# string: overview|labels|labels_overview|csv
	local COUNT="$2"	# integer: 32
	local NAME="$3"		# 1-Stunden-Tickets
	local LANG="$4"		# fixme!

	local FILENAME WORD EXTENSION

	case "$TYPE" in
		overview)
			WORD="-$( _translate do "$LANG" overview filename )"
			EXTENSION="pdf"
		;;
		labels)
			WORD="-$( _translate do "$LANG" labels filename )"
			EXTENSION="pdf"
		;;
		labels_overview)
			WORD="-$( _translate do "$LANG" labels_overview filename )"
			EXTENSION="pdf"
		;;
		csv)
			WORD="-Excel"		# no translation needed
			EXTENSION="csv"
		;;
		*)
			WORD=
			EXTENSION="txt"
		;;
	esac

	FILENAME="$( _translate do "$LANG" wifi_system )-$( _weblogin metadata_locationname )-$( _system date humanreadable )-${COUNT}x${NAME}${WORD}.${EXTENSION}"

	echo "$FILENAME" | sed	-e 's/ //g' \
				-e 's/&acute;//g' \
				-e 's/\\//g'			# strip spaces, "\" and replace ":" - fixme! is a hack
}

_pdf_output ()
{
	local METHOD="$1"			# a4digest|a4marker|a4marker_digest|a4test
	local LIST_LOGIN_ID="$2"
	local FUNC="pdf_output"
	local TEMPFILE="/tmp/${FUNC}_${METHOD}_$$"
	local FILEPART

	_log do $FUNC daemon info "[START] generating A4-page ($METHOD) with these logins: '$( _sanitizer do "$LIST_LOGIN_ID" newlines2spaces )'"

	_pdf output_${METHOD}_body "$LIST_LOGIN_ID"		>$TEMPFILE.body
	SIZE_BODY="$( _file size "$TEMPFILE.body" )"

	_pdf output_header $SIZE_BODY				>$TEMPFILE.header
	SIZE_HEADER="$( _file size "$TEMPFILE.header" )"

	_pdf output_footer "$TEMPFILE.header" "$(( $SIZE_BODY + SIZE_HEADER ))"	>$TEMPFILE.footer

	for FILEPART in header body footer; do {
		cat $TEMPFILE.$FILEPART
		rm $TEMPFILE.$FILEPART
	} done

	_log do $FUNC daemon info "[OK] generated PDF ($METHOD)"
}

_pdf_output_a4test_body ()
{
	local x=0
	local xmax=900
	local y=0
	local ymax=1000
	local step=10
	local fontsize=6

	while [ $x -lt 900 ]; do {

		echo "0 $y m $xmax $y l S"		# horizontal
		echo "$x 0 m $x $ymax l S"		# vertical
		echo "BT $x $y TD /F1 $fontsize Tf ($x,$y)Tj ET"

		x=$(( $x + $step ))
		y=$(( $y + $step ))

	} done
}

_pdf_output_a4digest_body ()
{
	local LIST_LOGIN_ID="$1"

	local FUNC="output_a4digest_body"
	local MAXLINES=32			# then A4 is full
	local FONTSIZE X XY ID NAME
	local Y=718
	local Y_STEP=21
	local Y_MARGIN=5
	local YSTART=$Y
	local RECORD=0
	local ID

	local X0=25
	local X1=35
	local X2=160
	local X3=170
	local X4=250
	local X5=260
	local X6=470
	local X7=480
	local X8=570

	FONTSIZE=24
#	HOTELNAME="$( _weblogin metadata_locationname | sed 's/&acute;/Â/g' )"		# fixme! encoding does not work correct
	HOTELNAME="$( _weblogin metadata_locationname | sed 's/&acute;/ /g' )"

	if [ ${#HOTELNAME} -lt 10 ]; then
		XY="$(( 600 - ( 17 * ${#HOTELNAME}) )) 800"
	else
		XY="$(( 600 - ( 13 * ${#HOTELNAME}) )) 800"		# not exact, but works (proportional font!)
	fi

	echo "BT $XY TD /F1 $FONTSIZE Tf ($HOTELNAME)Tj ET"

	for ID in $LIST_LOGIN_ID; do {				# fetch profilename from first ticket
		eval $( _db user login show $ID "PROFILE_ID" )
		eval $( _db user profile show $PROFILE_ID "NAME" )
		break
	} done

	XY="$X0 740"
	FONTSIZE=8
	echo "BT $XY TD /F1 $FONTSIZE Tf (Zeitpunkt der automatischen Generierung: $( _system date humanreadable pretty | sed "s/'//" ))Tj ET"

	FONTSIZE=18

	Y_FONT="$(( $Y + $Y_MARGIN - $Y_STEP ))"

	cat <<EOF
BT $X1 $Y_FONT TD /F1 $FONTSIZE Tf (Benutzername)Tj ET
BT $X3 $Y_FONT TD /F1 $FONTSIZE Tf (Passwort)Tj ET
BT $X5 $Y_FONT TD /F1 $FONTSIZE Tf (Zimmernummer/Gastname)Tj ET
BT $X7 $Y_FONT TD /F1 $FONTSIZE Tf (Kommentar)Tj ET
EOF

	for ID in $LIST_LOGIN_ID; do {

		[ $RECORD -eq $MAXLINES ] && break
		RECORD=$(( $RECORD + 1 ))

		Y=$(( $Y - $Y_STEP ))
		Y_FONT="$(( $Y + $Y_MARGIN - $Y_STEP ))"

		eval $( _db user login show $ID "USERNAME PASSWORD COMMENT" )

				# username/password + horizontal_line
		cat <<EOF
BT $X1 $Y_FONT TD /F1 $FONTSIZE Tf ($USERNAME)Tj ET
BT $X3 $Y_FONT TD /F1 $FONTSIZE Tf ($PASSWORD)Tj ET
BT $X5 $Y_FONT TD /F1 $FONTSIZE Tf ($COMMENT)Tj ET
$X0 $Y m $X8 $Y l S
EOF

	} done

	Y=$(( $Y - $Y_STEP ))
				# bottom/upper line + vertical lines
	cat <<EOF
$X0 $Y m $X8 $Y l S
$X0 $YSTART m $X8 $YSTART l S
$X0 $YSTART m $X0 $Y l S
$X2 $YSTART m $X2 $Y l S
$X4 $YSTART m $X4 $Y l S
$X6 $YSTART m $X6 $Y l S
$X8 $YSTART m $X8 $Y l S
EOF

	FONTSIZE=24
	XY="$X0 750"
	echo "BT $XY TD /F1 $FONTSIZE Tf (WLAN-Benutzerliste: $NAME ($RECORD Stueck))Tj ET"

	_log do $FUNC daemon info "[OK] $RECORD tickets"
}

_pdf_output_header()				# http://www.gnupdf.org/Introduction_to_PDF
{						# http://www.aivosto.com/vbtips/pdf-optimize2.html
	local bodysize_in_bytes="${1:-100}"	# http://search.cpan.org/~ftassin/PDF-Create-0.01/lib/PDF/Create.pm
	local fontname

	# http://en.wikipedia.org/wiki/Portable_Document_Format#Standard_Type_1_Fonts_.28Standard_14_Fonts.29
	# no need to embed: Times, Couries, Helvetica, Symbol, Zapf Dingbats
	case "$CONFIG_PROFILE" in
		liszt28*|schoeneck*)
			fontname='ArialNarrow'
		;;
		*)
			fontname='Times-Roman'
		;;
	esac

	# any changes to these objects must be reflected on
	# footer-xref-table, which is done in output_footer()
	cat <<EOF
%PDF-1.7

1 0 obj  % entry point
<<
  /Type /Catalog
  /Pages 2 0 R
>>
endobj

2 0 obj
<<
  /Type /Pages
  /MediaBox [ 0 0 595 842 ]
  /Count 1
  /Kids [ 3 0 R ]
>>
endobj

3 0 obj
<<
  /Type /Page
  /Parent 2 0 R
  /Resources <<
    /Font <<
      /F1 4 0 R
    >>
  >>
  /Contents 5 0 R
>>
endobj

4 0 obj
<<
  /Type /Font
  /Subtype /Type1
  /BaseFont /$fontname
>>
endobj

5 0 obj  % page content
<<
  /Length $bodysize_in_bytes
>>
stream
EOF
}

_pdf_object_byte_offset()
{
	local file="$1"
	local object="$2"		# e.g. '2' or ^'2 0 obj'$
	local byteoffset length

	# http://khkonsulting.com/2013/01/the-trouble-with-the-xref-table/
	# in vim we can see the decimal-byte-counter with
	# ESC + g + CTRL <g> (minus 1) when going to an
	# object start, e.g. '3 0 obj' having the coursor on '3'

	[ ${#object} = 1 ] && object="^$object 0 obj"

	# does not work with r39888: head -n -1
	# (suppress last line)
	# byteoffset=$( sed -n "/%PDF-/,/$object/p" "$file" | head -n -1 | wc -c )
	byteoffset=$(  sed -n "/%PDF-/,/$object/p" "$file" | wc -c )
	length="$(     sed -n "/%PDF-/,/$object/p" "$file" | tail -n1 )"
	byteoffset=$(( $byteoffset - ${#length} - 1 ))	# dont count last line with CR/LF

	printf "%010d" $byteoffset
}

_pdf_output_footer()
{
	local file="$1"
	local start_byteoffset="$(( $2 + 18 ))"	# length of body + header + adding 'endstream...' after body

	local generation_number='00000'		# all objects are new and never changed
	local object_used='n '
	local object_hidden='f '

	cat <<EOF
endstream
endobj

xref
0 6
0000000000 65535 $object_hidden
$( _pdf object_byte_offset "$file" 1 ) $generation_number $object_used
$( _pdf object_byte_offset "$file" 2 ) $generation_number $object_used
$( _pdf object_byte_offset "$file" 3 ) $generation_number $object_used
$( _pdf object_byte_offset "$file" 4 ) $generation_number $object_used
$( _pdf object_byte_offset "$file" 5 ) $generation_number $object_used
trailer
<<
  /Size 6
  /Root 1 0 R
>>
startxref
$start_byteoffset
%%EOF
EOF
}

_pdf_element()
{
	local type="$1"		# text, line, circle
	local option="$2"
	local type2="$3"	# font, thickness
	local option="$4"
	local type3="$5"	# "message", color, fontsize
	local option="$6"
}

_pdf_line()
{
	local x1="$1"
	local y1="$2"
	local x2="$3"
	local y2="$4"
	local thickness="$5"		# fixme!

	echo "$x1 $y1 m $x2 $y2 l S"
}

_pdf_output_a4marker_digest_body ()
{
	local list_login_id="$1"
	local func="pdf_output_a4marker_digest"
	local fontsize=12
	local head="WLAN-System $( _weblogin metadata_locationname ): Protokoll: 2 x 16 Etiketten - $( _system date humanreadable pretty | sed "s/'//" )"

	local i=0
	local X0="25"			# left
	local X8="570"			# right
	local xcenter="297"
	local marker_width="110"
	local x_marker_end_row1=$(( $X0 + $marker_width ))
	local x_marker_end_row2=$(( $xcenter + $marker_width ))

	local YSTART="815"
	local YSTEP="50"

	echo "$xcenter $YSTART m $xcenter 15 l S"		# fixme! use end-values of below loop for Y
	echo "$x_marker_end_row1 $YSTART m $x_marker_end_row1 15 l S"
	echo "$x_marker_end_row2 $YSTART m $x_marker_end_row2 15 l S"
	echo "$X0 $YSTART m $X0 15 l S"
	echo "$X8 $YSTART m $X8 15 l S"

	while [ $YSTART -gt 0 ]; do {

		if [ $i -eq 0 ]; then
			echo "BT $X0 $(( $YSTART + 3 )) TD /F1 $fontsize Tf ($head)Tj ET"
		else
			fontsize=8
			echo "BT $(( $X0 + 20 )) $(( $YSTART + 20 )) TD /F1 $fontsize Tf (Etikett $i)Tj ET"
			echo "BT $(( $xcenter + 20 )) $(( $YSTART + 20 )) TD /F1 $fontsize Tf (Etikett $(( $i + 16 )))Tj ET"
			fontsize=6
			local text="Zimmernummer / Name des Gastes / Buchungscode"
			echo "BT $(( $x_marker_end_row1 + 5 )) $(( $YSTART + 2 )) TD /F1 $fontsize Tf ($text)Tj ET"
			echo "BT $(( $x_marker_end_row2 + 5 )) $(( $YSTART + 2 )) TD /F1 $fontsize Tf ($text)Tj ET"
		fi

		i=$(( $i + 1 ))
		echo "$X0 $YSTART m $X8 $YSTART l S"
		YSTART=$(( $YSTART - $YSTEP ))
	} done
}

_pdf_output_a4marker_body ()		# SENS: fits for 2x32 labels 35.6x16.9mm L4732 "Zweckform" organised to 5 rows with 16 cols (center row leaves emtpy)
{
	local FUNC="pdf_output_a4marker_body"
	local LIST_LOGIN_ID="$1"
	local FONTSIZE=18
	local username_fontsize printertype
	local NUMBER I N N1 N2 ID USERNAME PASSWORD XCOL1 XCOL2 XCOL3 XCOL4 XCOL5 YCOL

	case "$CONFIG_PROFILE" in
		hotello-H09*|hotello-K80*)
			printertype=1
		;;
		liszt28*|hotello*|schoeneck*)
			printertype=2		# BROTHER-DCP130C (inkjet?)
		;;
		ejbw*)
			printertype=3
		;;
		*)
			printertype=1		# all (laser)
		;;
	esac

	tenth()		# SENS: 123 -> 12.3
	{
		local VALUE="$1"

		echo "$(( $VALUE / 10 )).$(( $VALUE % 10 ))"
	}

	xcol()			# pdf-coord-system starts in lower/left border with 0/0
	{
		local xcolumn="$1"
		local x

		case "$printertype" in
			1|3)
				xstart="304"		# was 300
				xoffset="1130"
			;;
			*)
				xstart="309"		# 30.9 points
				xoffset="1086"		# 10.86 points
			;;
		esac

		x=$(( $xstart + ( $xoffset * ( $xcolumn - 1 ) ) ))

		tenth $x
	}

	yrow ()			# pdf-coord-system starts in lower/left border with 0/0
	{
		local yrow="$1"
		local option="$2"		# keyword "nextline"
		local ybegin yoffset y
		local yoffset_nextline="160"	# 16.0 points

		case "$printertype" in		# fixme! decide all values only once
			1)
				ybegin="500"
				yoffset="500"
			;;
			3)
				ybegin="420"
				yoffset="500"
			;;
			*)
				ybegin="640"	# 64.0 points
				yoffset="479"	# 47.9 points
			;;
		esac

		y=$(( $ybegin + ( $yoffset * ( $yrow - 1 ) ) ))

		[ -n "$option" ] && {
			y=$(( $y - $yoffset_nextline ))
		}

		tenth $y
	}

	XCOL1=$( xcol 1 )
	XCOL2=$( xcol 2 )
	XCOL3=$( xcol 3 )
	XCOL4=$( xcol 4 )
	XCOL5=$( xcol 5 )
	I=17			# counter for right yrow (increasing)

	for ID in $LIST_LOGIN_ID; do {

		NUMBER=$(( ${NUMBER:-0} + 1 ))

		if [ $NUMBER -gt 16 ]; then		# right yrow
			I=$(( $I - 1 ))
			N=$I

			XCOL1=$XCOL4
			XCOL2=$XCOL5
		else
			N=$(( $I - $NUMBER ))		# left yrow
		fi

		YROW1="$( yrow $N )"
		YROW2="$( yrow $N nextline )"

		eval $( _db user login show $ID "USERNAME PASSWORD" )

		if [ ${#USERNAME} -gt 12 ]; then	# fixme! make a generic function "fontsize,string,space()"
			username_fontsize="12"
		else
			username_fontsize="$FONTSIZE"
		fi

		cat <<EOF
BT $XCOL1 $YROW1 TD /F1 $username_fontsize Tf ($USERNAME)Tj ET
BT $XCOL1 $YROW2 TD /F1 $FONTSIZE Tf ($PASSWORD)Tj ET
BT $XCOL2 $YROW1 TD /F1 $username_fontsize Tf ($USERNAME)Tj ET
BT $XCOL2 $YROW2 TD /F1 $FONTSIZE Tf ($PASSWORD)Tj ET
EOF

	} done

	FONTSIZE=12
	YROW1=$( yrow 15 )
	YROW2=$( yrow 15 nextline )
	eval $( _db user login show $ID "PROFILE_ID" )
	eval $( _db user profile show $PROFILE_ID "NAME" )

	cat <<EOF
BT $XCOL3 $YROW1 TD /F1 $FONTSIZE Tf ($NUMBER x $NAME )Tj ET
BT $XCOL3 $YROW2 TD /F1 $FONTSIZE Tf ($( _system date humanreadable pretty | sed "s/'//" ))Tj ET
EOF

	YROW1=$( yrow 2 )
	YROW2=$( yrow 2 nextline )

	cat <<EOF
BT $XCOL3 $YROW1 TD /F1 $FONTSIZE Tf (Standard-Etiketten)Tj ET
BT $XCOL3 $YROW2 TD /F1 $FONTSIZE Tf ("Zweckform" L4732)Tj ET
EOF

	_log do $FUNC daemon info "[OK] $NUMBER tickets"
}

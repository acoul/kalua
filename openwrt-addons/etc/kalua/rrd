#!/bin/sh

_rrd_setup()
{
	local option="$1"			# 'keep_database'
	local file='/tmp/datafile.rrd'
	local interval=60			# [sec]
	local maxwait=$(( interval * 2 ))	# [sec] writes 'unknown' into database after this time
	local minmax_unlimited='U:U'		# allow all values, do not limit min or max
	local minmax_100mbit='0:12500000'
	local minmax_100mbit_packets='0:12500'

	[ -e "$file" ] && {
		if [ "$option" = 'keep_database' ]; then
			return 0
		else
			rm "$file"
		fi
	}

	_log it setup daemon info "initial setup of $file"

	# DS  = Data Source
	# RRA = Round Robin Archive
	# datasource_type = DERIVE|COUNTER|ABSOLUTE|GAUGE - see https://collectd.org/wiki/index.php/Data_source

	# TODO: rrdtool fetch /tmp/datafile.rrd AVERAGE

	rrdtool create "$file" \
		DS:upload_packets:COUNTER:${maxwait}:$minmax_100mbit_packets \
		DS:upload_bytes:COUNTER:${maxwait}:$minmax_100mbit \
		DS:download_packets:COUNTER:${maxwait}:$minmax_100mbit_packets \
		DS:download_bytes:COUNTER:${maxwait}:$minmax_100mbit \
		DS:wifi_stations:GAUGE:${maxwait}:$minmax_unlimited \
		DS:different_users:GAUGE:${maxwait}:$minmax_unlimited \
		DS:tcp:GAUGE:${maxwait}:$minmax_unlimited \
		DS:udp:GAUGE:${maxwait}:$minmax_unlimited \
		DS:signal:GAUGE:${maxwait}:$minmax_unlimited \
			--step $interval \
			RRA:AVERAGE:0.5:1:1440
#			RRA:AVERAGE:0.5:4:3600 \
#			RRA:AVERAGE:0.5:24:3600
}

_rrd_update()
{
	local force_station_mac="$1"	# <empty> or <mac> or 'all'

	local funcname='rrd_update'
	local file='/tmp/datafile.rrd'
	local up_packets=0 up_bytes=0 down_packets=0 down_bytes=0
	local stations=0 users=0 udp=0 tcp=0 signal=0 iw_rc=0
	local time_now line mac

	[ -e "$file" ] || return 0

# FIXME!
#	[ -e "/tmp/STATS_FORWARD" ] && {	# rrd_needed() set this if needed
#		local stats_old
#		read -r stats_old <"/tmp/STATS_FORWARD"
#		[ "$stats_old" = "${up_packets}:${down_packets}" ] && {
#			echo "ALERT: no_forward $( date ) - load: $LOAD - up: $UP stats: $stats_old" >>$PERMLOG
#		}
#		echo "${up_packets}:${down_packets}" >"/tmp/STATS_FORWARD"
#	}

	# FIXME! we should stick to 'longshot-mode' if any and not change to 'WAN' if e.g. a 2nd station pops up
	for mac in /sys/kernel/debug/ieee80211/phy0/netdev:$WIFIDEV/stations/*; do stations=$(( stations + 1 )); done
	case "$mac" in *'*') stations=0 ;; esac

	for mac in /tmp/vds_user_*; do users=$(( users + 1 )); done
	case "$mac" in *'*') users=0 ;; esac

	# longshot-mode
	if [ $stations -eq 1 -o -n "$force_station_mac" ]; then
		[ -e "$TMPDIR/rrd_mode_longshot" ] || touch "$TMPDIR/rrd_mode_longshot"

		if   [ "$force_station_mac" = 'all' ]; then
			explode $( iw dev "$WIFIDEV" station dump || echo "iw_rc=$?" ) was_empty
		elif [ -n "$force_station_mac" ]; then
			explode $( iw dev "$WIFIDEV" station get "$force_station_mac" || echo "iw_rc=$?" ) was_empty
		else
			explode $( iw dev "$WIFIDEV" station dump || echo "iw_rc=$?" ) was_empty
		fi

		case "$1" in
			'iw_rc='*)
				eval $1
				_log it $funcname daemon alert \
					"[ERR] iw: $iw_rc, stations: $stations force_station_mac: $force_station_mac"
			;;
		esac

		line="$*"
		shift 7

		# FIXME! maybe we should add e.g. 'tx retries:' to get the REAL air-pollution or at least graph it
		while [ -n "$2" ]; do {
			shift

			case "$1 $2" in
				'rx bytes:')
					up_bytes=$(( up_bytes + $3 ))
					shift 2
				;;
				'rx packets:')
					up_packets=$(( up_packets + $3 ))
					shift 2
				;;
				'tx bytes:')
					down_bytes=$(( down_bytes + $3 ))
					shift 2
				;;
				'tx packets:')
					down_packets=$(( down_packets + $3 ))
					shift 2
				;;
				'signal avg:')
					# e.g.
					# signal avg:  -70 dBm
					# signal avg:  -50 [-60, -54, -53] dBm
					signal=$(( signal + ${3:-0} ))
					[ "$force_station_mac" = 'all' ] || {
						echo "$signal" >"$TMPDIR/station_signal"

						case "$4" in
							'['*)
								echo "${*%%dBm*}" >"$TMPDIR/station_signal.debug"
							;;
						esac

						break
					}
				;;
			esac
		} done

		if [ $signal -eq 0 ]; then
			signal='U'	# unknown value
		else
			# average value of multiple stations - TODO: senseless?
			divisor_valid "$stations" || stations=1
			signal=$(( signal / stations ))		# divisor_valid
		fi
	else
		# e.g. WAN-interface
		explode $( $IPT -nxvL FORWARD 2 ) 0
		up_packets=$1
		up_bytes=$2

		explode $( $IPT -nxvL FORWARD 1 ) 0
		down_packets=$1
		down_bytes=$2
	fi

	# TODO: testcase - a large conntrack file, e.g:
	# ipv4 2 tcp  6 3521 ESTABLISHED src=10.63.23.105 dst=199.16.156.40 sport=52797 dport=443 packets=7 bytes=1452 \
	#                src=199.16.156.40 dst=87.171.3.251 sport=443 dport=52797 packets=8 bytes=1129 [ASSURED] use=2
	while read -r line; do {
		case "$line" in
			*' tcp'*)
				tcp=$(( tcp + 1 ))
			;;
			*' udp'*)
				udp=$(( udp + 1 ))
			;;
		esac
	} done <'/proc/net/nf_conntrack'

	time_now='N'	# RRD special
	line="$time_now:$up_packets:$up_bytes:$down_packets:$down_bytes:$stations:$users:$tcp:$udp:$signal"

	rrdtool update "$file" "$line" || {
		_log it $funcname daemon alert "error $?: rrdtool update $file $line"
	}
}

_rrd_show()
{
	local funcname='rrd_show'
	local duration="$1"		# e.g. 15min, 4h
	local file="${2:-/tmp/datafile.rrd}"

	[ -e "$file" ] || return 1

	if [ -z "$duration" ]; then
		# rrdtool first is not always correct:
		duration="$( rrdtool fetch "$file" 'AVERAGE' | grep -m1 ':  0.' | cut -d':' -f1 )"
		duration=$(( $( _system date unixtime ) - duration ))
		duration=$(( duration / 60 ))
	else
		# our database is not bigger, see rrd_setup()
		[ $duration -gt 1440 ] && duration=1440
	fi
	isnumber $duration && duration="${duration}min"

	local webfile='/www/traffic.png'
	local output='/tmp/graph.png'
	local date="$( _system date humanreadable pretty )"
	local location="$( _weblogin metadata_locationname )"
	local watermark forward_type default_route_dev devname title factor_different_users
	local typical_average_packetsize=350
	local label="bytes/sec & users/stations (1 = 100k) & TCP/UDP-conntrack (1000 = 1M)"	# Y-axis
	local alpha=88
	local end='\j'

	if [ -e "$TMPDIR/rrd_mode_longshot" ]; then
		forward_type="longshot-traffic $WIFIDEV"
		factor_different_users=1000
	else
		explode $( ip route list exact '0.0.0.0/0' )
		shift 2
		for default_route_dev in "$@"; do _net dev_is_valid "$default_route_dev" && break; done

		read -r devname <"/var/run/interfaces/dev2name_$default_route_dev" || devname="$default_route_dev"
		forward_type="$devname-traffic $default_route_dev"
		factor_different_users=10000
	fi

	title="$location: forwarded $forward_type host-$NODENUMBER: $HOSTNAME - time: $date (-$duration)"

	case "$( rrdtool --version | head -n1 )" in
		*'1.0.50'*|*'1.0.'*)
			# elements not supported
			unset watermark
			unset alpha
		;;
		*'1.2.30'*|*'1.2.'*)
			watermark='kalua-framework'
		;;
	esac

	local color1='#ff6600'		# upload_packets		- orange
	local color2="#9999ff"		# upload_bytes/area		- grey
	local color3='#00cc00'		# download_packets		- green
	local color4="#ffCC00${alpha}"	# download_bytes/area		- yellow
	local color5='#ff9999'		# connected wifi_stations	- pink
	local color6='#0099ff'		# users_overall(login ok/valid)	- babyblue
	local color7='#663300'		# tcp / conntrack		- brown
	local color8='#cc0066'		# udp / conntrack		- violett
	local color9='#ff0000'		# signal			- red

	# TODO: comments? e.g.: COMMENT:"Total number of users seen"

	# suppress output of image-size
	rrdtool >/dev/null graph "$output"				\
		--imgformat PNG --width 900 --height 600		\
		--start -$duration					\
		--vertical-label "$label"				\
		--title "$title" ${watermark+--watermark} $watermark 	\
		DEF:upload_packets=${file}:upload_packets:AVERAGE	\
			CDEF:value1=upload_packets,-$typical_average_packetsize,* \
		DEF:upload_bytes=${file}:upload_bytes:AVERAGE		\
			CDEF:value2=upload_bytes,-1,*			\
		DEF:download_packets=${file}:download_packets:AVERAGE	\
			CDEF:value3=download_packets,$typical_average_packetsize,* \
		DEF:download_bytes=${file}:download_bytes:AVERAGE	\
		DEF:wifi_stations=${file}:wifi_stations:AVERAGE		\
			CDEF:value5=wifi_stations,100000,*		\
		DEF:different_users=${file}:different_users:AVERAGE	\
			CDEF:value6=different_users,$factor_different_users,*	\
		DEF:tcp=${file}:tcp:AVERAGE				\
			CDEF:value7=tcp,1000,*				\
		DEF:udp=${file}:udp:AVERAGE				\
			CDEF:value8=udp,1000,*				\
		DEF:signal=${file}:signal:AVERAGE			\
			CDEF:value9=signal,-10000,*			\
		LINE1:value1${color1}:'upload [packets]  '		\
			GPRINT:value1:LAST:"current\:%8.2lf %s"		\
			GPRINT:value1:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:value1:MIN:"min\:%8.2lf %s"		\
			GPRINT:value1:MAX:"max\:%8.2lf %s$end"		\
		AREA:value2${color2}:'upload [bytes]    '		\
			GPRINT:value2:LAST:"current\:%8.2lf %s"		\
			GPRINT:value2:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:value2:MIN:"min\:%8.2lf %s"		\
			GPRINT:value2:MAX:"max\:%8.2lf %s$end"		\
		LINE1:value3${color3}:'download [packets]'		\
			GPRINT:value3:LAST:"current\:%8.2lf %s"		\
			GPRINT:value3:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:value3:MIN:"min\:%8.2lf %s"		\
			GPRINT:value3:MAX:"max\:%8.2lf %s$end"		\
		AREA:download_bytes${color4}:'download [bytes]  '	\
			GPRINT:download_bytes:LAST:"current\:%8.2lf %s"	\
			GPRINT:download_bytes:AVERAGE:"avg\:%8.2lf %s"	\
			GPRINT:download_bytes:MIN:"min\:%8.2lf %s"	\
			GPRINT:download_bytes:MAX:"max\:%8.2lf %s$end"	\
		LINE2:value5${color5}:'wifi_stations     '		\
			GPRINT:value5:LAST:"current\:%8.2lf %s"		\
			GPRINT:value5:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:value5:MIN:"min\:%8.2lf %s"		\
			GPRINT:value5:MAX:"max\:%8.2lf %s$end"		\
		LINE2:value6${color6}:'users_logged_in   '		\
			GPRINT:value6:LAST:"current\:%8.2lf %s"		\
			GPRINT:value6:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:value6:MIN:"min\:%8.2lf %s"		\
			GPRINT:value6:MAX:"max\:%8.2lf %s$end"		\
		LINE1:value7${color7}:'TCP-connections   '		\
			GPRINT:value7:LAST:"current\:%8.2lf %s"		\
			GPRINT:value7:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:value7:MIN:"min\:%8.2lf %s"		\
			GPRINT:value7:MAX:"max\:%8.2lf %s$end"		\
		LINE1:value8${color8}:'UDP-connections   '		\
			GPRINT:value8:LAST:"current\:%8.2lf %s"		\
			GPRINT:value8:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:value8:MIN:"min\:%8.2lf %s"		\
			GPRINT:value8:MAX:"max\:%8.2lf %s$end"		\
		LINE2:value9${color9}:'signal [dBm]      '		\
			GPRINT:value9:LAST:"current\:%8.2lf %s"		\
			GPRINT:value9:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:value9:MIN:"min\:%8.2lf %s"		\
			GPRINT:value9:MAX:"max\:%8.2lf %s$end" || {
				_log it $funcname daemon alert "error $? during rrdtool graph"
				return 1
			}

	[ -h "$webfile" ] || ln -s "$output" "$webfile"
	_log it $funcname daemon debug "wrote: '$output', look at http://$LANADR/$( basename "$webfile" )"
}

_rrd_upload()
{
	local funcname='rrd_upload'
	local duration="$1"
	local file='/tmp/graph.png'
	local date="$( _system date humanreadable | sed 's/:/./g' )"
	local dest="$( uci get system.@vds[0].server )../media/traffic_${HOSTNAME}_${date}.png"
	local try=30

	_rrd show "$duration" || return 1
	pidof scp >/dev/null && return 1

	while [ $try -gt 0 ]; do {
		_log it $funcname daemon info "uploading '$file' to '$dest'"
		scp -i "$( _ssh key_public_fingerprint_get keyfilename )" "$file" "$dest" && break
		sleep $try
		try=$(( try - 1 ))
	} done
}

_rrd_needed()
{
	command -v rrdtool >/dev/null || return 1
	[ -n "$LOWMEM" ] && return 1

	_wifi longshot_name >/dev/null && return 0
	test $( _system ram_size ) -gt 32768 && return 0

	case "$CONFIG_PROFILE" in
		marinabh*|amalienhof*|limona*|olympia*|aschbach*)
			return 0
		;;
		liszt28*)
			touch '/tmp/STATS_FORWARD'
		;;
	esac

	_net local_inet_offer >/dev/null
}

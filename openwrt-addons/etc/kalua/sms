#!/bin/sh

_sms_send ()			# SENSE: wrapper for SMS-sending independent from service
{				#	- collect all relevant data
				#	- write and process queue-file line by line
				#	- call service-specific function
				#	- when something fails, use another service
				#	this should be executed by cron every minute (to process queue-file)
	local   FUNC="sms_send"
	local   DEST="$1"					# ARG1: string (name or number)
	local   TEXT="$2"					# ARG2: string (text to send, codepage ISO_8859-1)
	local NOPOST="$3"					# ARG3: string (optional, keyword: nopost)

	local   USER="${4:-$( uci -q get sms.@sms[0].username )}"	# string // fixme! same username/pass for every provider?
	local   PASS="${5:-$( uci -q get sms.@sms[0].password )}"	# string

	local   POST="${6:-$( uci -q get sms.@sms[0].post )}"	# string (something like: "from klaus [03643/110]" )
	local NUMBER

	[ -z "$USER" ] && {
		_log it $FUNC user crit "username not given - aborting: $TEXT"
		return 1
	}

	[ -z "$PASS" ] && {
		_log it $FUNC user crit "password not given - aborting: $TEXT"
		return 1
	}

	[ -z "$TEXT" ] && {
		_log it $FUNC user crit "text not given - aborting: $TEXT"
		return 1
	}

	[ -n "$NOPOST" ] && POST=

	NUMBER="$( _phone book_name2number "$DEST" )" || {			# can return a comma-separated list of numbers
		_log it $FUNC user notice "wrong name/number - aborting: $TEXT"
		return 1
	}

	[ -n "$POST" ] && {
		TEXT="$TEXT $POST @$( date +%H:%M)uhr"		# append own brand + time
	}

	_log it $FUNC user debug "to '$DEST' = $NUMBER, ${#TEXT} chars: '$TEXT'"

	_sms send_sms77 "$USER" "$PASS" "$( _sanitizer run "$NUMBER" urlvalue )" "$( _sanitizer run "$TEXT" urlvalue )" || {
		_log it $FUNC user info "send failed - respawning sms to '$DEST' = $NUMBER, ${#TEXT} chars: '$TEXT'"

		# fixme! this does not work, if args are given directly (e.g. pass)
		echo >>$SCHEDULER_IMPORTANT "_sms send \"$NUMBER\" \"$TEXT\" no_post"

		return 1
	}

	_log it $FUNC user info "[OK] to '$DEST' = $NUMBER, ${#TEXT} chars: '$TEXT'"
}

_sms_send_sms77()
{
	local funcname='sms_send_sms77'
	local user="$1"
	local pass="$2"
	local number="$3"
	local text="$4"			# must be URL encoded

	local deliver_type='quality'	# basicplus = 0.029 | quality = 0.069 | direct = 0.089 Euro - FIXME! needs abstraction
	local trash out rc o from last_action uptime
	local file_last_action="/tmp/$funcname"
	local url="http://www.sms77.de/gateway/?type=$deliver_type"

	# pause between several messages, otherwise "error 402"
	uptime=$( _system uptime sec )
	read -r last_action 2>/dev/null <"$file_last_action" || last_action=0
	echo $(( uptime + 60 )) >"$file_last_action"
	[ $(( uptime - last_action )) -lt 60 ] && {
		_log sleep $funcname 60 step 10
	}

	case "$deliver_type" in
		'quality')
			[ ${#text} -gt 160 ] && {
				trash="$( echo "$text" | cut -b 161-999 )"
				text="$(  echo "$text" | cut -b 1-160 )"		# FIXME! respect encoding borders, e.g. %20 -> %2 does not work
				_log it $funcname daemon debug "shortened text, trash was: '$trash'"
			}

			from="$( _weblogin metadata_locationname )"
			from="$( _sanitizer run "$from" alphanum length:11 urlvalue )"

			url="${url}&from=${from}"
		;;
	esac

	_log it $funcname daemon debug "[${#text} chars] ${url}&u=${user}&p=${pass}&to=${number}&text=${text}"

	out="$( _curl it "${url}&u=${user}&p=${pass}&to=${number}&text=${text}" '' '' "$user" "$pass" )"
	rc=$?

	[ $rc -eq 0 ] || {
		case "$out" in
			# http://www.sms77.de/api.pdf
			# not implemented:
			# 101 = "Sending failed at least to one recipient"
			# 306 = "Sending ID/Nummer is wrong"
			100) o='OK - SMS was send' ;;		# sometimes wget() returns 1
		        201) o='error in sendername or name too long' ;;
		        202) o="wrong recipient number" ;;
		    300|900) o="username/pass wrong or unset" ;;
			301) o="recipient unset" ;;
			304) o="type unset" ;;
			305) o="text unset" ;;
			307) o="url unset" ;;
			400) o="type invalid" ;;
			401) o="text too long" ;;
			902) o="API deactivated!" ;;
			903) o="serverip wrong" ;;
			500) o="no credits available" ;;
			600) o="carrier transfer failed" ;;
			700) o="undefined error" ;;
			801) o="logfile unset" ;;
			802) o="logfile not exist" ;;
			803) o="ring tone undefined" ;;
			902) o="account deactivated" ;;
			903) o="server IP wrong" ;;

			402|*)	# reload mistake, try again
				_log it $funcname user crit "wget-returncode: '$rc' - sms77-answer: '$out' - something went wrong"
				return 1	# send again
			;;
		esac

		_log it $funcname user info "wget-returncode: '$rc' - sms77-answer: '$out' ($o)"
	}
}

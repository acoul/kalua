#!/bin/sh

_software_show_packages_recent()
{
	local option="$1"	# <empty> or package_name
	local line package time_installed diff humanreadable lookaround
	local time_now="$( _system date unixtime )"
	local time_built="$( $OPKG status kernel | grep ^"Installed-Time:" | cut -d' ' -f2 )"

	$OPKG status $option | while read -r line; do {
		case "$line" in
			'Package:'*)
				package="${line#*: }"
			;;
			'Installed-Time:'*)
				time_installed="${line#*: }"
				diff=$(( time_now - time_installed ))
				humanreadable="$( _stopwatch seconds2humanreadable "$diff" )"
				lookaround=$(( time_installed - time_built ))
				[ $lookaround -gt -60 -a $lookaround -lt 60 ] && {
					humanreadable="$humanreadable = builtin"
				}

				echo "$time_installed - $diff sec ($humanreadable) - $package"
			;;
		esac
	} done | sort
}

_software_make_free_space()
{
	local funcname='software_make_free_space'
	local space_wish="$1"		# [kilobyte]
	local option="$2"		# <empty> or 'force'
	local free package

	[ $( _system flash_free ) -gt $space_wish ] && return

	for package in $( _software show_installed_backwards ); do {
		free="$( _system flash_free )"
		_log it $funcname daemon info "now $free kb (wish: $space_wish kb)"
		[ $free -gt $space_wish ] && break

		[ "$option" = 'force' ] || {
			_software is_essential "$package" && continue
			_software show_packages_recent "$package" | grep '= builtin'$ && continue
		}

		_log it $funcname daemon alert "removing '$package'"
		_software package_remove "$package"
	} done

	test $free -gt $space_wish
}

_software_is_essential()
{
	local package="$1"

	case "$package" in
		sshpubkeys|mysettings|mydesign|fff-adblock-list)
			return 0
		;;
		*)
			# builtin-backed packages cannot/should not be removed
			_software show_packages_recent "$package" | grep -q "= builtin) - $package"$
		;;
	esac
}

_software_show_installed ()
{
	local LINE

	$OPKG status |
	 sed -ne 's/^Package: \(.*\)/\1/p' |
	  while read -r LINE; do {
	  	echo -n "$LINE "
	  } done
}

_software_show_installed_backwards ()	# OUT1: list
{
	local LINE

	$OPKG status |
	 sed -n 's/^Package: \(.*\)/\1/p' |
	  sed '1!G;h;$!d' |
	   while read -r LINE; do {
	   	echo -n "$LINE "
	   } done
}

_software_repos_list_files ()	# OUT1: list
{
	cat /usr/lib/*pkg/lists/* 2>/dev/null || {
		echo
		return 1
	}
}

_software_repos_update ()	# fixme! no update during low flash?
{
	local FILE_LAST_FETCH="/tmp/software_last_repository_update"
	local UNIXTIME_UPDATE=0
	local UNIXTIME_NOW="$( _system date unixtime )"

	  if [ $( _software repos_list_files | wc -l ) -lt 100 ]; then
	  	UNIXTIME_UPDATE=0
	elif [ -e $FILE_LAST_FETCH ]; then
		UNIXTIME_UPDATE="$( cat $FILE_LAST_FETCH )"
	else
		UNIXTIME_UPDATE=0
	fi

	[ $(( ${UNIXTIME_NOW:-0} - ${UNIXTIME_UPDATE:-0} )) -gt 1800 ] && {
		$OPKG update
		echo $UNIXTIME_NOW >$FILE_LAST_FETCH
	}
}

_software_package_status()
{
	local name="$1"

	$OPKG status "$name"
}

_software_package_info()
{
	local name="$1"

	$OPKG info "$name"
}

_software_package_files()
{
	local name="$1"

	$OPKG files "$name"
}

_software_package_remove()
{
	local funcname='software_package_remove'
	local name="$1"

	_log it $funcname daemon debug "'$name'"
	$OPKG remove "$name"
	sync				# sometimes it needs some time to really free the jffs2-space
}

_software_package_is_installed ()
{
	local PACKAGE="$1"
	local OUT="$( $OPKG status "$PACKAGE" | fgrep "Status:" )"

	case "$OUT" in
		"Status: install ok installed") : ;;
		"Status: install hold installed") : ;;
		"Status: install user installed") : ;;
		*) return 1 ;;
	esac
}

_software_package_is_not_installed()
{
	local package="$1"

	if _software package_is_installed "$package" ;then
		return 1
	else
		return 0
	fi
}

_software_packages_install ()
{
	local PACKAGE_NAME="$1"

	_software package_install		$PACKAGE_NAME	# fixme! better names for package_install <-> packages_install
	_software package_is_installed		$PACKAGE_NAME || return 1

	return 0
}

_software_package_version ()
{
	local PACKAGE_NAME="$1"
	local VERSION="$( $OPKG status "$PACKAGE_NAME" | sed -n 's/^Version: \(.*\)/\1/p' | tail -n1 )"

	[ -n "$VERSION" ] && {
		echo $VERSION
		return
	}

	return 1
}

_software_package_newer_version ()	# compare the values and return the newer one
{
	local VERSION_A="$1"
	local VERSION_B="$2"

	  if [ "$( _software version_normalize $VERSION_A )" -gt "$( _software version_normalize $VERSION_B )" ]; then

		echo -n "$VERSION_A"

	elif [ "$( _software version_normalize $VERSION_B )" -gt "$( _software version_normalize $VERSION_A )" ]; then

		echo -n "$VERSION_B"
	fi
}

_software_version_normalize ()
{
	local VERSION="$1"
	local X Y Z N

	# bash can't calculate with floats, so we normalize to 100.000.000, e.g.:
	#
	# v  X.  Y.  Z
	# v  1.222.333 -> 001222333 (2 dots)
	# v111.222.333 -> 111222333 (2 dots)
	# v  4.222     -> 004222000 (1 dot)
	# v  5         ->   5000000 (0 dots)

	local DOTS="$( echo -n "$VERSION" | sed 's/[^\.]//g' )"

	case ${#DOTS} in
		0)
			X="$VERSION"
		;;
		1)
			X=${VERSION%[.]*}
			Y=${VERSION#*.}
		;;
		2)
			N=${VERSION%[.]*}
			X=${N%[.]*}

			N=${VERSION#*.}
			Y=${N%[.]*}
			Z=${N#*.}
		;;
	esac

	for N in "$X" "$Y" "$Z"; do {
		case ${#N} in
			0)
				echo -n "000"
			;;
			1)
				echo -n "00$N"
			;;
			2)
				echo -n "0$N"
			;;
			*)
				echo -n "${N:=000}"
			;;
		esac
	} done
}

_software_package_is_installed_lowlevel ()	# OUT1: 0 = not_installed , 1 = installed , 2 = not in repo
{
	local PACKAGE="$1"
	local FUNC="software_package_is_installed_lowlevel"

	_software package_is_installed "$PACKAGE" && {
		echo -n 1
		_log it $FUNC daemon info "'$PACKAGE' installed ok"
		return 0
	}

	$OPKG list | grep -q ^"$PACKAGE " && {
		echo -n 0
		_log it $FUNC daemon info "'$PACKAGE' not installed, but listed in repo"
		return 0
	}

	echo -n 2
	_log it $FUNC daemon info "'$PACKAGE' not in repository this time"
}

_software_package_install()
{
	local funcname='software_package_install'
	local PACKAGE="$1"
	local KEYWORD="$2"	# noautorepoupdate
	local SLEEP=120

	bool_true 'system.@system[0].noswinstall' && {
		_log it $funcname daemon info "[OK] forbidden by user - see 'system.@system[0].noswinstall'"
		return 0
	}

	[ -e "/tmp/$funcname" ] && rm "/tmp/$funcname"
	while true; do {
		_watch counter "/tmp/$funcname" increment 1 max 100 || return 0
		_net inet_seems_stable && break
		_log it $funcname daemon debug "no default-route found, waiting $SLEEP seconds"
		sleep $SLEEP
	} done

	_log it $funcname daemon info "installing '$PACKAGE' (free space: $( _system flash_free ) Kilobyte)"
	[ -z "$KEYWORD" ] && _software repos_update

	if [ -e '/bin/opkg' ]; then
		do_install()
		{
			$OPKG remove $PACKAGE
			$OPKG install $PACKAGE
		}
	else
		do_install()
		{
			if $OPKG 2>/dev/null | grep -q 'force-defaults'; then
				# no idea when this was removed
				$OPKG --force-defaults install $PACKAGE
			else
				$OPKG --force-maintainer install $PACKAGE
			fi
		}
	fi

	if do_install ; then
		_log it $funcname daemon info "'$PACKAGE' install seems fine (free space: $( _system flash_free ) Kilobyte)"

		case "$PACKAGE" in			# FIXME! move these into hook()
			loginutils)
				[ "$( _software package_is_installed_lowlevel $PACKAGE )" = "1" ] && {
					rm -f /sbin/halt
					ln -s /rom/sbin/reboot /sbin/reboot
				}
			;;
			freifunk-pppoecd-de)
				[ "$( _software package_is_installed_lowlevel $PACKAGE )" = "1" ] && {
					_system reboot_safe "$PACKAGE was installed"	# fixme! maybe just 'ifup wan' ?
				}
			;;
			kmod-ide)
				[ "$( _software package_is_installed_lowlevel $PACKAGE )" = "1" ] && {
					_system reboot_safe "$PACKAGE was installed"	# fixme! maybe just reload modules?
				}
			;;
			dropbear)
				[ "$( _software package_is_installed_lowlevel $PACKAGE )" = "1" ] && {
					_ssh start
					pidof dropbear >/dev/null && {
						pidof telnetd >/dev/null && {
							killall telnetd
						}
					}
				}
			;;
			*fff-adblock-list*)
				[ "$( _software package_is_installed_lowlevel "fff-adblock-list" )" = "1" ] && {
					/etc/init.d/S43ethers_fff+ start
				}
			;;
		esac

		return 0
	else
		_log it $funcname daemon info "'$PACKAGE' install failed (free space: $( _system flash_free ) Kilobyte)"
		return 1

		# fixme! do cleanup, e.g. remove '/tmp/mydesign_0.2_29132.ipk'
	fi
}

_software_opkg_raminstaller()
{
	# if the real 'opkg' is not installed/included, autodownload and call it with all args
	local funcname='software_opkg_raminstaller'
	local fake='/tmp/bin/opkg'
	local arch url file

	[ $OPENWRT_REV -eq 0 ] && {
		_log it $funcname daemon info "ignoring call: $*"
		return 1
	}

	[ -e "$fake" ] || {
		case "$( _system clib )" in
			'musl')
				# DISTRIB_TARGET='ramips/mt7620'
				. /etc/openwrt_release
				url="http://downloads.openwrt.org/snapshots/trunk/$DISTRIB_TARGET/packages/base"
			;;
			*)
				arch="$( _system architecture )"
				url="http://downloads.openwrt.org/barrier_breaker/14.07/$arch/generic/packages/base"
			;;
		esac

		_log it $funcname daemon info "fetching filename from $url"
		local file="$( wget -O - "$url" | fgrep 'opkg_' | cut -d'"' -f2 )"

		url="$url/$file"
		_log it $funcname daemon info "fetching package from '$url'"

		(
			cd /tmp || return
			wget -O 'opkg.ipk' "$url"
			tar xzf 'opkg.ipk'
			rm 'debian-binary' 'control.tar.gz' 'opkg.ipk'
			tar xvzf 'data.tar.gz' ./bin/opkg
			rm 'data.tar.gz'
		)
	}

	# TODO: this will fail, e.g. if the binary uses another clib than the router (musl VS uclibc)
	# if something is wrong with the binary, install a stub which simulates OK
	$fake -v | grep -q ^'opkg version' || {
		{
			echo '#!/bin/sh'
			echo '. /tmp/loader'
			echo "_log it $funcname daemon info 'please check binary from $url'"
			echo 'true'
		} >"$fake"

		chmod +x "$fake"
	}

	# if on debian, it report via 'file opkg' -> 'corrupted section header size'
	$fake "$@"
}

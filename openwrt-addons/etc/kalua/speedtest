#!/bin/sh

# problem: neigh shows 1 hop over wireless, but it uses the wired path
#
# ip route add 10.63.2.1 via 10.63.121.1 dev wlan0
# _speedtest do 10.63.121.1 10.63.2.1 tcpupload
# ip route del 10.63.2.1 via 10.63.121.1 dev wlan0
#
# ip route get 10.63.2.1
# 10.63.2.1 via 10.63.2.33 dev eth0.2  src 10.63.121.25 cache  mtu 1500 advmss 1460 hoplimit 64
#

_speedtest_help()
{
	_speedtest do help
}

_speedtest_do()
{
	local FUNC="speedtest_do"

	case "$1" in
		"-h"|"-help"|"--help"|"help")
			cat <<EOF

Usage:	_speedtest do <firstIP> <secondIP> <method> <duration>

	speedtest is performed between first and second IP with a
	selectable measure-method. after wished duration (defaults
	to 10 seconds), test is aborted and overall speed is calculated.

	empty <firstIP> defaults to IP of local wifi interface
	empty <secondIP> defaults to wifi-IP of nexthop to internet
	empty <method> defaults to poormens_tcpdownload
	empty <duration> defaults to 10 seconds

	<firstIP> can also be the keyword "here" or "path_to"
	<secondIP> can also be a keyword, e.g. "here", "gateway", "inetgateway", "neighs_onehop" or "neighs_wifi_onehop"
	<method> can be "poormens_tcpdownload", "poormens_tcpdownload", "poormens_tcpupload", "udpupload", "udpdownload", "tcpdownload" or "tcpupload"

e.g.:	_speedtest do here gateway udpupload 15
	_speedtest do 10.63.12.1 10.63.99.1 tcpdownload 5
	_speedtest do gateway here
	_speedtest do

EOF
			return
		;;
	esac

	local IP_LOCAL="${1:-${WIFIADR:-${LANADR:-${WANADR}}}}"		# [ip4]
	local KEYWORD="${2:-gateway}"			# [ip4 = IP_TARGET] or keyword - fixme! allow lists
	local METHOD="${3:-poormens_tcpdownload}"	# keyword, e.g. tcpdownload, netperfTCP, netperfUDP
	local DURATION="${4:-10}"			# [seconds]
	local INITIATOR="${REMOTE_ADDR:-local}"
	local LIST IP I IP_REMOTE

	_log do $FUNC daemon debug "$IP_LOCAL <-> $KEYWORD method '$METHOD', duration $DURATION sec, initiated from $INITIATOR"

	case "$IP_LOCAL" in
		$WIFIADR|$LANADR|$WANADR)
			:
		;;
		here)
			IP_LOCAL="${WIFIADR:-${LANADR:-${WANADR}}}"
			[ "$KEYWORD" = "$IP_LOCAL" ] && {
				_log do $FUNC daemon info "will not test loopback"
				return 1
			}
		;;
		path_to)
			LIST="$WIFIADR $( traceroute -n "$KEYWORD" 2>/dev/null | while read -r _ IP _;do echo $IP;done )"

			list_get_element ()
			{
				local LIST="$1"
				local N="$2"
				local I=0
				local OBJ

				for OBJ in $LIST; do {
					I=$(( I + 1 ))
					[ $I -eq $N ] && {
						echo $OBJ
						break
					}
				} done
			}

			I=0
			for IP in $LIST; do {
				I=$(( I + 1 ))
				IP_LOCAL="$(  list_get_element "$LIST" $I )"
				IP_REMOTE="$( list_get_element "$LIST" $(( I + 1 )) )"

				[ -n "$IP_REMOTE" ] && _speedtest do $IP_LOCAL $IP_REMOTE $METHOD $DURATION
			} done

			return
		;;
		*)
			_sanitizer do "$IP_LOCAL" ip4 check || return 0

			local URL="http://$IP_LOCAL/cgi-bin-tool_fff+?OPT=speedtest&ARGS=$IP_LOCAL+$KEYWORD+$METHOD+$DURATION"
			_log do $FUNC daemon debug "fetching '$URL'"
			wget -qO - "$URL"
			return 0			# fixme! translate IP_LOCAL/KEYWORD (can be e.g. here or gateway)?
		;;
	esac

	local VALUES IP_TARGET LOAD_BEGIN LOAD_END UNIXTIME HUMANTIME METRIC_BEGIN METRIC_END OLSR_COST_BEGIN
	local OLSR_COST_END SPEED SPEED_MEGABIT DEVTYPE BYTES REST METHOD IP_LIST DURATION DURATION_REAL DURATION_COUNTER
	local RATE RATE_MIN RATE_MAX RATE_AVG RATE_SAMPLES DIRECTION PID_OF_TOOL

	case "$METHOD" in
		poormens_tcpupload|poormens_tcpdownload*|udpupload|udpdownload|tcpupload|tcpdownload)
			:
		;;
		*)
			METHOD="poormens_tcpdownload"		# fixme! here we must track 'rate' of device from which we download
		;;
	esac

	case "$KEYWORD" in			# fixme! we need _net_any2ip() on several points
		here)
			IP_LIST="$WIFIADR"
		;;
		neighs_onehop)
			IP_LIST="$( neigh | sed -n 's/^.* ..1.. \([0-9\.]*\).*/\1/p' )"
		;;
		neighs_wifi_onehop)
			IP_LIST="$( neigh | sed -n 's/^.* ~~1~~ \([0-9\.]*\).*/\1/p' )"
		;;
		gateway)
			_net local_inet_offer && {
				_log do $FUNC daemon info "no gatewaytest, because we _are_ the gateway 8-)"
				return
			}				

			IP_LIST="$( _sanitizer do "$( ip route list exact 0.0.0.0/0 )" ip4 )"
		;;
		inetgateway)
			read -r IP_LIST </tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY
		;;
		*)
			_sanitizer do "$KEYWORD" ip4 check || {
				_log do $FUNC daemon info "this is not an IP-address or known keyword: '$KEYWORD'"
				return
			}
			IP_LIST="$KEYWORD"
		;;
	esac

	if [ -z "$IP_LIST" ]; then
		_log do $FUNC daemon info "empty target list?"
	else
		_log do $FUNC daemon info "looping with method $METHOD from $IP_LOCAL over list $IP_LIST"
	fi

	# FIXME! onehop, but metric >1 && continue
	# FIXME! calculate EFFECTIV_PROCENTUAL_THROUGHPUT -> 34 mbit rate_avg, but 207kb/s -> xy% from max
	# FIXME! udpupload >1 hop does not make sense - we only fill the buffers (here -> wire -> nextrouter -> wifi)

	for IP_TARGET in $IP_LIST; do {
		[ "$IP_LIST" != "$KEYWORD" ] && {
			_log do $FUNC daemon debug "$IP_LOCAL <-> $IP_TARGET method '$METHOD', duration $DURATION sec, initiated from $INITIATOR"
		}

		netperf_fire ()
		{
			which netperf >/dev/null || {
				_software package_install netperfbin >/dev/null		# hack for oldstyle_devices
			}

			_log do $FUNC daemon debug "netperf -H $1 -t $2 -l $3"
			netperf -H $1 -t $2 -l $3 >/dev/null
		}

		LOAD_BEGIN="$( _system load 1min )"
		eval "$( neigh get_nlq $IP_TARGET speedtest )"		# LQ|NLQ|COST
		OLSR_COST_BEGIN=$COST

		UNIXTIME="$(  _system date unixtime )"
		HUMANTIME="$( _system date humanreadable )"
		METRIC_BEGIN="$( _olsr remoteip2metric $IP_TARGET )"
		DEVTYPE="$( _net dev_type $( _net ip2dev $IP_TARGET ))"


		case "$METHOD" in
			poormens_tcpdownload*)
			;;
			*)
				_stopwatch start speedtest_$$			########### START (tool will be started) ##########
			;;
		esac

		SHELL_UNDOCKED=

		case "$METHOD" in
			poormens_tcpdownload*|tcpdownload|udpdownload)
				DIRECTION="download"

				case "$METHOD" in
					poormens_tcpdownload)
						$IPT -I INPUT -p tcp --sport 80 -s $IP_TARGET
						wget -qO /dev/null "http://$IP_TARGET/cgi-bin-tool.sh?OPT=download" &
						PID_OF_TOOL="$!"
						SHELL_UNDOCKED="true"
						DURATION=$(( DURATION + 5 ))
					;;
					poormens_tcpdownload2)
						case "$IP_TARGET" in
							$MONITORING_SERVERIP)
								local testurl="http://$IP_TARGET/data.bin"
							;;
							194.8.194.20)
								# does not work with IP
								local testurl="http://speedtest.netcologne.de/test_100mb.bin"
							;;
							195.90.7.115)	# download.qsc.de
								local testurl="http://$IP_TARGET/100MB.qsc"
							;;
							202.123.27.113)	# gov.mu
								local testurl="http://$IP_TARGET/portal/goc/educationsite/file/Livelihood%20And%20Trade%20Skills%20Book.pdf"
							;;
							192.168.111.242)
								local testurl="http://$IP_TARGET/testdata.bin"
							;;
						esac

						$IPT -I INPUT -p tcp --sport 80 -s $IP_TARGET
						wget -qO /dev/null "$testurl" &
						PID_OF_TOOL="$!"
						SHELL_UNDOCKED="true"
					;;
					tcpdownload)
						$IPT -I INPUT -p tcp -s $IP_TARGET
						netperf_fire $IP_TARGET TCP_MAERTS $(( DURATION * 2 ))
					;;
					udpdownload)
						$IPT -I INPUT -p udp -s $IP_TARGET
						netperf_fire $IP_TARGET UDP_MAERTS $(( DURATION * 2 ))		# fixme! older netperf's do not know this method
					;;
				esac
			;;
			poormens_tcpupload|udpupload|tcpupload)
				DIRECTION="upload"

				case "$METHOD" in		# seems that dport (12865?) changes randomly, so it's a bit inexact
					udpupload)
						$IPT -I OUTPUT -p udp -d $IP_TARGET
						netperf_fire $IP_TARGET UDP_STREAM $(( DURATION * 2 ))
					;;
					tcpupload)
						$IPT -I OUTPUT -p tcp -d $IP_TARGET
						netperf_fire $IP_TARGET TCP_STREAM $(( DURATION * 2 ))
					;;
					poormens_tcpupload)
						$IPT -I OUTPUT -p tcp -d $IP_TARGET

						generate_fake_http_data()
						{
							local target="$1"
							local size=$(( $2 * 1048576 ))

							# netcologne -> intercity-vpn.de
							[ "$target" = '194.8.194.20' ] && target='84.38.67.43'

							echo "POST /index.php HTTP/1.1"
							echo "Host: $target"
							echo "Content-Type: application/x-www-form-urlencoded"
							echo "Content-Length: $size"
							echo

							dd if=/dev/zero bs=64k count=$(( size / 65536 )) 2>&-
						}

						generate_fake_http_data $IP_TARGET 1 megabyte | nc $IP_TARGET 80 >/dev/null
					;;
				esac
			;;
		esac

		[ "$SHELL_UNDOCKED" = "true" ] && {			# measurement-tool runs in background
			if [ -z "$PID_OF_TOOL" ]; then
				_log do $FUNC daemon info "[ERR] empty pid of measurement-tool"
			else
				trap 'kill $PID_OF_TOOL' SIGINT
			fi

			_stopwatch start speedtest_$$			############## START (tool is running) ###########

			[ "$DIRECTION" = "upload" ] || {

				[ "$DEVTYPE" = "wifi" ] || {
					_log do $FUNC daemon debug "outgoing device is not of type wifi, but '$DEVTYPE' - no output of rate_control_algo"
				}

				while [ ${DURATION_COUNTER:=0} -lt $(( DURATION / 2 )) ]; do {

					[ "$DIRECTION" = "upload" -a "$DEVTYPE" = "wifi" -a "${METRIC_BEGIN:=0}" = "1" ] && {

						RATE="$( wl -i $WIFIDEV rate | cut -d' ' -f3 )"		# fixme! use _wifi()-abstraction
						case "${RATE:=0}" in
							5.5) RATE=5500 ;;
							  0) RATE=1000 ;;
							  *) RATE="${RATE}000" ;;			# rate is convert to [Kilobit]
						esac

						[ $RATE -gt ${RATE_MAX:-0}	] && RATE_MAX="$RATE"
						[ $RATE -lt ${RATE_MIN:-600000}	] && RATE_MIN="$RATE"
						RATE_AVG=$(( ${RATE_AVG:-0} + RATE ))
						RATE_SAMPLES=$(( ${RATE_SAMPLES:-0} + 1 ))

						_log do $FUNC daemon debug "rate: $RATE"
					}

					sleep 1
					DURATION_COUNTER=$(( DURATION_COUNTER + 1 ))
				} done
			}
		}

		DURATION_COUNTER=0
		RATE_AVG=$(( ${RATE_AVG:-0} / ${RATE_SAMPLES:-1} ))

		LOAD_END="$( _system load 1min )"
		METRIC_END="$( _olsr remoteip2metric $IP_TARGET )"

		eval "$( neigh get_nlq $IP_TARGET speedtest )"		# LQ|NLQ|COST
		OLSR_COST_END=$COST

		[ -e "/proc/${PID_OF_TOOL:-unset}" ] && kill $PID_OF_TOOL	# normally this is only needed when poormens_tcpdownload
		DURATION_REAL="$( _stopwatch stop "speedtest_$$" nolog )"	############## END #############

		case "$DIRECTION" in
			download)
				set -- $( $IPT -nxvL INPUT 1 )
				BYTES="$2"
				$IPT -D INPUT 1
			;;
			upload)
				set -- $( $IPT -nxvL OUTPUT 1 )
				BYTES="$2"
				$IPT -D OUTPUT 1
			;;
		esac

		trap - SIGINT						# unset
		SPEED=$(( ${BYTES:=0} / DURATION_REAL / 10 ))		# kilobytes / second ; 1 Kilobyte = 1000 Bytes

		case "$METHOD" in
			poormens_tcpdownload)
				SPEED2="$( _wget do "http://$IP_TARGET/cgi-bin-tool.sh?OPT=download_results" )"
				case "$SPEED2" in
					*'/cgi-bin/luci/freifunk/captive'*)
						SPEED='100'		# dont try again
					;;
					[0-9]*)
						SPEED="${SPEED2:-0}"
					;;
				esac
			;;
		esac

		kilobyte2megabit()
		{
			local kilobyte="$1"
			local mbit=$(( kilobyte * 8 ))
			local out rest

			if [ $mbit -lt 1000 ]; then
				if [ $mbit -lt 100 ]; then
					out="0.0$(( mbit % 1000 ))"				#   10 Kilobyte -> x8 =    80 Kilobit -> 0.08 mbit
				else
					out="0.$( echo $(( mbit % 1000 )) | cut -b1,2 )"	#  100 Kilobyte -> x8 =   800 Kilobit -> 0.80 mbit
				fi
			else
				out=$(( mbit / 1000 ))
				rest="$( echo $(( mbit % 1000 )) | cut -b1 )"

				if   [ $rest -lt 10 ]; then
					rest="00$rest"
				elif [ $rest -lt 100 ]; then
					rest="0$rest"
				fi

				out="${out}.$rest"					# 2048 Kilobyte -> x8 = 16384 Kilobit -> 16.3 mbit
			fi

			echo "$out"
		}

		SPEED_MEGABIT="$( kilobyte2megabit $SPEED )"

		VALUES="IP_LOCAL=$IP_LOCAL IP_TARGET=$IP_TARGET SPEED=$SPEED RATE_AVG=$RATE_AVG RATE_MIN=${RATE_MIN:-0} RATE_MAX=${RATE_MAX:-0} BYTES=$BYTES METHOD=$METHOD LOAD_BEGIN=$LOAD_BEGIN LOAD_END=$LOAD_END UNIXTIME=$UNIXTIME HUMANTIME=$HUMANTIME INITIATOR=$INITIATOR METRIC_BEGIN=$METRIC_BEGIN METRIC_END=$METRIC_END OLSR_COST_BEGIN=$OLSR_COST_BEGIN OLSR_COST_END=$OLSR_COST_END DURATION=${DURATION}000 DURATION_REAL=${DURATION_REAL}0 DEVTYPE=$DEVTYPE"
		_speedtest store "$IP_LOCAL" "$IP_TARGET" "$METHOD" "$UNIXTIME" "$SPEED" "$VALUES"

		_log do $FUNC daemon info "$IP_LOCAL <-> $IP_TARGET @ $SPEED Kilobytes/sec ($SPEED_MEGABIT Megabit/s), method '$METHOD'"

		[ -n "$REMOTE_ADDR" ] && {
			echo "$IP_LOCAL <-> $IP_TARGET @ $SPEED Kilobytes/sec($SPEED_MEGABIT Megabit/s), method '$METHOD'"
		}
	} done
}

_speedtest_store()				# fixme! metric_begin/end differs? don't use it for speed_avg but store it
{						# fixme! autoremove/max XY entrys per connection?
	local FUNC="speedtest_store"		# fixme! calculate efficiency of rate_control_algorithm

	local IP_LOCAL="$1"
	local IP_TARGET="$2"
	local METHOD="$3"
	local TIME="$4"
	local SPEED="$5"
	local VALUES="$6"

	case "$IP_LOCAL" in				# these values can change, especially WAN
		$WIFIADR) IP_LOCAL="WIFIADR" ;;		# so, for better stats, we clamp them together
		$LANADR)  IP_LOCAL="LANADR" ;;		# to have the same keyword
		$WANADR)  IP_LOCAL="WANADR" ;;
	esac

	case "$IP_TARGET" in
		$WIFIADR) IP_TARGET="WIFIADR" ;;
		$LANADR)  IP_TARGET="LANADR" ;;
		$WANADR)  IP_TARGET="WANADR" ;;
	esac

	local basedir="/tmp/STATS/SPEEDTEST"
	local DIR="$basedir/$IP_LOCAL/$IP_TARGET/$METHOD"
	[ -d "$DIR" ] || mkdir -p "$DIR"

	local SAMPLES SPEED_RECENT SPEED_AVG SPEED_MIN SPEED_MAX SPEED_SUM
	read -r  SAMPLES SPEED_RECENT SPEED_AVG SPEED_MIN SPEED_MAX SPEED_SUM 2>/dev/null <"$DIR/stats"	

	[ "${SPEED_MAX:=0}"     -lt "$SPEED"	] && SPEED_MAX="$SPEED"
	[ "${SPEED_MIN:=15000}" -gt "$SPEED"	] && SPEED_MIN="$SPEED"

	SAMPLES=$(( ${SAMPLES:-0} + 1 ))
	SPEED_SUM=$(( ${SPEED_SUM:-0} + SPEED ))
	SPEED_AVG=$(( SPEED_SUM / SAMPLES ))

	_log do $FUNC daemon info "SPEED_AVG=$SPEED_AVG - $VALUES in '$DIR/$TIME' and '$DIR/stats'"
	echo "$VALUES" >"$DIR/$TIME"
	echo "$SAMPLES $SPEED $SPEED_AVG $SPEED_MIN $SPEED_MAX $SPEED_SUM" >"$DIR/stats"
}

_speedtest_stats()
{
	local IP_LOCAL="$1"
	local IP_TARGET="$2"
	local METHOD="$3"			# e.g. poormens_tcpdownload
	local DIR="/tmp/STATS/SPEEDTEST"
	local testdir

	case "$IP_LOCAL" in				# these values can change, especially WAN
		$WIFIADR) IP_LOCAL='WIFIADR' ;;		# so, for better stats, we clamp them together
		$LANADR)  IP_LOCAL='LANADR' ;;		# to have the same keyword
		$WANADR)  IP_LOCAL='WANADR' ;;
		'here')
			for testdir in "$DIR/WIFIADR/$IP_TARGET/$METHOD" "$DIR/LANADR/$IP_TARGET/$METHOD" "$DIR/WANADR/$IP_TARGET/$METHOD"; do {
				test -d "$testdir" && break
				testdir=
			} done
		;;
	esac

	case "$IP_TARGET" in
		$WIFIADR) IP_TARGET='WIFIADR' ;;
		$LANADR)  IP_TARGET='LANADR' ;;
		$WANADR)  IP_TARGET='WANADR' ;;
		'here')
			for testdir in "$DIR/$IP_LOCAL/WIFIADR/$METHOD" "$DIR/$IP_LOCAL/LANADR/$METHOD" "$DIR/$IP_LOCAL/WANADR/$METHOD"; do {
				test -d "$testdir" && break
				testdir=
			} done
		;;
	esac

	if [ -z "$testdir" ]; then
		DIR="$DIR/$IP_LOCAL/$IP_TARGET/$METHOD"
	else
		DIR="$testdir"
	fi

	[ -e "$DIR/stats" ] || return 0

	local SAMPLES SPEED_RECENT SPEED_AVG SPEED_MIN SPEED_MAX SPEED_SUM
	read -r  SAMPLES SPEED_RECENT SPEED_AVG SPEED_MIN SPEED_MAX SPEED_SUM 2>/dev/null <"$DIR/stats"

	cat <<EOF
SAMPLES=$SAMPLES
SPEED_RECENT=$SPEED_RECENT
SPEED_AVG=$SPEED_AVG
SPEED_MIN=$SPEED_MIN
SPEED_MAX=$SPEED_MAX
SPEED_SUM=$SPEED_SUM
EOF
}

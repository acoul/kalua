#!/bin/sh

_tool_remote()		# e.g. _tool remote IP-address 'startshell' or 'command'
{			# e.g. _tool remote 10.63.99.7 command 1 wwwpass 'uptime'
	local remote_ip="$1"
	local remote_command="$2"	# e.g. 'message' or 'command'
	local append_query="$3"		# e.g. 'MSG=bla' or '1' (just one command)
	local password="$4"
	local mycommand="$5"
	local i=0 timeout=30 rc=0 url=
	local temp="$TMPDIR/tool_remote_$$"

	while :; do {
		case "$remote_command" in
			'command')
				[ -z "$url" -a -z "$password" ] && {
					printf '%s' "give cgi-password of '$remote_ip' (or enter for same as this router): "
					read -r password
					[ -z "$password" ] && password="$( cut -d':' -f3 /etc/httpd.conf )"

					echo 'now give a command and press enter:'
					echo '(abort loop with CTRL+C)'
				}

				isnumber "$append_query" && test $i -eq $append_query && break
				i=$(( i + 1 ))

				# do not ask in 1-command mode:
				if isnumber "${append_query:-0}" && test -z "$mycommand" -a ${append_query:-0} -ne 1; then
					printf '\n%s' '#' '# your command: '
					read -r mycommand
				else
					timeout=180
				fi

				mycommand="$( _sanitizer run "$mycommand" urlvalue )"
				url="http://root:$password@$remote_ip/cgi-bin/userdb"
				url="$url?FORM_AUTH_USER=root&FORM_AUTH_PASS=$password&FORM_ACTION=command+$mycommand"
				mycommand=
			;;
			*)
				if [ -n "$url" ]; then
					break
				else
					url="http://$remote_ip/cgi-bin-tool.sh?OPT=${remote_command}${append_query:+&}${append_query}"
				fi
			;;
		esac

		_curl it "$url"	"$timeout" >"$temp"

		cat "$temp"
		grep -q '</body></html>' "$temp"
		rc=$?
		rm -f "$temp"
	} done

	test $rc -eq 0
}

fkt_print_accounting ()
{
	local LOCKFILE="/tmp/GEN_ACCOUNTING"
	local FILE_REAL="/tmp/accounting.html"
	local FILE_LINK="/www/accounting.html"

	[ -e "$LOCKFILE" ] && return
	touch $LOCKFILE

	[ ! -e "$FILE_LINK" ] && ln -s $FILE_REAL $FILE_LINK

	local MACLIST="$( _pfilter user_list )"

	test -n "$MACLIST" && local LAYER7_HITS="$( _pfilter stats_layer7_hits )"
	test -z "$LAYER7_HITS" && LAYER7_HITS="-"

	local UP_SECONDS_x100="$(( $( cut -d"." -f1 /proc/uptime ) * 100  ))"
	local UP_HOURS="$((        $( cut -d"." -f1 /proc/uptime ) / 360  ))"
	      UP_HOURS="$( _math divide10 $UP_HOURS )"

	local FWD_ALIEN="$(     _math bytes2unit "$( _pfilter stats_traffic_forwarded_internet	)" kb dotted pre )"
	local FWD_INTRA="$(     _math bytes2unit "$( _pfilter stats_traffic_forwarded_intranet	)" kb dotted pre )"
	local OLSR_WIFI_IN="$(  _math bytes2unit "$( _pfilter stats_olsr_traffic_wifi_in	)" kb dotted pre )"
	local OLSR_WIFI_OUT="$( _math bytes2unit "$( _pfilter stats_olsr_traffic_wifi_out	)" kb dotted pre )"

	local OLSR_WIFI_PER_SEC_IN="$(  _pfilter stats_olsr_traffic_wifi_in  )"
	local OLSR_WIFI_PER_SEC_OUT="$( _pfilter stats_olsr_traffic_wifi_out )"

	divisor_valid "$UP_SECONDS_x100" || UP_SECONDS_x100=1
	OLSR_WIFI_PER_SEC_IN="<tt>$(  _math divide10 $(( ${OLSR_WIFI_PER_SEC_IN:-0}  / UP_SECONDS_x100 )) )</tt>"	# divisor_valid
	OLSR_WIFI_PER_SEC_OUT="<tt>$( _math divide10 $(( ${OLSR_WIFI_PER_SEC_OUT:-0} / UP_SECONDS_x100 )) )</tt>"	# divisor_valid

	local TDR="<td align=right>"
	local TDC="<td align=center>"

	local TDR_RED="<td bgcolor=red   align=right>"
	local TDR_GRE="<td bgcolor=green align=right>"

	cat <<EOF
<table cellspacing=0 cellpadding=0 border=0 width=100%><tr><td>
Erstellungszeit dieser Zusammenfassung: $( date +%H:%M ) Uhr </td>
<td align=right><a href="cgi-bin-tool_fff+?OPT=accounting&GUI=1">Seite neu generieren</a></td></tr></table>

Ger&auml;telaufzeit, letzter Neustart: vor $UP_HOURS Stunden<br><br>

<table cellspacing=2 cellpadding=2 border=1 CLASS="shadow0"><tr>
$TDC Datenverkehr </td>
$TDC [KBytes]     </td>
</tr>
<tr><td> durchgeleitetet von anderen Knoten     </td>$TDR $FWD_ALIEN                                    </td></tr>
<tr><td> weitergeleitetet netzintern            </td>$TDR $FWD_INTRA                                    </td></tr>
<tr><td> Funk-OLSR eingegangen                  </td>$TDR $OLSR_WIFI_PER_SEC_IN / sek =  $OLSR_WIFI_IN  </td></tr>
<tr><td> Funk-OLSR abgeschickt                  </td>$TDR $OLSR_WIFI_PER_SEC_OUT / sek = $OLSR_WIFI_OUT </td></tr>
<tr><td> Trefferquote Layer7-Erkennung Benutzer </td>$TDR $LAYER7_HITS %                                </td></tr>
</table>
<br><br>
<table cellspacing=2 cellpadding=2 border=1 CLASS="shadow0"><tr>
<td colspan=4 align=center>Benutzer</td>
<td colspan=5 align=center>verursachter Datenverkehr [KBytes] im Zeitraum</td>
<td colspan=3 align=center>Verbindungen</td>
</tr>
<tr>
$TDC MAC-Adresse     </td>
$TDC Hersteller      </td>
$TDC Anschlu&szlig;  </td>
$TDC Hops            </td>
$TDC Name            </td>
$TDC 15&nbsp;Minuten </td>
$TDC Heute           </td>
$TDC Limit&nbsp;%    </td>
$TDC Gesamt          </td>
$TDC Tagesschnitt    </td>
$TDC Aufbau          </td>
$TDC Abbau           </td>
$TDC Verweigert      </td>
</tr>
EOF

	_net include

	for MAC in $MACLIST; do {
		local RECENT="$( _math bytes2unit "$( _pfilter stats_user_traffic $MAC recent )" kb dotted pre )"
		local TODAY="$(  _math bytes2unit "$( _pfilter stats_user_traffic $MAC today  )" kb dotted pre )"
		local ALL="$(    _math bytes2unit "$( _pfilter stats_user_traffic $MAC all    )" kb dotted pre )"

		local TODAY_PERCENT="$( _pfilter stats_user_traffic_used_percent $MAC )"

		local COLCELL="$TDR_GRE"
		if [ $TODAY_PERCENT -gt 100 ] && _pfilter user_probe_splash $MAC ; then
			COLCELL="$TDR_RED"											# bgcolor if mac is blocked / overlimit
		fi

		local MEDIA="Kabel"
		[ "$( _net mac2media $MAC)" = "wifi" ] && MEDIA="Funk"

		local SEC="$( cut -d"." -f1 /proc/uptime )"
		local ESTIMATED="unbekannt"
		command -v awk >/dev/null && {
		      ESTIMATED="$( _pfilter stats_user_traffic $MAC all | awk -v SEC=$SEC '{ printf("%i",($0/SEC*60*60*24)/1024) }' )"	# unit= KBytes , fixme! AWK!! (big numbers)
		      ESTIMATED="$( _math bytes2unit "$ESTIMATED" notouch dotted pre )"
		}
		test $SEC -lt 43200 && ESTIMATED="$TODAY"

		local NAME="$( _net mac2hostname $MAC )"

		local HOPS=0

		local CONN_STARTS="$( _pfilter stats_user_conns_start       $MAC )"
		local CONN_ENDS="$(   _pfilter stats_user_conns_end         $MAC )"
		local CONN_LIMITS="$( _pfilter stats_user_conns_over_limit $MAC )"
		local VENDOR="<a href='#' title='$( _net mac2vendor "$MAC" )'>$( _net mac2vendor "$MAC" short )</a>"

		echo "<tr>$TDR<small> $MAC </small></td><td> $VENDOR </td>$TDC $MEDIA </td>$TDC $HOPS </td>$TDC $NAME </td>$TDR $RECENT </td>$TDR $TODAY </td>$COLCELL $TODAY_PERCENT </td>$TDR $ALL </td> $TDR $ESTIMATED </td>$TDR $CONN_STARTS </td>$TDR $CONN_ENDS </td>$TDR $CONN_LIMITS </td></tr>"
	} done

	echo "</table>"
	rm $LOCKFILE
}

func_print_mac2ip_table ()
{
	local MAC
	local IP
	local DNS
	local DHCP
	local leasefile="$( _net dhcp_lease_filename )"

	echo "<h2>Zuordnungstabelle LinkLocal-Adresse, Internet-Adresse und DNS-Name</h2>"
	echo "<table cellspacing='2' cellpadding='2' border='1'>"
	echo "<tr bgcolor=grey><td> MAC-Adresse </td><td> IP-Adresse </td><td> HOST-Name </td><td> DHCP-aktiv? </td></tr>"

	while read -r LINE; do {
		MAC="${LINE%*[ ]*}"
		DNS="${LINE#*[ ]}"
		IP="$( grep " $DNS" /etc/local.hosts | cut -d' ' -f1 )"
		DHCP="$( grep -q "$MAC" $leasefile && echo "OK" )"

		echo "<tr><td> $MAC </td><td> $IP </td><td> $DNS </td><td align='center'> ${DHCP:=-} </td></tr>"
	} done </etc/ethers

	echo "</table><br>"

	[ -z "$MAC" ] && {
		echo "Diese Tabelle ist leer, weil in der <a href='cgi-bin/config_fff+?gui=user'>Benutzerverwaltung</a> noch nichts eingetragen wurde.<br><br>"
	}

	echo "Wenn du deine Rechner nicht automatisch konfigurieren laesst (dies ist die Empfehlung),<br>"
	echo "sondern eine manuelle Zuordnung bevorzugst, musst du dich an diese Tabelle halten."
}

fkt_grab_startpic_from_wiki () {
	local WIKI_PIC_NAME="Node${NODENUMBER}.jpg"

	cat <<EOF
Hinweis: Auf dem Wiki muss es eine Bild-Datei namens "$WIKI_PIC_NAME" geben.<br>
Versuche neues Startbild aus dem Wiki zu holen:<br><br>
EOF

	fkt_patch_intro_picture

	cat <<EOF
Neues (verkleinertes) Startbild auf deinem Router: (wenns nicht geklappt hat, einfach nochmal probieren...)<br>
<img src="/images/intro.jpg" alt="hier sollte eigentlich das neue Startbild sein - Fehler aufgetreten?" width=192 heigh=144 border=0>
EOF
}

_tool_htmlout_head()		# fixme! ARG1 should be the headline
{				# fixme! readapt for luci
	local file

	[ "$GUI" != "1" ] && {
		[ -n "$REMOTE_ADDR" ] && {
			_http header_mimetype_output "text/plain"
		}

		return
	}

	export DATE="$(grep SVN "/etc/variables_fff+" | cut -d"#" -f2)"
	export TITLE="Werkkzeug: Anleitung"

	file="${0#/rom}"
	file="${file%/*}/cgi-bin-pre.sh"

	if [ -e "$file" ]; then
		. $file
	else
		_http header_mimetype_output 'text/html'
		echo "<html><head><title>myinfo :: $HOSTNAME :: $CONFIG_PROFILE</title></head><body>"
	fi
}

_tool_htmlout_foot()
{
	local file

	test "$GUI" != "1" && return

	file="${0#/rom}"
	file="${file%/*}/cgi-bin-post.sh"

	if [ -e "$file" ]; then
		. $file
	else
		echo '</body></html>'
	fi
}

fkt_build_entry () {

	cat <<EOF
<option value="$1">$2</option>
EOF
}

_tool_htmlout_selectbox()
{
	local SPACE="&nbsp;"

	printf '%s' "<b>Netzknoten-Nummer${SPACE}dieses${SPACE}Ger&auml;ts:${SPACE}</b><big>${SPACE}${NODENUMBER:-noch nicht vergeben}${SPACE}</big>${SPACE}- "
	printf '%s' "<b>deine${SPACE}Netz-Adresse:${SPACE}</b>${SPACE}${REMOTE_ADDR}${SPACE}(Knoten:${SPACE}$( _ipsystem get $REMOTE_ADDR ))${SPACE}${SPACE}- "
	printf '%s' "<a href='http://wireless.subsignal.org/index.php?title=Telefonnummer'>Weimarnetz-Sorgentelefon</a>:${SPACE}<b>03643${SPACE}/${SPACE}<big>544304</big></b><br><br>"

	cat <<EOF
<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript"><!--
function showmap(obj)
{
	var frm = document.getElementById("mapfrm");
	if (!frm)
	{
		var wdt = Math.floor(document.body.offsetWidth / 2);
		var lft = obj.offsetLeft;
		var top = obj.offsetTop + obj.offsetHeight;

		while (obj = obj.offsetParent)
		{
			lft += obj.offsetLeft;
			top += obj.offsetTop;
		}

		if (lft > document.body.offsetWidth - wdt - 8)
			lft = document.body.offsetWidth - wdt - 8;
		if (lft < 8)
			lft = 8;

		frm = document.createElement("IFRAME");
		frm.id = "mapfrm";
		frm.src = "mapfrm.htm";
		frm.style.position = "absolute";
		frm.style.border = "2px outset gray";
		frm.style.left = lft+"px";
		frm.style.top = top+"px";
		frm.style.width = wdt+"px";
		frm.style.height = "300px";
		document.body.appendChild(frm);
	}
	else
	{
		document.body.removeChild(frm);
	}
 }
--></SCRIPT>

<ul>
<li>
Hilfmittel ausw&auml;hlen:<br>
<form action="" method="GET">
<select name="OPT">
$( fkt_build_entry speedarchiv       "01. Bandbreitentest - Archiv anzeigen"          )
$( fkt_build_entry tracearchiv       "02. Gateway-Auswahl - Archiv anzeigen"          )
$( fkt_build_entry servicearchiv     "03. Sonderdienste im Netz - Tagesansicht"       )
$( fkt_build_entry notebookconf      "04. Laptop-Konfigurator - OLSR-Wizard"          )
$( fkt_build_entry accounting        "05. Angefallener Datenverkehr (Accounting)"     )
$( fkt_build_entry netfilterolsr     "06. OLSR-Filterliste - Gesamtansicht"           )
$( fkt_build_entry sysinfo           "07. Systeminformationen - aktuell"              )
$( fkt_build_entry telnet            "08. Notfallkonsole aufrufen - telnet"           )
$( fkt_build_entry tftp              "09. Software weiterkopieren - TFTP-Modus"       )
$( fkt_build_entry syslog            "10. Systemlog anschauen" GREP=%3A SUPRESS1=DHCP SUPRESS2=rrdcollect HIGHLIGHT=fff)
$( fkt_build_entry wikistartpic      "11. Pers&ouml;nliches Startbild vom Wiki holen" )
$( fkt_build_entry shoutbox          "12. Nachrichtenversand - freifunk-Blog"         )
$( fkt_build_entry reboot            "13. Neustart dieser Freifunkantenne - reboot"   )
$( fkt_build_entry fwupdatecheck     "14. Jetzt auf neue Firmware-Version pr&uuml;fen")
$( fkt_build_entry fwupdate          "15. Firmware manuell aktualisieren / pr&uuml;fen")
$( fkt_build_entry node_data_archiv  "16. Netzknoten Zustandsdaten - Archiv anzeigen" )
$( fkt_build_entry time              "17. Zeitparameter anzeigen"                     )
$( fkt_build_entry wifi_on_or_off    "18. WLAN an bzw. ausschalten"                   )
$( fkt_build_entry print_everlog     "20. Resetfestes Computer-Logbuch anzeigen"      )
$( fkt_build_entry mac2ip_table	     "21. Zuordnungstabelle MAC,IP,DNS anzeigen"      )
$( fkt_build_entry adblock_table     "22. Liste der blockierten Werbeserver zeigen"   )
$( fkt_build_entry neigh	     "23. Liste aller OLSR-Nachbarn, ausf&uuml;hrlich")
$( fkt_build_entry tracetest	     "24. Routenverfolgung ins Internet / traceroute" )
$( fkt_build_entry scan_summary	     "25. WLAN-Scan Zusammenfassung"		      )
</select>
<input type="hidden" name="GUI" value="1">
<input type="submit" value="OK">
</form>
</li>
<li>
EOF

	func_print_gps_data_form

	cat <<EOF
</li>
<li>
Angefallener Datenverkehr (Accounting): <a href="accounting.html"><br>
Schnelle Variante</a>
</li>
<li>
Diagnose und Gesamt&uuml;bersicht des Netzwerkes: <a href='$( uci get system.@monitoring[0].url )/meshrdf/'> Monitoring </a>
</li>
$( command -v madplay >/dev/null && func_tool_print_html_soundplayer )
<li>
EOF

if [ -e /www/images/intro.jpg ]; then cat <<EOF
Vorschau auf Netzknotenbild dieser Freifunkantenne:<br>
<a href="cgi-bin-index.html"
  title="Linkziel: Startseite">
 <img src="images/intro.jpg"
      alt="Bild dieses Netzknotens"
    width="320"
   height="240"
   border="0">
</a>
EOF
else
	echo "(kein Kein Netzknotenbild vorhanden)"
fi

	cat <<EOF
</li>
</ul>
EOF

}

func_tool_print_html_soundplayer()	# FIXME
{
	cat <<EOF
<li>
Soundplayer start/stop:
</li>
EOF
}

func_print_qrcode ()
{
	local text="$1"
	local WIDTH="300"
	local HEIGHT="300"
	local URL="http://chart.apis.google.com/chart"
	local CODEPAGE="ISO-8859-1"

	[ -z "$text" ] && {
		text="$( nvram show 2>/dev/null |
			grep ^ff_adm |
			 sort |
			  while read -r L; do {
			  	printf '%s' "$L %0D%0A"
			  } done |
			   sed 's/[^a-zA-Z0-9_ |=:;@<>"\.\/-]//g' )"
	}

	URL="${URL}?cht=qr&chl=$( _sanitizer run "$text" urlvalue )&choe=${CODEPAGE}&chs=${WIDTH}x${HEIGHT}"

	printf '%s' "<img width=${WIDTH} height=${HEIGHT} alt='$text' src='${URL}'>"
}

func_print_gps_data_form ()
{
	local latlon latitude longitude

	# e.g. 50.97389;11.31875
	latlon="$( uci -q get system.@admin[0].latlon )"
	latitude="$(  echo "$latlon" | cut -d';' -f1 )"
	longitude="$( echo "$latlon" | cut -d';' -f2 )"

	cat <<EOF
<form action="" method="post" CLASS="form">
GPS-Position dieses Netzknotens (<a href="http://www.weimarnetz.de/jens/gps.html">Latitude / Longitude</a>):
<br>
Geo-Koordinaten:
<!--
	<INPUT NAME="ff_adm_latlon" SIZE="42" TYPE="TEXT" VALUE="$latlon">
	<BUTTON ONCLICK="if(null!=window.showmap)showmap(this);return false">Map</BUTTON>
-->
<input type=text name="FORM_LATITUDE"  value="$latitude"  size=18>
<input type=text name="FORM_LONGITUDE" value="$longitude" size=18>
<input type=submit value="Speichern">
</form>
EOF
}

fkt_print_tftp_help () {
	cat <<EOF
Diese Funktion &uuml;bertr&auml;gt die auf diesem Ger&auml;t installierte <br>
Software auf einen anderen, per Kabel angeschlossenen Router.             <br><br>

Diese Kopierfunktion ist nur innerhalb der ersten 5 Sekunden       <br>
nach dem Einschalten des anderen Routers verfuegbar. Ziehe         <br>
also den Stromstecker am anderen Router und stecke ihn wieder ein. <br>
Betaetige dann den entsprechenden Auswahlknopf abh&auml;ngig vom   <br>
Hardware-Typ des anderen Routers.                                  <br><br>

Wenn eine Fehlermeldung kommt, dann einfach nochmal probieren.     <br>

...viel Erfolg! <br><br><br>

Typ des anderen Routers? <br>
<table cellspacing=2 cellpadding=2 border=0><tr>
<td> <form action"" method=post> <input type=hidden name="TFTP_HARDWARE" value=wrt>     <input type=submit value="Linksys">   </form> </td>
<td> <form action"" method=post> <input type=hidden name="TFTP_HARDWARE" value=dell>    <input type=submit value="Dell">      </form> </td>
<td> <form action"" method=post> <input type=hidden name="TFTP_HARDWARE" value=asus>    <input type=submit value="Asus">      </form> </td>
<td> <form action"" method=post> <input type=hidden name="TFTP_HARDWARE" value=buffalo> <input type=submit value="Buffalo">   </form> </td>
<td> <form action"" method=post> <input type=hidden name="TFTP_HARDWARE" value=unknown> <input type=submit value="Unbekannt"> </form> </td>
</tr> </table>
EOF
}

fkt_print_tftp_flashing ()
{
	local TEMP="/tmp/fw.trx"

	case "$TFTP_HARDWARE" in
		wrt) 	 SRC="192.168.1.2/24" ; DEST_IP="192.168.1.1"   ; SOURCE=g    ;;
		asus)	 SRC="192.168.1.2/24" ; DEST_IP="192.168.1.220" ; SOURCE=trx  ;;
		dell)	 SRC="192.168.2.2/24" ; DEST_IP="192.168.2.1"   ; SOURCE=trx  ;;
	 	buffalo) SRC="192.168.11.2/24"; DEST_IP="192.168.11.1"  ; SOURCE=trx  ;;
	 	*)	 SRC="192.168.1.2/24" ; DEST_IP="192.168.1.1"   ; SOURCE=trx  ;;
	esac

	[ -n "$IPSRC" ] && SRC="$IPSRC"
	[ -n "$IPDST" ] && DEST_IP="$IPDST"
	[ -n "$TYPE" ]  && SOURCE="$TYPE"

	echo "Gew&auml;hlte Hardware: \"$TFTP_HARDWARE\"<br>"
	echo "Qell-IP: $SRC - Ziel-IP: $DEST_IP - Dateiformat: $SOURCE<br>"
	echo "Programmausgabe: <br><pre>"

	ip address add $SRC dev $LANDEV label ${LANDEV}:tftp
	/www/cgi-bin/freifunk-upload -$SOURCE /dev/mtd/1 >$TEMP

	test $TFTP_HARDWARE = "asus" && tftp -g -r ASUS -l /dev/null $DEST_IP

	tftp -p -l $TEMP $DEST_IP
	ERROR="$?"
	rm -f $TEMP
	ip address delete $SRC dev $LANDEV label ${LANDEV}:tftp

	echo "</pre><br>"

	if [ "$ERROR" = '0' ]; then
		echo "Gratuliere! Erfolgreich kopiert. Der andere Router installiert nun die Software.<br>"
	else
		echo "Schade, es hat nicht geklappt. Einfach nochmal probieren.<br>"

		echo "<br><br>Tip:<br>"
		echo "# bei Buffalo-Routern muss waehrend des Einschaltens der versenkte Resetknopf (\"INIT\") gedrueckt werden, solange bis alle 5 LEDs an den switch-Ports wieder ausgehen.<br>"
		echo "# Asus wl500g-Premium / Asus wl-hdd / Yakumo Storage-Router h&ouml;ren nur auf die zuletzt eingestellte LAN-Adresse und es muss beim Einschalten der versenkte RESTORE-Knopf solange gedr&uuml;ckt werden, bis die Powerlampe langsam an/aus blinkt.<br>"
		echo "# spezielle Wuensche, koennen durch w&uuml;rzen der URL mit <tt>&IPSRC=<b>10.63.168.120/27</b>&IPDST=<b>10.63.168.97</b>&TYPE=<b>trx</b></tt> verwirklicht werden.</br>"
	fi
}

func_print_neigh()
{
	[ "$GUI" = '1' ] && echo '<pre>'

	local freq dev info txpower=
	for dev in $WIFI_DEVS; do {
		freq="$( _wifi dev2freq "$dev" )"
		txpower="$( _wifi dev2txpower "$dev" )"
		info="${info}${txpower}mW@$dev/${freq}MHz "
	} done

	local OPT_NEIGH="$( uci get wireless.@auto_optimize[0].neigh )"
	local OPT_NLQ="$(   uci get wireless.@auto_optimize[0].nlq   )"

	echo "hostname: $HOSTNAME  txpower: $info  optimize_neigh/nlq: ${OPT_NEIGH:--}/${OPT_NLQ:--}  profile: $CONFIG_PROFILE"

	neigh

	[ "$GUI" = "1" ] && echo '</pre>'
}

func_print_adblock_table ()
{
	local FILE LIST
	local PACKAGE="fff-adblock-list"

	echo "<pre>"
	_software package_status $PACKAGE
	echo "</pre><br>"

	echo "<pre>"
	_software package_info $PACKAGE
	echo "</pre><br>"

	echo "<pre>Sollte diese Liste leer sein, so wurde der Werbefilter nicht richtig installiert</small>"

	LIST="$( _software package_files "$PACKAGE" )"
	for FILE in $LIST; do {
		[ -f "$FILE" ] && {
			ls -l "$FILE"
			echo "$( _file lines "$FILE" ) Hosts in dieser Datei:<br>"
			cat "$FILE"
			echo "<br>"
		}
	} done
	echo "</small></pre>"
}

func_wifi_on_or_off()
{
	:
}

fkt_print_hardware () {
	eval $(/etc/init.d/S02check_interface_correctness_fff+)

	  if [ "$USB" = "1" ]; then
	  	USB="USB v1.1"
	elif [ "$USB" = "2" ]; then
		USB="USB v2.0"
	else
		USB="nein"
	fi

	if [ "$IDE" = "1" ]; then
		IDE="ja"
	else
		IDE="nein"
	fi

	if [ "$MINIPCI" = "1" ]; then
		MINIPCI="ja"
	else
		MINIPCI="nein"
	fi

	echo "$HW / $USB / $IDE / $MINIPCI"
}

fkt_print_wlan_stats () {
	local  FRAG="$(		_wifi frag $WIFIDEV )"
	local   RTS="$(		_wifi rts  $WIFIDEV )"
	local RXANT="$(a=$(	_wifi antenna_rx $WIFIDEV ); if [ "$a" = "0" ]; then echo "A"; elif [ "$a" = "1" ]; then echo "B"; else echo "beide";fi)"
	local TXANT="$(a=$(	_wifi antenna_tx $WIFIDEV ); if [ "$a" = "0" ]; then echo "A"; elif [ "$a" = "1" ]; then echo "B"; else echo "beide";fi)"

	echo $TXANT / $RXANT / $FRAG / $RTS
}

fkt_print_version () {
	echo $FFF_PLUS_VERSION
}

fkt_print_time () {		# OUT1: 1123499652;080813142005 = unixtime;datestring for setting date with "date -s"

	local UNIXTIME_AND_DATESTRING="$( date "+%s;%m%d%H%M%Y" )"
	local LAST_FETCH_NTP_TIME="$(( $( cat 2>/dev/null /tmp/ntp_was_successful ) + 0 ))"	# see S69...

	printf '%s' "${UNIXTIME_AND_DATESTRING};${LAST_FETCH_NTP_TIME};$TZ"
}

fkt_print_link_to_reboot ()
{
	echo 'F&uuml;r verschiedene Neustart-Optionen, bitte <a href="cgi-bin/reset.html">diesem Link</a> folgen.'
}

fkt_print_fw_counter ()
{
	local FILE="/tmp/hna_table"

	_olsr txtinfo 'hna' >"$FILE"

	FW_NEW=$( grep -Fsc "255.255.255.192" $FILE )
	FW_OLD=$( grep -Fs "255.255.255.240" $FILE | grep -vc ^"104\.63" )
	FW_DSL=$( grep -Fs "0.0.0.0"	     $FILE | grep -vc HNA )
	FW_ALL=$(( FW_NEW + FW_OLD ))

	rm -f $FILE 2>/dev/null

	echo "$FW_OLD / $FW_NEW / $FW_DSL / $FW_ALL"
}

fkt_start_or_end_telnetd () {
	if [ -z "$(pidof telnetd)" ]; then
		echo "<br>Telnet-Dienst kann <a href=\"cgi-bin/telnetd_fff+\">ueber diesen Link</a> gestartet werden."
		echo "<br>Achtung: der Login ist dann ohne Passwort moeglich."
		echo "<br>Nach Benutzung am besten mit <tt>killall telnetd</tt> wieder schliessen."
	else
		killall telnetd
		echo "Das Telnet-Dienstprogramm wurde wieder beendet."
	fi
}

fkt_print_html_speedarchiv () {
	echo "<small><pre>"
	cat /tmp/ARCHIV_SPEEDTEST
	echo "</pre></small>"
}

fkt_print_html_node_data_archiv ()
{
	echo "<small><pre>"
	sed -e 's/&/ /g' -e 's/%3a/:/g' -e 's/%2c/,/g' "$TMPDIR/ARCHIV_MONITORING"
	echo "</pre></small>"
}

fkt_print_html_syslog () {
	# following comfort-related functions in this order:
	# - only print lines with pattern X (not casesensitiv)		"GREP="
	# - don't print lines with pattern X (not casesensistiv)	"SUPRESS1="
	# - and don't print lines with pattern X (not casesensistiv)	"SUPRESS2="
	# - highlight pattern X in all lines				"HIGHLIGHT="
	# - ...

	test -z "$GREP"		&& GREP=':'
	test -z "$SUPRESS1"	&& SUPRESS1=',,,'
	test -z "$SUPRESS2"	&& SUPRESS2=',,,'
	test -z "$HIGHLIGHT"	&& HIGHLIGHT=',,,'

	echo "<form action=\"\" method=get>"
	echo "Schreibe nur Zeilen, die folgendes enthalten:		<input type=text name=GREP 	value=\"$GREP\">	<br>"
	echo "und unterdr&uuml;cke Zeilen, die folgendes enthalten:	<input type=text name=SUPRESS1	value=\"$SUPRESS1\">	<br>"
	echo "und unterdr&uuml;cke Zeilen, die folgendes enthalten:	<input type=text name=SUPRESS2	value=\"$SUPRESS2\">	<br>"
	echo "und hebe Zeilen hervor, die folgendes enthalten:		<input type=text name=HIGHLIGHT	value=\"$HIGHLIGHT\">	<br>"

	echo "<input type=hidden name=OPT value=syslog><input type=hidden name=GUI value=1>"
	echo "<input type=submit value=\"Systemlog anzeigen\"></form><small><pre>"

	if command -v logread.sh >/dev/null ; then
		logread.sh -a |
		 grep -i "$GREP" |
		  grep -iv "$SUPRESS1" |
		   grep -iv "$SUPRESS2" |
		    sed "s/\(.*$HIGHLIGHT.*\)/<b>\1<\/b>/"
	else
		logread |
		 grep -i "$GREP" |
		  grep -iv "$SUPRESS1" |
		   grep -iv "$SUPRESS2" |
		    sed "s/\(.*$HIGHLIGHT.*\)/<b>\1<\/b>/"
	fi

	echo "</pre></small>"
}

fkt_print_html_servicearchiv () {
	echo "<small><pre>"
	cat /tmp/SERVICES_DEPRECATED	# FIXME!
	echo "</pre></small>"
}

fkt_print_html_tracearchiv () {
	echo "<small><pre>"
	cat /tmp/ARCHIV_TRACEINET
	echo "</pre></small>"
}

_tool_sysinfo()
{
	local reason="$1"	# webserver|cron

	echo '<small><pre><!-- banner -->'
	cat '/etc/banner'

	echo '<hr><!-- uptime/date -->'
	date
	uptime

	echo '<hr><!-- ps -->'
	ps

	echo '<hr><!-- meminfo -->'
	cat /proc/meminfo

	[ -e '/tmp/RAM_FREE_FLUSHED' ] && {
		echo '<hr><!-- free_flushed -->'
		cat '/tmp/RAM_FREE_FLUSHED'
	}

	echo '<hr><!-- df -h -->'
	df -h

	echo '<hr><!-- mount -->'
	cat /proc/mounts

	echo '<hr><!-- netparam -->'
	cat "$TMPDIR/NETPARAM"

	local number vif ifname
	for number in 0 1 2 3; do {
		for vif in '' '-0' '-1' '-2' '-3'; do {
			ifname="wlan${number}${vif}"
			_net dev_is_valid "$ifname" && {
				echo "<hr><!-- iw dev $ifname link -->"
				iw dev "$ifname" link
				echo "<hr><!-- iw dev $ifname info -->"
				iw dev "$ifname" info
				echo "<hr><!-- iw dev $ifname station dump"
				iw dev "$ifname" station dump
			}
		} done
	} done

	[ -e '/tmp/CRONSTATUS' ] && {
		# if enabled in cron.minutely-debug
		echo '<hr><!-- CRONSTATUS -->'
		cat "/tmp/CRONSTATUS"
	}

	echo '</pre></small>'

	[ "$reason" = 'cron' ] || {
		echo >>$SCHEDULER '_system ram_free flush_hard >/tmp/RAM_FREE_FLUSHED; free >>/tmp/RAM_FREE_FLUSHED'
	}
}

fkt_print_html_internet_trace () {
	echo "<small><pre><b>Weg der Datenpakete von diesem Router ins Internet (ohne DNS bzw. Namens-Aufl&ouml;sung):</b>"

	traceroute -n -m 9 141.1.1.1 -w 1 -q 2

	echo "</pre><br><pre><b>Weg der Datenpakete von diesem Router ins Internet (mit DNS bzw. Namens-Aufl&ouml;sung):</b>"

	traceroute -m 15 gmx.de -w 1 -q 2

	echo "</pre><br><pre><b>Benutzt werden folgende DNS-Einstellungen:</b>"

	  if pidof dnsmasq >/dev/null ; then

		echo "Das Programm 'DNSmasq' ist ordnungsgem&auml;&szlig; gestartet und ist aktiv"

		[ -e /etc/dnsmasq.conf ] && {
			echo "Konfigurierte DNS-Server f&uuml;r das Programm 'DNSmasq':"
			grep "^server=" /etc/dnsmasq.conf
		}

	elif pidof udhcpd >/dev/null; then

		echo "Das Programm 'uDHCPd' ist ordnungsgem&auml;&szlig; gestartet und ist aktiv"
	else
		echo "DNS-Dienst ist NICHT aktiv. (jeder Klient-Rechner muss manuell konfiguriert werden)"
	fi

	echo

	if [ -e /var/etc/resolv.conf ]; then
		echo "Konfiguration der 'resolv.conf':"
		cat /etc/resolv.conf
	else
		echo "Es wurde KEINE resolv.conf gefunden."
	fi
}

fkt_print_html_trace_to_remote () {
	echo "<small><pre>"
	echo "<b>Weg der Datenpakete von diesem Router zum Abfragenden (ohne Namens-Aufloesung):</b>"
	traceroute -n -m 9 $REMOTE_ADDR -w 1 -q 2
	echo "<b>Weg der Datenpakete von diesem Router zum Abfragenden (mit Namens-Aufloesung):</b>"
	traceroute -m 15 $REMOTE_ADDR -w 1 -q 2
}

fkt_print_html_notebook_conf ()
{
	eval "$( _ipsystem get ${IPWIZARD:-666} )"

	[ "$ERROR" = '0' ] || {
		echo "Knotennummer nur zwischen 1 und 1020 gueltig."
		IPWIZARD=2
		eval "$( _ipsystem get $IPWIZARD )"
	}

	local DNSSERVER="$( grep -s ^'server=[0-9]' /var/etc/dnsmasq.conf | head -n1 )"

	if [ -e '/etc/olsrd.conf' ]; then
		local OLSRCONF="/etc/olsrd.conf"
	else
		local OLSRCONF="/var/etc/olsrd.conf"
	fi

	cat<<EOF

<form action="" method="post" CLASS="form">
<b>So sollte deine WLAN-Karte fuer die Netzknotennummer </b><i>
<input type=text name="IPWIZARD" value="$IPWIZARD" size=4> </i><b> konfiguriert sein:
<input type=submit name="GOGO" value="Neu berechnen"></form> </b>
<pre>
IP-Adresse	:		$WIFIADR
Netzwerkmaske	:		255.0.0.0
Gateway		:		<i>bleibt leer</i> (wird vom OLSR-Dienst dynamisch gesetzt)
DNS-Server	:		${DNSSERVER:=141.1.1.1} (nur eine Empfehlung)
</pre>
<br>
<b>So sollte deine OLSRd-Konfiguration </b><i>/etc/olsrd.conf</i><b> fuer die WLAN-Karte </b><i>eth1</i><b> auf dem Laptop aussehen:</b>
<pre>
DebugLevel		0
IpVersion		4
AllowNoInt		yes
Pollrate		0.025
TcRedundancy		2
FIBMetric		"approx"
MprCoverage		7
LinkQualityFishEye	1
NatThreshold		0.75

Interface "<b>eth1</b>"
 {
$( sed -n '/Interface/,/}/p' $OLSRCONF | sed '/}/q' | sed -n '/...*/p' | sed '/Interface/d' )
 }
</pre>
<br><b>Hinweis:</b> <i>Der Name der Netzwerkschnittstelle ist systemspezifisch und laesst sich u.U. mit '<tt>iwconfig<tt>' anzeigen.</i>
EOF
}

fkt_print_date_from_unixtime () {
	local UNIXTIME="$1"
	local FACTOR=3600

	command -v awk >/dev/null || {
		echo "error-AWK_nicht_installiert"
		return 1
	}

	if [ "$UNIXTIME" -gt 0 ]; then
		awk -v U=$UNIXTIME -v F=$FACTOR 'BEGIN{printf("%s",strftime("%c",U*F))}'	# fixme! (awk)
	else
		echo "??? - Seitenladefehler!"
	fi
}

fkt_print_unixtime_diff_in_days () {
	local UNIXTIME="$1"
	local FACTOR=3600

	command -v awk >/dev/null || {
		echo "error-AWK_nicht_installiert"
		return 1
	}

	if [ "$UNIXTIME" -gt 0 ]; then		# fixme! (awk)
		awk -v U=$UNIXTIME -v F=$FACTOR -v D=$(_system date unixtime) 'BEGIN{ daydiff=(D-(U*F))/3600/24; if(daydiff<0)daydiff=0; printf("%5.1f",daydiff) }'
	else
		echo "???"
	fi
}

fkt_button_fw_update ()		# FIXME! does not work
{
	local TYP="$1"

	cat <<EOF
<form action="cgi-bin/cgi-bin-update_fff+" method="get">
<input type="hidden" value="$TYP" name="SOURCE">
<input type="hidden" value="1" name="GUI">
<input type="submit" value="Diese Version jetzt installieren">
</form>
EOF
}

func_print_update_help ()
{
	local VERSION_STABLE="$(  _links firmware_url_get 'version_on_server' stable  )"
	local VERSION_BETA="$(    _links firmware_url_get 'version_on_server' beta    )"
	local VERSION_TESTING="$( _links firmware_url_get 'version_on_server' testing )"

	local MODE="$( _firmware updatemode )"

	cat <<EOF
<big>Eingestellter Aktualisierungsmodus:</big>&nbsp;&nbsp;<b> $MODE </b>
<br><br>

<table cellspacing=0 cellpadding=3 border=0>
<tr><td valign=top>Aktuelle Stabile-Version:</td><td>$VERSION_STABLE</td><td>$( fkt_button_fw_update stable ) </td></tr>
<tr><td valign=top>Aktuelle Beta-Version:   </td><td>$VERSION_BETA</td><td>$( fkt_button_fw_update beta )	  </td></tr>
<tr><td valign=top>Aktuelle Testing-Version:</td><td>$VERSION_TESTING</td><td>$( fkt_button_fw_update testing) </td></tr>
<tr><td valign=top>Auf diesem Ger&auml;t installierte Version</td><td>$OPENWRT_REV</td><td><img src="images/yes.gif"></td></tr>
</table>

<br><br><small>
(<a href="cgi-bin/firmware.html">Normale Vorgehensweise benutzen</a>)
</small>
EOF
}

_tool_fwupdatecheck()
{
	echo >>$SCHEDULER_IMPORTANT 'cron.upgrade_packages'
	echo >>$SCHEDULER_IMPORTANT '_firmware update_pmu'

	echo '<br>Siehe Systemlog. Keine weiteren Meldungen.'
}

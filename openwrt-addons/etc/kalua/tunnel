#!/bin/sh

_tunnel_check_local_capable()
{
	local funcname="tunnel_check_local_capable"
	local tunnel_partner="$1"

	_log it $funcname daemon info "[ERR] fully disabled ATM"
	return 1

	case "$tunnel_partner" in
		$WIFIADR|$LANADR|$WANADR|${LOADR:-$tunnel_partner})	# if var LOADR is not built, better deny (low uptime)
			_log it $funcname daemon info "[ERR] tunnel-partner $tunnel_partner is own WIFI/LAN/WAN or LO-address - abort"
			return 1
		;;
	esac

	if [ -e "/usr/sbin/vtund" ]; then		# later: memory, etc.
		return 0
	else
		_log it $funcname daemon info "[ERR] vtund not found - abort"
		return 1
	fi
}

_tunnel_id2ip()
{
	local id="$1"
	local tunnel_side="$2"
	local ipstart="192.168.200"		# mask is always /30 for each tunnel
	local broadcast=0			# id=1
	local n=1
							# fixme! block capable(), if max is full
	while [ $n -lt $id ]; do {
		broadcast=$(( broadcast + 4 ))		# max of 64 tunnels (=256/4)
		n=$(( n + 1 ))
	} done

	case "$tunnel_side" in
		server)
			echo "$ipstart.$(( broadcast + 1 ))"
		;;
		client)
			echo "$ipstart.$(( broadcast + 2 ))"
		;;
	esac
}

_tunnel_config_build()				# on client
{
	local tunnel_id="$1"
	local mac="$2"
	local ipuser="$3"
	local option="$4"			# e.g. 'ignore_intranet_traffic' 	// idea: having an extra tunnel for this

	local storage="/tmp/tunnel"		# todo: always use tunnel_name for TABLE
	mkdir -p "$storage"
	mkdir -p /var/log/vtund			# for stats

	local mask=30
	local mtu=1450
	local password='ff'
	local name message rt_num prio1 prio2 table_intranet intranet

	local bin_logger="$( command -v 'logger' )"
	local bin_ip="$( command -v 'ip' )"
	local bin_sed="$( command -v 'sed' )"

	intranet="10.0.0.0/8"			# fixme!
	rt_num=$(( 150 + tunnel_id ))
	name="$( _sanitizer run "$mac" hostname )"
	message="id $tunnel_id conn $name dev %% for user $ipuser"	# speed unknown, send from server?

	prio1="3${tunnel_id}0"		# e.g. 3 + 152 + 0 = 31520
	prio2="3${tunnel_id}1"		# e.g. 3 + 152 + 1 = 31521

	case "$option" in
		ignore_intranet_traffic)
			table_intranet="main"
		;;
		*)
			table_intranet="$mac"
		;;
	esac

	cat <<EOF
$name {
	type tun;
	proto udp;
	password ff;
	persist yes;
	stat yes;

	up {
		program $bin_logger "-t tunnel_clientUP -p daemon.info [START] $message" wait;

		program "$bin_ip address add $( _tunnel id2ip $tunnel_id client )/$mask dev %%" wait;
		program "$bin_ip link set dev %% mtu $mtu up" wait;

		program "echo $rt_num $mac >>/etc/iproute2/rt_tables" wait;
		program "$bin_ip rule add from $ipuser to $intranet prio $prio1 table $table_intranet" wait;
		program "$bin_ip rule add from $ipuser prio $prio2 table $mac" wait;

		program "$bin_ip route add default via $( _tunnel id2ip $tunnel_id server ) dev %% table $mac" wait;
		program "$bin_ip route flush cache" wait;

		program $bin_logger "-t tunnel_clientUP -p daemon.info [READY] $message" wait;
	};

	down {
		program $bin_logger "-t tunnel_clientDOWN -p daemon.info [START] $message" wait;

		program "$bin_ip route del default via $( _tunnel id2ip $tunnel_id server ) dev %% table $mac" wait;

		program "$bin_ip rule del from $ipuser prio $prio2 table $mac" wait;
		program "$bin_ip rule del from $ipuser to $intranet prio $prio1 table $table_intranet" wait;
		program "$bin_sed -i '/^$rt_num /d' /etc/iproute2/rt_tables" wait;

		program "$bin_ip route flush cache" wait;

		program "$bin_ip link set dev %% down" wait;
		program "$bin_ip address del $( _tunnel id2ip $tunnel_id client )/$mask dev %%" wait;

		program $bin_logger "-t tunnel_clientDOWN -p daemon.info [READY] $message" wait;
	};
}
EOF
}

_tunnel_config_insert_new_client()		# on server
{
	local tunnel_id="$1"
	local mac="$2"
	local ipuser="$3"
	local speed_upload="$4"
	local speed_download="$5"
	local storage="/tmp/tunnel"
	local speed

	mkdir -p "$storage"

	if   [ -z "$speed_upload" ]; then
		speed=0					# no shaping at all
	elif [ -z "$speed_download" ]; then
		speed="$speed_upload:$speed_upload"		# up/down is symetric (follows vtun syntax idea)
	else
		speed="$speed_download:$speed_upload"		# normal vtun-syntax
	fi

	echo "$tunnel_id $mac $ipuser $speed" >"$storage/$mac"
}

_tunnel_config_rebuild()			# on server: we have to join many user/connections
{
	local storage="/tmp/tunnel"
	local option="$1"								# e.g. 'ignore_intranet_traffic'
	local tunnel tunnel_id mac ipuser speed name message rt_num compress
	local prio1 prio2 intranet intranet_table

	local mask=30
	local mtu=1450
	local password='ff'

	local bin_logger="$( command -v 'logger' )"
	local bin_ip="$( command -v 'ip' )"
	local bin_sed="$( command -v 'sed' )"
	mkdir -p /var/log/vtund				# for stats

	for tunnel in $storage/*; do {				# todo: log memory, avoid compression for loopback-conns
		case "$tunnel" in
			[0-9a-f][0-9a-f][:][0-9a-f][0-9a-f][:][0-9a-f][0-9a-f][:][0-9a-f][0-9a-f][:][0-9a-f][0-9a-f][:][0-9a-f][0-9a-f])
				# files named like macadresses without extension - see config_insert_new_client()
			;;
			*)
				continue
			;;
		esac

		tunnel_id=; mac=; ipuser=; speed=
		read -r tunnel_id mac ipuser speed <"$storage/$tunnel"

		rt_num=$(( 50 + tunnel_id ))
		name="$( _sanitizer run "$tunnel" hostname )"
		message="id $tunnel_id conn $name dev %% for user $ipuser with speed $speed"

		prio1="3${tunnel_id}0"		# e.g. 3 + 152 + 0 = 31520
		prio2="3${tunnel_id}1"		# e.g. 3 + 152 + 0 = 31521

		case "$tunnel" in
			00:08:c6*)
				compress="no"
			;;
			*)
				compress="lzo:9"
			;;
		esac

		intranet="10.0.0.0/8"			# fixme!
		case "$option" in
			ignore_intranet_traffic)
				intranet_table="main"
			;;
			*)
				intranet_table="$mac"
			;;
		esac

		cat <<EOF
$name {
	compress $compress;
	encrypt no;
	speed $speed;
	stat yes;

	type tun;
	proto udp;
	passwd $password;

	up {
		program $bin_logger "-t tunnel_serverUP -p daemon.info [START] $message" wait;

		program "$bin_ip address add $( _tunnel id2ip $tunnel_id server )/$mask dev %%" wait;
		program "$bin_ip link set dev %% mtu $mtu up" wait;

		program "echo $rt_num $mac >>/etc/iproute2/rt_tables" wait;
		program "$bin_ip rule add to $ipuser from $intranet prio $prio1 table $intranet_table" wait;
		program "$bin_ip rule add to $ipuser prio $prio2 table $mac" wait;

		program "$bin_ip route add default via $( _tunnel id2ip $tunnel_id client ) dev %% table $mac" wait;
		program "$bin_ip route flush cache" wait;

		program $bin_logger "-t tunnel_serverUP -p daemon.info [READY] $message" wait;
	};

	down {
		program $bin_logger "-t tunnel_serverDOWN -p daemon.info [START] $message" wait;

		program "$bin_ip route del default via $( _tunnel id2ip $tunnel_id client ) dev %% table $mac" wait;
		program "$bin_ip rule del to $ipuser prio $prio2 table $mac" wait;
		program "$bin_ip rule del to $ipuser from $intranet prio $prio1 table $intranet_table" wait;

		program "$bin_sed -i '/^$rt_num /d' /etc/iproute2/rt_tables" wait;

		program "$bin_ip route flush cache" wait;

		program "$bin_ip link set dev %% down" wait;
		program "$bin_ip address del $( _tunnel id2ip $tunnel_id server )/$mask dev %%" wait;

		program $bin_logger "-t tunnel_serverDOWN -p daemon.info [READY] $message" wait;
	};
}

EOF

	} done
}

_tunnel_daemon_apply_config()
{
	local file_config="$1"
	local pidfile="/tmp/tunnel/vtund.pid"
	local pid cmdline

	if [ -e "$pidfile" ]; then
		read -r pid <"$pidfile"
		read -r cmdline <"/proc/${pid:-unset}/cmdline"
	else
		pid="$( _system get_first_pid vtund )"
		read -r cmdline <"/proc/${pid:-unset}/cmdline"
	fi

	case "$cmdline" in
		vtund*)
			kill -SIGHUP $pid
		;;
		*)
			vtund -s -f "$file_config"
			_system get_first_pid vtund >"$pidfile"
		;;
	esac
}

_tunnel_check_connection()
{
	local tunnel_name="$1"
	local question="$2"
	local out

	case "$question" in
		is_up)
			out="$( ps | fgrep "vtund[c]: $tunnel_name tun tun" | fgrep -v "fgrep" | head -n1 )"
		;;
		is_reconnecting)
			out="$( ps | fgrep "vtund[c]: $tunnel_name connecting to" | fgrep -v "fgrep" | head -n1 )"
		;;
		get_pid)
			out="$( ps | fgrep "$tunnel_name" | grep -v "fgrep" | fgrep vtund | head -n1 )"
			explode $out
			echo $1

			# normal output of ps: 'S <  vtund[c]: 001500189266 tun tun0'
			# fixme! there must be a better way...
			# running into bg with & and reading $!
			# does not work - maybe writing pid during section up{...}?
		;;
	esac

	if [ -n "$out" ]; then
		return 0
	else
		return 1
	fi
}

_tunnel_clientside_control()
{
	local funcname="tunnel_clientside_control"
	local action="${1:-action_unset}"
	local mac="${2:-mac_unset}"
	local ip="${3:-ip_unset}"

	case "$CONFIG_PROFILE" in
		liszt28*|spbansin*)
		;;
		*)
			return 1
		;;
	esac

	case "$mac" in
		99:99:99:99:99:*)		# the reserve chains...
			return 1
		;;
		00:00:00:00:00:00)
			return 1		# fixme! see dhcp-script
		;;
	esac

	local storage='/tmp/tunnel'
	local configfile="$storage/${mac}.conf"
	local tunnel_id tunnel_name answer url pid tunnel_server file

	read -r tunnel_server <"/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY"
	[ -z "$tunnel_server" ] && {
		_log it $funcname daemon info "action: $action - tunnel for $mac / $ip fails, no gateway/server found"
		return 1
	}

	_tunnel check_local_capable "$tunnel_server" || {
		_log it $funcname daemon info "tunnel for $mac / $ip locally not capable"
		return 1
	}

	case "$action" in
		check_connection)
			case "$mac" in
				all)
					list_files()
					{
						for file in $storage/*.conf ; do {
							case "$file" in
								[0-9a-f][0-9a-f][:][0-9a-f][0-9a-f][:][0-9a-f][0-9a-f][:][0-9a-f][0-9a-f][:][0-9a-f][0-9a-f][:][0-9a-f][0-9a-f]'.conf')
									echo "$file"
								;;
							esac
						} done
					}
				;;
				*)
					list_files()
					{
						echo "$mac"
					}
				;;
			esac

			for file in $( list_files ); do {
				read -r tunnel_name _ <"$file"
				_log it $funcname daemon info "$action: checking conn $tunnel_name in file $file"

				if _tunnel check_connection "$tunnel_name" is_up ; then
						_log it $funcname daemon info "[OK] conn $tunnel_name seems fine - nothing to do"
				else
						_tunnel check_connection "$tunnel_name" is_reconnecting && {
							_log it $funcname daemon info "forcing shutdown, tunnel is in reconnecting-state"
							pid="$( _tunnel check_connection "$tunnel_name" get_pid )"
							kill ${pid:-unset}
						}

						ip="$(  _sanitizer run "$( cat "$file" )" ip4 | head -n2 | tail -n1 )"
						mac="$( _sanitizer run "$( cat "$file" )" mac | head -n1 )"
						configfile="$storage/${mac}.conf"

						tunnel_id="$( sed -n 's/^.*echo \([0-9]*\) .*/\1/p' "$file" )"
						tunnel_id=$(( tunnel_id - 150 ))					# fixme! add readable metadata in firstline

						_tunnel config_build "$tunnel_id" "$mac" "$ip" "ignore_intranet_traffic" >"$configfile"

						url="http://$tunnel_server/cgi-bin-tunnel.sh?ACTION=tunnel_possible&MAC=${mac}&IP_USER=${ip}"
						answer="$( _curl it "$url" 3 )"

						case "$answer" in
							TRUE*)
								_log it $funcname daemon info "awakening tunnel $tunnel_name for mac $mac and ip $ip"
								_tunnel client_start "$tunnel_id" "$mac" "$ip" "ignore_intranet_traffic"
							;;
							*)
								_log it $funcname daemon info "awake not possible: answer: '$answer'"
							;;
						esac
				fi
			} done
		;;
		start)
			url="http://$tunnel_server/cgi-bin-tunnel.sh?ACTION=tunnel_possible&MAC=${mac}&IP_USER=${ip}"
			answer="$( _curl it "$url" 3 )"

			case "$answer" in
				TRUE*)
					_watch counter "/tmp/tunnel_id" increment 1 max 65 || {
						_log it $funcname daemon info "[ERR] maximum tunnel instances reached, aborting"
						return 1
					}
					read -r tunnel_id </tmp/tunnel_id

					_tunnel client_start "$tunnel_id" "$mac" "$ip" "ignore_intranet_traffic"
				;;
				*)
					_log it $funcname daemon info "[ERR] tunnel for $mac / $ip not possible, answer from $tunnel_server: '$answer' question: '$url'"
				;;
			esac
		;;
		stop)
			_log it $funcname daemon info "[OK] stopping tunnel for $mac / $ip"

			read -r tunnel_name _ <"$configfile"
			rm "$configfile"

			pid="$( _tunnel check_connection "$tunnel_name" get_pid )"
			kill "${pid:-unset}"
		;;
	esac
}

_tunnel_client_start()
{
	local funcname="tunnel_client_start"
	local tunnel_id="$1"
	local mac="$2"
	local ip="$3"
	local option="$4"				# e.g. 'ignore_intranet_traffic'

	local configfile="$storage/${mac}.conf"
	local storage="/tmp/tunnel"
	local tunnel_name

	mkdir -p "$storage"
	_tunnel config_build "$tunnel_id" "$mac" "$ip" "$option" >"$configfile"
	read -r tunnel_name _ <"$configfile"

	vtund -f "$configfile" "$tunnel_name" "$tunnel_server"

	_log it $funcname daemon info "[OK] fired up tunnel $tunnel_name with pid $( _tunnel check_connection $tunnel_name get_pid )"
}

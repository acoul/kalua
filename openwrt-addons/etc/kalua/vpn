#!/bin/sh

_vpn_probe_vtund_type()
{
	set -- $( ldd '/usr/sbin/vtund' '/usr/local/sbin/vtund' 2>/dev/null )

	case "$*" in
		*'liblzo'*'libcrypto'*)
			echo 'ssl_lzo'
		;;
		*'liblzo'*)
			echo 'nossl_lzo'
		;;
		*)
			echo 'nossl_nolzo'
		;;
	esac
}

_vpn_innercity_master_vtund_write_config()
{
	local funcname='vpn_innercity_master_vtund_write_config'
	local config="${1:-$TMPDIR/vtund.conf}"
	local password="${2:-ff}"
	local node=2
	local node_max=1024
	local lockfile="$TMPDIR/$funcname"
	local connection_name

	mkdir "$lockfile" || return 1

	# defaults to 'proto tcp' - we use 'udp' which needs NAT_HACK compiled in on server
	cat >"$config" <<EOF
default {
	type ether ;
	proto udp ;
	nat_hack server ;
	compress no ;
	encrypt no ;
	keepalive yes ;
	multi killold ;
	stat no ;
	}
EOF

	while [ $node -lt $node_max ]; do {
		connection_name="n$node"

		cat >>"$config" <<EOF

$connection_name {
	device tap$node ;
	passwd $password ;

	up {   program ". /tmp/loader; _vpn innercity_master_iface up   %%" wait; };
	down { program ". /tmp/loader; _vpn innercity_master_iface down %%" wait; };
	}
EOF
		node=$(( node + 1 ))
	} done

	rm -fR "$lockfile"
}

_vpn_innercity_master_vtund()
{
	local funcname='vpn_innercity_master_vtund'
	local action="$1"	# check_on_server|get_port|fire|start|stop|restart
	local config="${2:-$TMPDIR/vtund.conf}"
	local port pid pid_list i

	port="$( uci -q get system.vpn.port || echo '5001' )"

	case "$action" in
		'check_on_server')
			if [ -e "$config" ]; then
				if pidof vtund >/dev/null; then
					if _net tcp_port_reachable '127.0.0.1' "$port" 'VTUN server' 2>/dev/null; then
						# e.g. 'VTUN server ver 3.X 01/11/2015'
						_log it $funcname daemon debug "$action: testconnection OK"
					else
						_log it $funcname daemon alert "$action: testconnection failed"
						_vpn innercity_master_vtund 'restart'
					fi

					if lsof | fgrep '/dev/net/tun' | grep -q ^'olsrd'; then
						pid_list="$( pgrep 'vpn_innercity_master_iface up' )"
						for pid in $pid_list; do {
							_log it $funcname daemon alert "hanging task: $pid '$( cat /proc/$pid/cmdline )'"
							kill $pid
						} done

						_olsr daemon restart 'blocked /dev/net/tun'
					else
						true
					fi
				else
					_log it $funcname daemon alert "$action: empty pid - will startup"
					_vpn innercity_master_vtund fire
				fi
			else
				_vpn innercity_master_vtund start
			fi
		;;
		'get_port')
			echo "$port"
		;;
		'fire')
			grep -sq ^'tun ' '/proc/modules' || {
				[ -e '/dev/net/tun' ] || {
					_log it $funcname daemon info "trying to 'modprobe tun'"
					modprobe tun
				}
			}

			# server: vtund <-s> [-i] [-n] [-f file] [-P port]
			/usr/local/sbin/vtund -s -f "$config" -P "$port"
		;;
		'start')
			_vpn innercity_master_vtund_write_config
			_vpn innercity_master_vtund fire
		;;
		'stop')
			killall vtund
			_watch hanging_command vtund
			_watch hanging_command vtund

			i=30
			while _vpn innercity_master_iface lock_active; do {
				if [ $i -gt 0 ]; then
					i=$(( i - 1 ))
					_log it $funcname daemon info "waiting for interface shotdown: $i sec"
					sleep 1
				else
					_vpn innercity_master_iface remove_all_locks
					break
				fi
			} done
		;;
		'restart')
			# keeping config, just restart daemon
			_vpn innercity_master_vtund stop
			_vpn innercity_master_vtund fire
		;;
	esac
}

_vpn_innercity_master_iface()
{
	local funcname='vpn_innercity_master_iface'
	local action="$1"	# up|down|lock_active|remove_all_locks|count_clients
	local dev="$2"		# e.g. tap276
	local i=0
	local lockdir="$TMPDIR/lock-$dev-$funcname"
	local bytes packets uptime uptime_sec numbers linenumber reason mtu

	case "$action" in
		'count_clients')
			for file in "$TMPDIR/$funcname-devup-"*; do {
				[ -e "$file" ] && i=$(( i + 1 ))
			} done

			echo "$i"
			return
		;;
		'lock_active')
			ls -1 "$TMPDIR/$funcname-devup"* >/dev/null && return 0
			ls -d "$lockdir" && return 0

			return 1
		;;
		'remove_all_locks')
			_log it $funcname daemon alert 'working'
			rm -fR "$lockdir"
			rm -fR "$TMPDIR/$funcname-devup"*

			return 0
		;;
	esac

	# we make sure, that this function (up or down) is
	# only used once from 1 caller - otherwise we wait
	while ! mkdir "$lockdir"; do {
		read -r reason <"$lockdir/info"

		# FIXME! why does this happen? e.g. on EJBW when a peer changes it's public IP (pppoe-reconnect)
		# Oct 20 05:38:07 server1 kalua: sh: vpn_innercity_master_iface() locked: up/tap855 must wait for 'action: down dev: tap800'
		# Oct 20 05:38:09 server1 vtund[17326]: Session Node800[178.25.42.10:47605] opened
		# Oct 20 05:38:09 server1 vtund[17326]: Can't allocate tap device tap800. Device or resource busy(16)
		# Oct 20 05:38:09 server1 vtund[17326]: Session Node800 closed
		# --> lockfile still exists
		# even without logfile it will not recover

		if _file age "$lockdir/info" -gt 600 ; then
			_log it $funcname daemon alert "overaged: force unlocking: '$reason'"
			_vpn innercity_master_vtund stop
			_vpn innercity_master_vtund start

			return 0
		else
			[ $i -gt 5 ] && {
				_log it $funcname daemon info "locked: $action/$dev must wait for '$reason'"
			}
			i=$(( i + 1 ))
			sleep $i
		fi
	} done

	reason="action: $action dev: $dev"
	echo "$reason" >"$lockdir/info"
	_log it $funcname daemon info "[START] action: $action dev: $dev"

	local olsrd_config='/etc/olsrd.conf'
	local remote_nodenumber="${dev//tap/}"		# tap276 -> 276
	local tunnel_ip_here="$( _ipsystem getvar 'WIFIVPNSERVERADR' $remote_nodenumber )"
	local limit=8		# throttling - FIXME! use olsr_throttle?
	local limit_burst=5
	local mask=30		# ip here + ip other side + net + broadcast = 4 = /30

	mtu="$( uci -q get network.innercityVPN.mtu || echo '1280' )"
	# 1500 bytes ->           ethernet MTU
	# 1486 bytes -> -14 bytes ethernet header
	# 1466 bytes -> -20 bytes IP-header
	# 1458 bytes -> - 8 byte  UDP-header
	# 1448 bytes -> -10 bytes vtun-preambel (2 uncompressed or 2-10 bytes with compression)
	# 1428 bytes -> -20 bytes Layer2/TAP-header
	# 1420 bytes -> - 8 byte  PPPoE-header (likely)
	# 1380 bytes -> -40 byte  DS-lite overhead (IPv4 in IPv6)
	# ...
	# https://github.com/weimarnetz/weimarnetz/issues/218 -> 1280

	if [ "$action" = 'up' ]; then
		ip address add $tunnel_ip_here/$mask dev $dev
		ip link set dev $dev mtu $mtu up
		touch "$TMPDIR/$funcname-devup-$dev"

		$IPT -I INPUT  -p udp --dport 698 -i $dev -j DROP
		$IPT -I INPUT  -p udp --dport 698 -i $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
		$IPT -I INPUT  -p udp --dport 698 -i $dev -s $tunnel_ip_here -j ACCEPT
		$IPT -I OUTPUT -p udp --dport 698 -o $dev -j DROP
		$IPT -I OUTPUT -p udp --dport 698 -o $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
		$IPT -I FORWARD -i $dev -j ACCEPT
		$IPT -I FORWARD -o $dev -j ACCEPT

		mkdir '/tmp/FREIFUNK_TUNNEL' && {
			# kernel IP-forwarding is activated in _cron_vpnserver_firstrun()
			$IPT -t nat -I POSTROUTING ! -o tap+ -j MASQUERADE
		}

		# TODO: add abstraction to _olsr()
		# if we cannot find the interface name, insert it
		# only do it for 1st occurence - and dont touch 'private' sections
		grep -q "\"$dev\"" "$olsrd_config" || {
			linenumber="$( grep -n ^'Interface ' "$olsrd_config" | head -n1 | cut -d':' -f1 )"
			sed -i "${linenumber}s/Interface /Interface \"$dev\" /" "$olsrd_config"
#			_log it $funcname daemon sms "added $dev to line $linenumber in $olsrd_config"
			_olsr daemon restart "new interface '$dev' added in line $linenumber"
		}

		pidof olsrd >/dev/null || _olsr daemon start "$funcname() not active yet"
		_vpn innercity_master_write_infojson

		_log it $funcname daemon info "[READY] action: $action dev: $dev"
	else
		# action = down
		ip link set dev $dev down

		uptime_sec=$( _file age "$TMPDIR/$funcname-devup-$dev" )
		uptime=$( _stopwatch seconds2humanreadable "$uptime_sec" )
		rm "$TMPDIR/$funcname-devup-$dev"

		explode $( $IPT -nxvL | fgrep " $dev " | head -n1 )
		packets=$1
		bytes=$2
		$IPT -D FORWARD -o $dev -j ACCEPT

		explode $( $IPT -nxvL | fgrep " $dev " | head -n1 )
		packets=$(( packets + $1 ))
		bytes=$(( bytes + $2 ))
		$IPT -D FORWARD -i $dev -j ACCEPT

		$IPT -D OUTPUT -p udp --dport 698 -o $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
		$IPT -D OUTPUT -p udp --dport 698 -o $dev -j DROP
		$IPT -D INPUT  -p udp --dport 698 -i $dev -s $tunnel_ip_here -j ACCEPT
		$IPT -D INPUT  -p udp --dport 698 -i $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
		$IPT -D INPUT  -p udp --dport 698 -i $dev -j DROP

		divisor_valid "$uptime_sec" || uptime_sec=1
		numbers="$( _sanitizer run "$bytes/$packets" number_humanreadable )"
		numbers="bytes/packets: $numbers = $(( bytes / uptime_sec / 1000 )) KB/s"	# divisor_valid

		_vpn innercity_master_write_infojson
		_log it $funcname daemon alert "[READY] action: $action dev: $dev $numbers uptime: $uptime"
	fi

	rm -fR "$lockdir"
}

_vpn_hideandseek_master_get()
{
	# the effective inet_offering node
	echo '/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY'
}

_vpn_hideandseek_user_list()
{
	local table_name='hideandseek'
	local file

	for file in "/tmp/$table_name-"*; do {
		file="${file#*-}"

		case "$file" in
			'*')
			;;
			*)
				echo "$file"
			;;
		esac
	} done
}

_vpn_hideandseek_user_probe()
{
	local ip="$1"
	local table_name='hideandseek'

	test -e "/tmp/$table_name-$ip"
}

_vpn_hideandseek_user_add()
{
	local funcname='vpn_hideandseek_user_add'
	local ip="$1"		# 1.2.3.4 or 2.3.4.5/26 or 'setup_default_route'
	local option="$2"	# e.g. 'exclude'

	local mask=32
	local local_net='10.0.0.0/8'
	local table_name='hideandseek'
	local table_id=50
	local tunnel_dev='tap0'
	local user_id markerfile special_table

	grep -q ^"$table_id $table_name" '/etc/iproute2/rt_tables' || echo "$table_id $table_name" >>'/etc/iproute2/rt_tables'

	case "$ip" in
		'setup_default_route')	# called after first successful ping
return 0	# FIXME! issues with roaming (ute)

			bool_true 'system.@vpn[0].hideandseek_disabled' && return 0

			if ip rule show | grep -q ^'9999:'; then
				return 0
			else
				# for testing ICMP + faster DNS lookups
				ip rule add from all to '8.8.8.8/32' lookup main prio 9999
				# own generated traffic (e.g. monitoring dont through tunnel)
				ip rule add from $WANADR lookup main prio 9999
			fi

			ip route add default via "$( _ipsystem getvar WIFIVPNSERVERADR )" dev "$tunnel_dev" table "$table_name"
			ip route flush cache

			return 0
		;;
		*'/'*)
			mask="${ip#*/}"
			ip="${ip%/*}"
		;;
	esac

	markerfile="/tmp/$table_name-$ip-$mask"
	[ -e "$markerfile" ] && return 0

	if [ "$option" = 'exclude' ]; then
		special_table='lookup main'
	else
		special_table="table $table_name"
	fi

	if _net local_inet_offer >/dev/null; then
		read -r user_id 2>/dev/null <"/tmp/$funcname-$mask" || {
			case "$mask" in
				32) user_id=10000 ;;	# wider masks are later processed,
				31) user_id=11000 ;;	# otherwise we cannot make finer rules
				30) user_id=12000 ;;	# for single ip's from a big subnet:
				29) user_id=13000 ;;	#
				28) user_id=14000 ;;	#     0 = table local
				27) user_id=15000 ;;	#   ... = table hideandseek *this*
				26) user_id=16000 ;;	# 32766 = table main
				25) user_id=17000 ;;	# 32767 = table default
				24) user_id=18000 ;;
				23) user_id=19000 ;;
				22) user_id=20000 ;;
				21) user_id=21000 ;;
				20) user_id=22000 ;;
				19) user_id=23000 ;;
				18) user_id=24000 ;;
				17) user_id=25000 ;;
				16) user_id=26000 ;;
			esac

			echo "$user_id" >"/tmp/$funcname-$mask"
		}

		echo "$user_id" >"$markerfile"
		_watch counter "/tmp/$funcname-$mask" increment 4

		ip rule add from "$ip/$mask"   to "$local_net" prio "$user_id"           lookup main		# internal traf
		ip rule add from "$local_net"  to "$ip/$mask"  prio "$(( user_id + 1 ))" lookup main		# internal traf
		ip rule add from "$ip/$mask"                   prio "$(( user_id + 2 ))" $special_table		# client to internet
		ip rule add to   "$ip/$mask"                   prio "$(( user_id + 3 ))" lookup main		# internet to client
		ip route flush cache

		_log it $funcname daemon info "activated for $ip"
	else
		:
		# delegate to master
	fi
}

_vpn_hideandseek_user_disable()
{
	:
	# TODO: call during bad/lost tunnel and automatically reenable if tunnel up again
}

_vpn_hideandseek_user_del()
{
	local funcname='vpn_hideandseek_user_del'
	local ip="$1"
	local option="$2"	# e.g. 'exclude'

	local mask=32
	local local_net='10.0.0.0/8'
	local user_id markerfile special_table
	local table_name='hideandseek'

	case "$ip" in
		*'/'*)
			mask="${ip#*/}"
			ip="${ip%/*}"
		;;
	esac

	markerfile="/tmp/$table_name-$ip-$mask"
	[ -e "$markerfile" ] || return 0
	read -r user_id <"$markerfile"

	if [ "$option" = 'exclude' ]; then
		special_table='lookup main'
	else
		special_table="table $table_name"
	fi

	ip rule del from "$ip/$mask"   to "$local_net" prio "$user_id"           lookup main		# internal traf
	ip rule del from "$local_net"  to "$ip/$mask"  prio "$(( user_id + 1 ))" lookup main		# internal traf
	ip rule del from "$ip/$mask"                   prio "$(( user_id + 2 ))" $special_table		# client to internet
	ip rule del to   "$ip/$mask"                   prio "$(( user_id + 3 ))" lookup main		# internet to client
	ip route flush cache

	rm "$markerfile"
	_log it $funcname daemon info "deleted $ip"
}

_vpn_hideandseek_master_vtund_write_config()
{
	local file="${1:-$TMPDIR/vtund.conf}"
	local connection_name="n$NODENUMBER"
	local ifname

	[ -e "$file" ] && return 1

	if [ "$( uci -q get network.mytunnel.ifname )" = 'tap0' ]; then
		# oldstyle
		ifname='mytunnel'
	else
		ifname='innercityvpn'
	fi

	# defaults to 'proto tcp' - we use 'udp' which needs NAT_HACK on server
	cat >"$file" <<EOF
$connection_name {
	passwd ff ;
	type ether ;
	proto udp ;
	persist yes ;

	up {   program "ifup   $ifname" wait; };
	down { program "ifdown $ifname" wait; };
	}
EOF
}

_vpn_hideandseek_vtund()
{
	local action="$1"	# check_on_client|fire|start|stop|restart
	local config="${2:-$TMPDIR/vtund.conf}"

	# TODO: get server list from /var/run/services_olsr + add '212.47.248.108' + 185.119.255.186
	# TODO: use system.@vpn[0].hostname -> weimarnetz.de
	local server='4.v.weimarnetz.de'
	local server_port='5001'	# TODO: ask server, see infojson()
	local connection_name="n$NODENUMBER"

	case "$action" in
		'check_on_client')
			if _vpn hideandseek_master_vtund_write_config; then
				# config now written
				_vpn hideandseek_vtund fire
			else
				# config already there

				# TODO: some daemon checks:
				# - ping6?
				# - activate for hideandseek if 3 times good
				# - deactivate for hideandseek if 1 x bad

				_vpn check_daemon
			fi
		;;
		'fire')
			# client: vtund [-f file] [-P port] [-p] [-t timeout] [-n] <host> <server address>
			vtund -f "$config" -P "$server_port" "$connection_name" "$server"
		;;
		'start')
			_vpn hideandseek_master_vtund_write_config
			_vpn hideandseek_vtund fire
		;;
		'stop')
			# FIXME: call ifdown?
			_watch hanging_command vtund
			_watch hanging_command vtund
			rm "$config"
		;;
		'restart')
			_vpn hideandseek_vtund stop
			_vpn hideandseek_vtund fire
		;;
	esac
}

_vpn_tapdev_has_probs()
{
	local funcname='vpn_tapdev_has_probs'
	local dev="$1"
	local ip_server="$( _ipsystem getvar 'WIFIVPNSERVERADR' )"

	ip -family inet6 address show dev "$dev" | grep -q 'inet6 ' || {
		_log it $funcname daemon info "[ERR] IPv6 linklocal on dev '$dev' is not up"
		return 0
	}

	if _net ping_getlatency "$ip_server"; then
		_vpn hideandseek_user_add 'setup_default_route'
		return 1
	else
		_log it $funcname daemon info "[ERR] no/bad ping to '$ip_server'"
		return 0
	fi
}

_vpn_check_daemon()		# TODO: needs better name: it's for 'hideandseek'
{
	# TODO: use a function and more varnames
	# maybe better?: grep "tap[0-9]:" /proc/net/dev -> _net dev_is_valid 'tapX'

	if pidof vtund >/dev/null; then
		logread >'/tmp/logread.out'


		restart_vtund()
		{
			local pids
			_log it check_vtund daemon alert "restarting: $1"

			while pids="$( pidof vtund )"; do {
				_log it check_vtund daemon info "killing old pids: $pids"
				_watch hanging_command vtund
			} done

			if [ -e '/tmp/vtund.sh' ]; then
				# oldstyle
				killall vtund
				. '/tmp/vtund.sh'
			else
				_vpn hideandseek_vtund stop
				_log sleep "restart_vtund:$1" 60 step 10
				_vpn hideandseek_vtund start
			fi
		}

		# TODO:
		# vtund[22585]: Session voip-n2[84.184.146.131] closed
		# vtund[22989]: Session voip-n2[84.184.146.131] opened

		if   _vpn tapdev_has_probs 'tap0'; then
			restart_vtund 'dev is not fully up'
		elif grep -q 'Connection timed out' '/tmp/logread.out'; then
			[ $( grep "vtund\[[0-9]*\]:" '/tmp/logread.out' | fgrep -c 'Connection timed out' '/tmp/logread.out' ) -gt 5 ] && {
				grep -q ' vtund: link_up ' '/tmp/logread.out' || {
					restart_vtund 'our pubip has changed?'
				}
			}
		elif grep -q "Can't resolv server address" '/tmp/logread.out'; then
			[ $( grep "vtund\[[0-9]*\]:" '/tmp/logread.out' | fgrep -c "Can't resolv server address" '/tmp/logread.out' ) -gt 5 ] && {
				restart_vtund 'servers pubip has changed?'
			}
		fi

		rm '/tmp/logread.out'
	else
		_log it check_vtund daemon alert "starting up after crash"

		if [ -e '/tmp/vtund.sh' ]; then
			. '/tmp/vtund.sh'
		else
			_vpn hideandseek_vtund start
		fi
	fi
}

_vpn_x()	# FIXME! find a better name
{
	case "$CONFIG_PROFILE" in
		liszt28*|ffweimar*|ilm1*|paltstadt*)
		;;
		*)
			return 0
		;;
	esac

	command -v vtund >/dev/null || {
		_log it x daemon info 'vtund not installed'
		return 0
	}

	if [ -e '/etc/vtund.conf' ]; then
		case "$( head -n1 '/etc/vtund.conf' )" in
			# oldstyle or default-conf
			*'4.v.weimarnetz.de'*|'#')
				_net local_inet_offer cached >/dev/null && {
					_vpn hideandseek_vtund check_on_client
					return 0
				}
			;;
		esac
	else
		_net local_inet_offer cached >/dev/null && {
			_vpn hideandseek_vtund check_on_client
			return 0
		}
	fi

	# oldstyle or e.g. special config:
	if [ -e '/tmp/vtund.sh' ]; then
		_vpn check_daemon
	else
		[ -e "/etc/vtund.conf" ] && {
			# startup-code must be in a comment
			# the rest gets evaluated, so we can have vars

			grep -q ^'# vtund ' '/etc/vtund.conf' && {
				local resulting_config_file="$TMPDIR/vtund.conf"

				explode $( head -n1 '/etc/vtund.conf' )
				while shift; do {
					case "$1" in
						'')
							break
						;;
						'-f')
							shift
							resulting_config_file="$1"
							break
						;;
						*)
					esac
				} done

				{
					# output content, so vars are expanded
					echo '#!/bin/sh'
					echo "cat >$resulting_config_file <<EOF"
					tail -n+2 /etc/vtund.conf
					echo 'EOF'
				} >"$TMPDIR/generate_conf.sh"
				.  "$TMPDIR/generate_conf.sh"
				rm "$TMPDIR/generate_conf.sh"

				head -n1 '/etc/vtund.conf' | cut -b 2- >'/tmp/vtund.sh'

				_log it check_vtund daemon info 'starting up'
				. '/tmp/vtund.sh'
			}
		}
	fi
}

_vpn_innercity_master_write_infojson()
{
	local funcname='vpn_innercity_master_write_infojson'
	local mtu="$( uci -q get network.innercityVPN.mtu || echo '1280' )"
	local port="$( uci -q get system.vpn.port || echo '5001' )"
	local file='/var/www/freifunk/vpn/index.html'
	local vtund_type="$( _vpn probe_vtund_type )"
	local clients="$( _vpn innercity_master_iface count_clients )"
	local mydomain

	mydomain="$( uci -q get system.vpn.dnsname )" || {
		_log it $funcname daemon info 'please set system.vpn.dnsname'
		return 1
	}

	mkdir -p "$( dirname "$file" )"
	{
		echo '{'
		echo "  \"server\": \"$mydomain\","
		echo "  \"maxmtu\": \"$mtu\","
		echo "  \"port_vtun_$vtund_type\": \"$port\","
		echo "  \"clients\": \"$clients\""
		echo '}'
	} >"$file"
}

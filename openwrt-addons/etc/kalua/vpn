#!/bin/sh

_vpn_innercity_master_vtund_write_config()
{
	local config="${1:-/tmp/vtund.conf}"
	local password="${2:-ff}"
	local node=2
	local node_max=1024

	# defaults to 'proto tcp'
	cat >"$config" <<EOF
default {
	type ether ;
	compress no ;
	encrypt no ;
	keepalive yes ;
	multi killold ;
	stat no ;
}
EOF

	while [ $node -lt $node_max ]; do {

		cat >>"$config" <<EOF

Node$node {
	device tap$node ;
	passwd $password ;

	up {   program ". /tmp/loader; _vpn innercity_master_iface up   %%" wait; } ;
	down { program ". /tmp/loader; _vpn innercity_master_iface down %%" wait; } ;
}
EOF
		node=$(( node + 1 ))
	} done
}

_vpn_innercity_master_vtund()
{
	local funcname='vpn_innercity_master_vtund'
	local action="$1"	# check_on_server|get_port|fire|start|stop|restart
	local config="${2:-/tmp/vtund.conf}"
	local line port pid pid_list

	port="$( uci -q get system.vpn.port || echo '5001' )"

	case "$action" in
		'check_on_server')
			if [ -e "$config" ]; then
				if pidof vtund >/dev/null; then
					if _net tcp_port_reachable '127.0.0.1' "$port" 'VTUN server' 2>/dev/null; then
						# e.g. 'VTUN server ver 3.X 01/11/2015'
						_log do $funcname daemon debug "$action: testconnection OK"
					else
						_log do $funcname daemon alert "$action: testconnection failed"
						_vpn innercity_master_vtund 'restart'
					fi

					if lsof | fgrep '/dev/net/tun' | grep -q ^'olsrd'; then
						pid_list="$( pgrep 'vpn_innercity_master_iface up' )"
						for pid in $pid_list; do {
							_log do $funcname daemon alert "hanging task: $pid '$( cat /proc/$pid/cmdline )'"
							kill $pid
						} done

						_olsr daemon restart 'blocked /dev/net/tun'
					else
						true
					fi
				else
					_log do $funcname daemon alert "$action: empty pid - will startup"
					_vpn innercity_master_vtund fire
				fi
			else
				_vpn innercity_master_vtund start
			fi
		;;
		'get_port')
			echo "$port"
		;;
		'fire')
			/usr/local/sbin/vtund -f "$config" -P "$port" -s
		;;
		'start')
			_vpn innercity_master_vtund_write_config
			_vpn innercity_master_vtund fire
		;;
		'stop')
			_watch hanging_command vtund
			_watch hanging_command vtund
			rm "$config"
		;;
		'restart')
			_vpn innercity_master_vtund stop
			_vpn innercity_master_vtund fire
		;;
	esac
}

_vpn_innercity_master_iface()
{
	local funcname='vpn_innercity_master_iface'
	local action="$1"	# up|down
	local dev="$2"		# e.g. tap276
	local i=0
	local bytes packets uptime uptime_sec numbers linenumber reason

	# we make sure, that this function (up or down) is
	# only used once from 1 caller - otherwise we wait
	while ! mkdir "/tmp/lock-$funcname"; do {
		read reason <"/tmp/lock-$funcname/info"

		# FIXME! why does this happen?
		if _file age "/tmp/lock-$funcname/info" -gt 600 ; then
			_log do $funcname daemon info "overaged: force unlocking: '$reason'"
			rm -fR "/tmp/lock-$funcname"
		else
			[ $i -gt 5 ] && {
				_log do $funcname daemon info "locked: $action/$dev must wait for '$reason'"
			}
			i=$(( i + 1 ))
			sleep $i
		fi
	} done

	reason="action: $action dev: $dev"
	echo "$reason" >"/tmp/lock-$funcname/info"
	_log do $funcname daemon info "[START] action: $action dev: $dev"

	local olsrd_config='/etc/olsrd.conf'
	local remote_nodenumber="${dev//tap/}"		# tap276 -> 276
	local tunnel_ip_here="$( _ipsystem getvar 'WIFIVPNSERVERADR' $remote_nodenumber )"
	local limit=8		# throttling - FIXME! use olsr_throttle?
	local limit_burst=5
	local mask=30		# ip here + ip other side + net + broadcast = 4 = /30
	local mtu=1450		# why? example-conf does it too
				# see: http://sourceforge.net/p/vtun/mailman/message/27935441/

	if [ "$action" = 'up' ]; then
		ip address add $tunnel_ip_here/$mask dev $dev
		ip link set dev $dev mtu $mtu up
		touch "/tmp/$funcname-devup-$dev"

		$IPT -I INPUT  -p udp --dport 698 -i $dev -j DROP
		$IPT -I INPUT  -p udp --dport 698 -i $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
		$IPT -I INPUT  -p udp --dport 698 -i $dev -s $tunnel_ip_here -j ACCEPT
		$IPT -I OUTPUT -p udp --dport 698 -o $dev -j DROP
		$IPT -I OUTPUT -p udp --dport 698 -o $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
		$IPT -I FORWARD -i $dev -j ACCEPT
		$IPT -I FORWARD -o $dev -j ACCEPT

		mkdir '/tmp/FREIFUNK_TUNNEL' && {
			$IPT -t nat -I POSTROUTING ! -o tap+ -j MASQUERADE
			# TODO: activate forwarding in kernel
		}

		# if we cannot find the interface name, insert it
		# only do it for 1st occurence - and dont touch 'private' sections
		grep -q "\"$dev\"" "$olsrd_config" || {
			linenumber="$( grep -n ^'Interface ' "$olsrd_config" | head -n1 | cut -d':' -f1 )"
			sed -i "${linenumber}s/Interface /Interface \"$dev\" /" "$olsrd_config"
			_olsr daemon restart "new interface '$dev' added in line $linenumber"
		}

		pidof olsrd >/dev/null || _olsr daemon start "$funcname() not active yet"

		_log do $funcname daemon info "[READY] action: $action dev: $dev"
	else
		ip link set dev $dev down

		uptime_sec=$( _file age "/tmp/$funcname-devup-$dev" )
		uptime=$( _stopwatch seconds2humanreadable "$uptime_sec" )
		rm "/tmp/$funcname-devup-$dev"

		set -- $( $IPT -nxvL | fgrep " $dev " | head -n1 )
		packets=$1
		bytes=$2
		$IPT -D FORWARD -o $dev -j ACCEPT

		set -- $( $IPT -nxvL | fgrep " $dev " | head -n1 )
		packets=$(( packets + $1 ))
		bytes=$(( bytes + $2 ))
		$IPT -D FORWARD -i $dev -j ACCEPT

		$IPT -D OUTPUT -p udp --dport 698 -o $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
		$IPT -D OUTPUT -p udp --dport 698 -o $dev -j DROP
		$IPT -D INPUT  -p udp --dport 698 -i $dev -s $tunnel_ip_here -j ACCEPT
		$IPT -D INPUT  -p udp --dport 698 -i $dev -m limit --limit $limit/s --limit-burst $limit_burst -j ACCEPT
		$IPT -D INPUT  -p udp --dport 698 -i $dev -j DROP

		numbers="bytes/packets: $( _sanitizer do "$bytes/$packets" number_humanreadable ) = $(( bytes / uptime_sec / 1000 )) KB/s"
		_log do $funcname daemon alert "[READY] action: $action dev: $dev $numbers uptime: $uptime"
	fi

	rm -fR "/tmp/lock-$funcname"
}

_vpn_hideandseek_master_get()
{
	# the effective inet_offering node
	echo '/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY'
}

_vpn_hideandseek_user_list()
{
	local table_name='hideandseek'

	ls -1 "/tmp/$table_name-"* | cut -d'-' -f2
}

_vpn_hideandseek_user_probe()
{
	local ip="$1"
	local table_name='hideandseek'

	test -e "/tmp/$table_name-$ip"
}

_vpn_hideandseek_user_add()
{
	local funcname='vpn_hideandseek_user_add'
	local ip="$1"		# 1.2.3.4 or 2.3.4.5/26 or 'setup_default_route'
	local option="$2"	# e.g. 'exclude'

	local mask=32
	local local_net='10.0.0.0/8'
	local table_name='hideandseek'
	local table_id=50
	local tunnel_dev='tap0'
	local user_id myhna markerfile special_table

	case "$ip" in
		'setup_default_route')
			# is called from hotplug, when interface comes up:

			bool_true 'system.@vpn[0].hideandseek_disabled' && return 0

			grep -q ^"$table_id $table_name" '/etc/iproute2/rt_tables' || {
				echo "$table_id $table_name" >>'/etc/iproute2/rt_tables'
			}

			ip rule show | grep -q ^'9999:' || {
				# for testing ICMP + faster DNS lookups
				ip rule add from all to '8.8.8.8/32' lookup main prio 9999
			}

			ip route add default via "$( _ipsystem getvar WIFIVPNSERVERADR )" dev "$tunnel_dev" table "$table_name"
			ip route flush cache

			return 0
		;;
		*'/'*)
			mask="${ip#*/}"
			ip="${ip%/*}"
		;;
	esac

	markerfile="/tmp/$table_name-$ip-$mask"
	[ -e "$markerfile" ] && return 0

	if [ "$option" = 'exclude' ]; then
		special_table='lookup main'
	else
		special_table="table $table_name"
	fi

	if _net local_inet_offer >/dev/null; then
		read user_id 2>/dev/null <"/tmp/$funcname-$mask" || {
			case "$mask" in
				32) user_id=10000 ;;	# wider masks are later processed,
				31) user_id=11000 ;;	# otherwise we cannot make finer rules
				30) user_id=12000 ;;	# for single ip's from a big subnet:
				29) user_id=13000 ;;	#
				28) user_id=14000 ;;	#     0 = table local
				27) user_id=15000 ;;	#   ... = table hideandseek *this*
				26) user_id=16000 ;;	# 32766 = table main
				25) user_id=17000 ;;	# 32767 = table default
				24) user_id=18000 ;;
				23) user_id=19000 ;;
				22) user_id=20000 ;;
				21) user_id=21000 ;;
				20) user_id=22000 ;;
				19) user_id=23000 ;;
				18) user_id=24000 ;;
				17) user_id=25000 ;;
				16) user_id=26000 ;;
			esac

			echo "$user_id" >"/tmp/$funcname-$mask"
		}

		echo "$user_id" >"$markerfile"
		_watch counter "/tmp/$funcname-$mask" increment 4

		ip rule add from "$ip/$mask"   to "$local_net" prio "$user_id"           lookup main		# internal traf
		ip rule add from "$local_net"  to "$ip/$mask"  prio "$(( user_id + 1 ))" lookup main		# internal traf
		ip rule add from "$ip/$mask"                   prio "$(( user_id + 2 ))" $special_table		# client to internet
		ip rule add to   "$ip/$mask"                   prio "$(( user_id + 3 ))" lookup main		# internet to client
		ip route flush cache

		_log do $funcname daemon info "activated for $ip"
	else
		:
		# delegate to master
	fi
}

_vpn_hideandseek_user_disable()
{
	:
	# TODO: call during bad/lost tunnel and automatically reenable if tunnel up again
}

_vpn_hideandseek_user_del()
{
	local funcname='vpn_hideandseek_user_del'
	local ip="$1"
	local option="$2"	# e.g. 'exclude'

	local mask=32
	local local_net='10.0.0.0/8'
	local user_id markerfile special_table
	local table_name='hideandseek'

	case "$ip" in
		*'/'*)
			mask="${ip#*/}"
			ip="${ip%/*}"
		;;
	esac

	markerfile="/tmp/$table_name-$ip-$mask"
	[ -e "$markerfile" ] || return 0
	read user_id <"$markerfile"

	if [ "$option" = 'exclude' ]; then
		special_table='lookup main'
	else
		special_table="table $table_name"
	fi

	ip rule del from "$ip/$mask"   to "$local_net" prio "$user_id"           lookup main		# internal traf
	ip rule del from "$local_net"  to "$ip/$mask"  prio "$(( user_id + 1 ))" lookup main		# internal traf
	ip rule del from "$ip/$mask"                   prio "$(( user_id + 2 ))" $special_table		# client to internet
	ip rule del to   "$ip/$mask"                   prio "$(( user_id + 3 ))" lookup main		# internet to client
	ip route flush cache

	rm "$markerfile"
	_log do $funcname daemon info "deleted $ip"
}

_vpn_hideandseek_master_vtund_write_config()
{
	local file="${1:-/tmp/vtund.conf}"
	local name="Node$NODENUMBER"
	local ifname

	[ -e "$file" ] && return 1

	if [ "$( uci -q get network.mytunnel.ifname )" = 'tap0' ]; then
		# oldstyle
		ifname='mytunnel'
	else
		ifname='innercityvpn'
	fi

	cat >"$file" <<EOF
$name {
	passwd ff ;
	type ether ;
	persist yes ;

	up {   program "ifup   $ifname" wait; };
	down { program "ifdown $ifname" wait; };
}
EOF
}

_vpn_hideandseek_vtund()
{
	local action="$1"	# check_on_client|fire|start|stop|restart
	local config="${2:-/tmp/vtund.conf}"
	local server='4.v.weimarnetz.de'	# TODO: get server list from /var/run/services_olsr
	local server_port='5001'
	local name="Node$NODENUMBER"

	case "$action" in
		'check_on_client')
			if _vpn hideandseek_master_vtund_write_config; then
				# config now written
				_vpn hideandseek_vtund fire
			else
				# config already there

				# TODO: some daemon checks:
				# - ping6?
				# - activate for hideandseek if 3 times good
				# - deactivate for hideandseek if 1 x bad

				_vpn check_daemon
			fi
		;;
		'fire')
			vtund -f "$config" "$name" "$server" -P "$server_port"
		;;
		'start')
			_vpn hideandseek_master_vtund_write_config
			_vpn hideandseek_vtund fire
		;;
		'stop')
			_watch hanging_command vtund
			_watch hanging_command vtund
			rm "$config"
		;;
		'restart')
			_vpn hideandseek_vtund stop
			_vpn hideandseek_vtund fire
		;;
	esac
}

# needs better name:
_vpn_check_daemon()
{
	# todo: use a function and more varnames
	# maybe better?: grep "tap[0-9]:" /proc/net/dev -> _net dev_is_valid 'tapX'
	if pidof vtund >/dev/null; then
		logread >'/tmp/logread.out'

		dev_has_probs()
		{
			if ip address show dev "$1" | grep -q 'inet6 '; then
				return 1
			else
				return 0
			fi
		}

		restart_vtund()
		{
			local pids
			_log do check_vtund daemon alert "restarting: $1"

			while pids="$( pidof vtund )"; do {
				_log do check_vtund daemon info "killing old pids: $pids"
				_watch hanging_command vtund
			} done

			if [ -e '/tmp/vtund.sh' ]; then
				# oldstyle
				killall vtund
				. '/tmp/vtund.sh'
			else
				_vpn hideandseek_vtund stop
				_log sleep "restart_vtund:$1" 60 step 10
				_vpn hideandseek_vtund start
			fi
		}

		# TODO:
		# vtund[22585]: Session voip-n2[84.184.146.131] closed
		# vtund[22989]: Session voip-n2[84.184.146.131] opened

		if   dev_has_probs 'tap0'; then
			restart_vtund 'dev is not fully up'
		elif grep -q 'Connection timed out' '/tmp/logread.out'; then
			[ $( grep "vtund\[[0-9]*\]:" '/tmp/logread.out' | fgrep -c 'Connection timed out' '/tmp/logread.out' ) -gt 5 ] && {
				grep -q ' vtund: link_up ' '/tmp/logread.out' || {
					restart_vtund 'our pubip has changed?'
				}
			}
		elif grep -q "Can't resolv server address" '/tmp/logread.out'; then
			[ $( grep "vtund\[[0-9]*\]:" '/tmp/logread.out' | fgrep -c "Can't resolv server address" '/tmp/logread.out' ) -gt 5 ] && {
				restart_vtund 'servers pubip has changed?'
			}
		fi

		rm '/tmp/logread.out'
	else
		_log do check_vtund daemon alert "starting up after crash"

		if [ -e '/tmp/vtund.sh' ]; then
			. '/tmp/vtund.sh'
		else
			_vpn hideandseek_vtund start
		fi
	fi
}

_vpn_x()
{
	which vtund >/dev/null || {
		_log do x daemon info "vtund not installed"
		return 0
	}

	if [ -e '/etc/vtund.conf' ]; then
		case "$( head -n1 '/etc/vtund.conf' )" in
			# oldstyle or default-conf
			*'4.v.weimarnetz.de'*|'#')
				_net local_inet_offer cached >/dev/null && {
					_vpn hideandseek_vtund check_on_client
					return 0
				}
			;;
		esac
	else
		_net local_inet_offer cached >/dev/null && {
			_vpn hideandseek_vtund check_on_client
			return 0
		}
	fi

	# oldstyle or e.g. special config:
	if [ -e '/tmp/vtund.sh' ]; then
		_vpn check_daemon
	else
		[ -e "/etc/vtund.conf" ] && {			# startup-code must be a comment at first line
			grep -q ^'# vtund ' "/etc/vtund.conf" && {
				head -n1 "/etc/vtund.conf" | cut -b 2- >"/tmp/vtund.sh"

				_log do check_vtund daemon info "starting up"
				. '/tmp/vtund.sh'
			}
		}
	fi
}

#!/bin/sh

which uci >/dev/null || {
	logger -s "$0: uci() faking OpenWrt-uci, use '/etc/kalua_uci' for your vars"
	# when there is no output, we return with 0 (unlike to normal uci)
	# FIXME! parsing var='value' (with quotes)

	cat >>"$LOADER" <<EOF
uci()	# e.g. uci -q get system.@profile[0].nodenumber
{
	case "\$1" in
		'-q')
			shift
		;;
	esac

	case "\$1" in
		show)
			[ -e /etc/kalua_uci ] && cat /etc/kalua_uci
		;;
		set)
			grep -q ^"\$2" /etc/kalua_uci || echo "\$2" >>/etc/kalua_uci
		;;
		get)
			[ -e /etc/kalua_uci ] && {
				local line
				while read -r line; do
					case "\$line" in
						"\$2="*)
							echo "\$line" | cut -d'=' -f2
							return 0
						;;
						"\$2='"*)
							echo "\$line" | cut -d"'" -f2 | cut -d"'" -f1
							return 0
						;;
						"\$2=\""*)
							echo "\$line" | cut -d'"' -f2 | cut -d'"' -f1
							return 0
						;;
					esac
				done </etc/kalua_uci
			}

			return 1
		;;
	esac
}
EOF
	. "$LOADER"	# for above uci()

	case "$( readlink /bin/sh )" in
		'dash')
			# TODO: a lot of scripts fail in dash
			logger -s "$0: [ERR] please symlink your 'dash' = /bin/sh to /bin/bash: rm /bin/sh && ln -s /bin/bash /bin/sh"
		;;
	esac
}

# e.g. FFF_PLUS_VERSION
[ -e '/etc/variables_fff+' ] && . '/etc/variables_fff+'

which logread >/dev/null || {
	# needed e.g. on vpn-server, $1 can be e.g. '-f'
	# dont overload with travis, otherwise shellsheck complains about SC2119
	[ -z "$TRAVIS" ] && echo "logread() { echo no_native_logread;tail -n300 /var/log/syslog \$1; }"
}

# workaround for missing 'ip'
if [ -e '/sbin/ip' -o -e '/usr/sbin/ip' ]; then
	ip neigh 2>/dev/null >/dev/null || {
		logger -s "$0: ip() workaround for missing 'ip neigh' feature of busybox (not IPv6 capable)"

		cat <<EOF
ip() {
	case "\$3" in
		n|neigh)
			# ip -f inet neigh
			[ "\$2" = inet6 ] && return 0
			shift 2
		;;
	esac

	case "\$1" in
		n|neigh)
			local line
			local ip_wish="\$4"	# ip neigh show to <IP>
			local dev_wish="\$4"	# ip neigh show dev <dev>

			case "\$2" in
				del|add|change)
					return 0
				;;
			esac

			while read -r line; do {
				case "\$line" in
					IP*|*'00:00:00:00:00:00'*)
					;;
					*)
						set -- \$line
						if [ -z "\$ip_wish" ]; then
							echo "\$1 dev \$6 lladdr \$4 STALE"
						elif [ "\$ip_wish" = "\$1" ]; then
							echo "\$1 dev \$6 lladdr \$4 STALE"
						elif [ "\$dev_wish" = "\$6" ]; then
							echo "\$1 dev \$6 lladdr \$4 STALE"
						fi
					;;
				esac
			} done </proc/net/arp
		;;
		*)
			command ip "\$@"
		;;
	esac
}
EOF
	}
else
	cat <<EOF
ip() {
	logger -s "$0: [ERR] iproute2 not installed: ip \$*"
}
EOF
fi

[ -e '/etc/profile' ] && {
	# avoid sourcing old loader via /etc/profile
	LODEV=lo . '/etc/profile' 2>/dev/null >/dev/null
	echo "export PATH=$PATH"
}

# http://wiki.openwrt.org/doc/uci/system#time.zones
TIMEZONE_BERLIN="CET-1CEST,M3.5.0,M10.5.0/3"
TIMEZONE="$( uci -q get system.@system[0].timezone )"
TIMEZONE="${TIMEZONE:-$TIMEZONE_BERLIN}"

HOSTNAME="$( uci -q get system.@system[0].hostname )"
HOSTNAME="${HOSTNAME:-$( cat '/etc/hostname' )}"
HOSTNAME="${HOSTNAME:-$( hostname 2>/dev/null || echo 'anonymous' )}"

MONITORING_SERVERIP="$( uci -q get system.@monitoring[0].serverip )"
MONITORING_SERVERIP="${MONITORING_SERVERIP:-84.38.67.43}"

if   [ -e '/etc/openwrt_release' ]; then
	. '/etc/openwrt_release'
	OPENWRT_REV="${DISTRIB_REVISION//[^0-9]/}"
elif [ -e '/etc/banner' ]; then					# FIXME for 'dash'
	set -- $( grep ' r[1-9][0-9][0-9]' '/etc/banner' )	# CHAOS CALMER (Bleeding Edge, r46435)
	OPENWRT_REV="${5//[^0-9]/}"				# 'r46435)' -> 46435
fi
# '0' is a good/simple test for 'is vpn server'
OPENWRT_REV="${OPENWRT_REV:-0}"

OPKG="$( which /bin/[o,i]pkg )"
OPKG="${OPKG:-'_software opkg_raminstaller'}"

# each node has it's own "neary uniq" DHCP-range
# which must be valid across the whole network,
# e.g. 192.168.8.0/16 on node 8
NODENUMBER_ROAMING="$( uci get system.@profile[0].nodenumber )"
while [ ${NODENUMBER_ROAMING:=2} -gt 254 ]; do {
	NODENUMBER_ROAMING=$(( NODENUMBER_ROAMING - 254 ))	# e.g. node 255 -> 1
} done


case "$( uci -q get olsrd.@Interface[0].interface )" in
	"'"*"'")
		logger -s "$0: uci() repairing https://dev.openwrt.org/ticket/19539"

		cat <<EOF
uci()
{
	local var value rc

	if [ "\$1" = 'get' -o "\$2" = 'get' ]; then
		value="\$( /sbin/uci \$* )"
		rc=\$?
		echo "\$value" | sed -e "s/^'//" -e "s/'$//"
		return \$rc
	elif [ "\$1" = 'set' ]; then
		var="\$( echo "\$2" | cut -d'=' -f1 )"
		value="\$( echo "\$2" | cut -d'=' -f2,3 )"
		/sbin/uci set \$var="\$value"
		return \$rc
	else
		/sbin/uci \$*
	fi
}
EOF
	;;
esac

[ $OPENWRT_REV -ge 44482 -a $OPENWRT_REV -lt 45362 ] && {
	logger -s "$0: mv() repairing https://dev.openwrt.org/ticket/19432"

	cat <<EOF
mv()
{
	case "\$1" in
		'/tmp'*|'/database'*)
			/bin/mv "\$1" "\$2"
			return \$?
		;;
	esac

	case "\$2" in
		'/tmp'*|'/database'*)
			/bin/mv "\$1" "\$2"
			return \$?
		;;
	esac

	cp \$1 /tmp/mv_\$$
	rm \$1
	cp /tmp/mv_\$$ \$2
	rm /tmp/mv_\$$
}
EOF
}

read -r HARDWARE 2>/dev/null <'/etc/HARDWARE' || {
	# model name  : Intel(R) Xeon(R) CPU E5-2620 0 @ 2.00GHz
	set -- $( grep ^'model name' '/proc/cpuinfo' | head -n1 )
	shift 3
	HARDWARE="$*"
}

PERMDIR='/www/keep'	# for permanent (kept when rebooting)
mkdir -p "$PERMDIR"

	cat <<EOF

# from $0.user
export TZ='$TIMEZONE'
TMPDIR=$TMPDIR
NODENUMBER_ROAMING=$NODENUMBER_ROAMING
test "\$NODENUMBER" || NODENUMBER=$( uci -q get system.@profile[0].nodenumber )
test "\$CONFIG_PROFILE" || CONFIG_PROFILE=$( uci -q get system.@profile[0].name )
HARDWARE='$HARDWARE'
HOSTNAME='$HOSTNAME'
OPKG=$OPKG
MONITORING_SERVERIP=$MONITORING_SERVERIP
export HOME=$( grep ^${USER:-root}: /etc/passwd | cut -d: -f6 )
FFF_PLUS_VERSION=$FFF_PLUS_VERSION;OPENWRT_REV=$OPENWRT_REV
PERMDIR=$PERMDIR

isnumber(){ test 2>/dev/null \${1-a} -eq \$*;}
bool_true(){ case \$(uci -q get \$1) in 1|on|true|yes|en*);;*)false;;esac;}
EOF
# isnumber: http://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash

read -r _ MEMTOTAL _ <'/proc/meminfo'
[ $MEMTOTAL -gt 16384 ] || echo 'LOWMEM=true'

test_iptables()
{
	# direct call can fail if PATH not set yet
	if [ -e '/usr/sbin/iptables' ]; then
		/usr/sbin/iptables --help | fgrep -q -- '--wait'
	elif [ -e '/sbin/iptables' ]; then
		/sbin/iptables --help | fgrep -q -- '--wait'
	else
		false
	fi
}

if test_iptables; then
	echo "IPT='iptables --wait'"
else
	echo 'IPT=iptables'
fi

echo "TC=$( which tc || echo 'false' )"		# TODO: wrapper function

if [ -e "$LOADER_FINAL" ]; then
	FILE_NETPARAM="$TMPDIR/NETPARAM"

	# FIXME!
	[ -e "$FILE_NETPARAM" ] || {
		[ -e '/tmp/NETPARAM' ] && FILE_NETPARAM='/tmp/NETPARAM'
	}
else
	FILE_NETPARAM='/www/NETPARAM'
fi

if [ -e "$FILE_NETPARAM" ]; then		# FIXME! better concept needed
	while read -r LINE; do {
		case "$LINE" in
			*"="*)
				printf '%s' "$LINE;"
			;;
		esac
	} done <"$FILE_NETPARAM"
	echo "BATADR=$( uci -q get network.mybridge.ipaddr )"

	. "$FILE_NETPARAM"

	printf '%s' "$WIFIDEV" >"$TMPDIR/WIFIDEV"	# is a hack for fast seeking our dev/ip
	printf '%s' "$WIFIADR" >"$TMPDIR/WIFIADR"
else
        logger -s "$0: [OK] could not use '$FILE_NETPARAM' - maybe later"
fi

[ $OPENWRT_REV -eq 0 -a -e '/etc/profile.d/kalua.sh' ] && cat <<EOF
case "\$-" in
	*i*)
		. /etc/profile.d/kalua.sh
	;;
esac
EOF

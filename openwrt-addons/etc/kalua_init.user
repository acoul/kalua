#!/bin/sh

[ -e "/etc/variables_fff+" ] && . "/etc/variables_fff+"

which uci >/dev/null || {
	# binary missing on e.g. vpn-server / debian
	# but we fake it via '/etc/kalua_uci'
	# when there is no output, we return with 0 (unlike to normal uci)
	# FIXME! parsing var='value' (with quotes)

	cat >>"$LOADER" <<EOF
uci()	# e.g. uci -q get system.@profile[0].nodenumber
{
	case "\$1" in
		'-q')
			shift
		;;
	esac

	case "\$1" in
		show)
			[ -e /etc/kalua_uci ] && cat /etc/kalua_uci
		;;
		set)
			grep -q ^"\$2" /etc/kalua_uci || echo "\$2" >>/etc/kalua_uci
		;;
		get)
			[ -e /etc/kalua_uci ] && {
				local line
				while read line; do
					case "\$line" in
						"\$2="*)
							echo "\$line" | cut -d'=' -f2
							return 0
						;;
						"\$2='"*)
							echo "\$line" | cut -d"'" -f2 | cut -d"'" -f1
							return 0
						;;
						"\$2=\""*)
							echo "\$line" | cut -d'"' -f2 | cut -d'"' -f1
							return 0
						;;
					esac
				done </etc/kalua_uci
			}

			return 1
		;;
	esac
}
EOF
	. "$LOADER"	# for above uci()

	case "$( readlink /bin/sh )" in
		'dash')
			# TODO: a lot of scripts fail in dash
			logger -s '[ERR] please symlink /bin/sh to /bin/bash: rm /bin/sh && ln -s /bin/bash /bin/sh'
		;;
	esac

	MYPATH="$( grep 'PATH=' "/etc/profile" | head -n1 )"
	case "$MYPATH" in
		'export PATH='*)
			echo "$MYPATH"
		;;
		*'PATH='*)
			echo "export $MYPATH"
		;;
	esac
}

which logread >/dev/null || {
	# e.g. vpn-server
	echo 'logread() { echo "no native logread"; tail -n300 "/var/log/syslog" $1; }'
}

# workaround for missing 'ip neigh' feature of busybox (but no IPv6)
ip neigh 2>/dev/null || {
	cat <<EOF
ip() {
	case "\$1" in
		n|neigh)
			local line
			local ip_wish="\$4"	# ip neigh show to <IP>

			case "\$2" in
				del|add|change)
					return 0
				;;
			esac

			while read line; do {
				case "\$line" in
					IP*|*'00:00:00:00:00:00'*)
					;;
					*)
						set -- \$line
						[ -n "\$ip_wish" ] && {
							[ "\$ip_wish" = "\$1" ] || continue
						}
					;;
				esac

				echo "\$1 dev \$6 lladdr \$4 STALE"
			} done </proc/net/arp
		;;
		*)
			/sbin/ip "\$@"
		;;
	esac
}
EOF
}

# TODO: we should make sure it is on 'tmpfs' (e.g. server)
if   mkdir 2>/dev/null -p '/var/run/kalua'; then
	TMPDIR='/var/run/kalua'
elif mkdir 2>/dev/null -p '/run/kalua' ; then
	TMPDIR='/run/kalua'
else
	TMPDIR='/tmp'
fi

mkdir -p "$TMPDIR"
chmod -R 777 "$TMPDIR" 2>/dev/null

# http://wiki.openwrt.org/doc/uci/system#time.zones
TIMEZONE_BERLIN="CET-1CEST,M3.5.0,M10.5.0/3"
TIMEZONE="$( uci -q get system.@system[0].timezone )"
TIMEZONE="${TIMEZONE:-$TIMEZONE_BERLIN}"

HOSTNAME="$( uci -q get system.@system[0].hostname )"
HOSTNAME="${HOSTNAME:-$( cat '/etc/hostname' )}"
HOSTNAME="${HOSTNAME:-$( hostname 2>/dev/null || echo 'anonymous' )}"

MONITORING_SERVERIP="$( uci -q get system.@monitoring[0].serverip )"
MONITORING_SERVERIP="${MONITORING_SERVERIP:-84.38.67.43}"

# '0' is a good/simple test for 'is vpn server'
OPENWRT_REV="$( cut -b2- '/etc/openwrt_version' 2>/dev/null || echo '0' )"

OPKG="$( which /bin/[o,i]pkg )"
OPKG="${OPKG:-_software opkg_raminstaller}"

# each node has it's own "neary uniq" DHCP-range
# which must be valid across the whole network,
# e.g. 192.168.8.0/16 on node 8
NODENUMBER_ROAMING="$( uci get system.@profile[0].nodenumber )"
while [ ${NODENUMBER_ROAMING:=2} -gt 254 ]; do {
	NODENUMBER_ROAMING=$(( NODENUMBER_ROAMING - 254 ))	# e.g. node 255 -> 1
} done


case "$( uci -q get olsrd.@Interface[0].interface )" in
	"'"*"'")
		cat <<EOF
uci()	# https://dev.openwrt.org/ticket/19539
{
	local var value rc

	if [ "\$1" = 'get' -o "\$2" = 'get' ]; then
		value="\$( /sbin/uci \$* )"
		rc=\$?
		echo "\$value" | sed -e "s/^'//" -e "s/'$//"
		return \$rc
	elif [ "\$1" = 'set' ]; then
		var="\$( echo "\$2" | cut -d'=' -f1 )"
		value="\$( echo "\$2" | cut -d'=' -f2,3 )"
		/sbin/uci set \$var="\$value"
		return \$rc
	else
		/sbin/uci \$*
	fi
}
EOF
	;;
esac

[ $OPENWRT_REV -ge 44482 -a $OPENWRT_REV -lt 45362 ] && {
	cat <<EOF
mv()	# https://dev.openwrt.org/ticket/19432
{
	case "\$1" in
		'/tmp'*|'/database'*)
			/bin/mv "\$1" "\$2"
			return \$?
		;;
	esac

	case "\$2" in
		'/tmp'*|'/database'*)
			/bin/mv "\$1" "\$2"
			return \$?
		;;
	esac

	cp \$1 /tmp/mv_\$$
	rm \$1
	cp /tmp/mv_\$$ \$2
	rm /tmp/mv_\$$
}
EOF
}

read HARDWARE 2>/dev/null <'/etc/HARDWARE' || {
	# model name  : Intel(R) Xeon(R) CPU E5-2620 0 @ 2.00GHz
	set -- $( grep ^'model name' '/proc/cpuinfo' | head -n1 )
	shift 3
	HARDWARE="$*"
}
	cat <<EOF

# from $0.user
export TZ='$TIMEZONE'
TMPDIR=$TMPDIR
NODENUMBER_ROAMING=$NODENUMBER_ROAMING
test "\$NODENUMBER" || NODENUMBER=$( uci -q get system.@profile[0].nodenumber )
test "\$CONFIG_PROFILE" || CONFIG_PROFILE=$( uci -q get system.@profile[0].name )
HARDWARE='$HARDWARE'
HOSTNAME='$HOSTNAME'
OPKG='$OPKG'
MONITORING_SERVERIP=$MONITORING_SERVERIP
export HOME=$( grep -e ^"${USER:-root}:" '/etc/passwd' | cut -d':' -f6 )
FFF_PLUS_VERSION=$FFF_PLUS_VERSION;OPENWRT_REV=$OPENWRT_REV

isnumber(){ test 2>/dev/null \${1-a} -eq \$*;}
bool_true(){ case \$(uci -q get \$1) in 1|on|true|yes|en*);;*)false;;esac;}
EOF
# isnumber: http://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash

read NOP MEMTOTAL NOP <"/proc/meminfo"
[ $MEMTOTAL -gt 16384 ] || {
	echo "LOWMEM=true"
#	echo 'while read LOAD </proc/loadavg; do case $PRELOAD$LOAD in 0.*) break ;; *) echo "kalua-loader: $0: $$: LOAD: $LOAD - wait 60 sec" >/dev/console; /bin/sleep 60 ;; esac; done'
	# PRELOAD is a (normally unset) var, which can be filled to fool this check, e.g. PRELOAD=0.
}

# FIXME! this can fail if PATH not set yet
# usually at /usr/sbin/iptables or /sbin/iptables
if iptables --help | fgrep -q -- '--wait'; then	# TODO: wrapper function
	echo "IPT='iptables --wait'"
else
	echo "IPT='iptables'"
fi

echo "TC=$( which tc || echo 'false' )"		# TODO: wrapper function

if [ -e "$LOADER_FINAL" ]; then
	FILE_NETPARAM="/tmp/NETPARAM"
else
	FILE_NETPARAM="/www/NETPARAM"
fi

if [ -e "$FILE_NETPARAM" ]; then		# FIXME! better concept needed
	while read LINE; do {
		case "$LINE" in
			*"="*)
				echo -n "${LINE};"
			;;
		esac
	} done <"$FILE_NETPARAM"
	echo "BATADR='$( uci -q get network.mybridge.ipaddr )'"

	. "$FILE_NETPARAM"

	echo -n "$WIFIDEV" >"/tmp/WIFIDEV"	# is a hack for fast seeking our dev/ip
	echo -n "$WIFIADR" >"/tmp/WIFIADR"
else
        logger -s "$0 [OK] could not use '$FILE_NETPARAM' - maybe later"
fi

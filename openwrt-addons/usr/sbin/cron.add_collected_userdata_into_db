#!/bin/sh
. /tmp/loader

FILE="/tmp/COLLECT_DATA"	# filled via _netfilter_user_stats_process() and /www/cgi-bin-collect.sh
FILE_TEMP="$FILE.working"

[ -e "$FILE" ] || exit 0
mv "$FILE" "$FILE_TEMP"
FILE="$FILE_TEMP"

UNIXTIME="$( date +%s )"
UPTIME_NOW="$( _system uptime sec )"
OVERALL_BYTES=0
LIST_OVERALL_USERS=

while read QUERY_STRING; do {
	eval $( _http query_string_sanitize )	# UPTIME|REMOTE_ADDR|CMA|CTU|CBI|CBO
	LIST="$( _http query_string_group2list CMA_ )"

	for ID in $LIST; do {			# defined in netfilter_user_stats_process()
		eval CMA="\$CMA_${ID}"		# client mac address
		eval CIA="\$CIA_${ID}"		# client ip address
		eval CTU="\$CTU_${ID}"		# client time used
		eval CBI="\$CBI_${ID}"		# client bytes incoming
		eval CBO="\$CBO_${ID}"		# client bytes outgoing
		eval CAH="\$CAH_${ID}"		# client auth hash

		touch "/tmp/vds_user_${CMA}"	# fixme! needed for 'roaming'

		[ $(( $CBI + $CBO )) -eq 0 ] && continue
		OVERALL_BYTES=$(( $OVERALL_BYTES + $CBI + $CBO ))
		LIST_OVERALL_USERS="$LIST_OVERALL_USERS $CMA"

#		case "$(date +%A)" in Saturday|Sunday);;*)case "$REMOTE_ADDR" in 10.63.222.*|10.63.2.*|10.63.156.*);;*)_vpn hideandseek_user_add "$REMOTE_ADDR/26";;esac;;esac

		LOGIN_ID="$( _db user login query hash2id "$CAH" )"
		[ -z "$LOGIN_ID" ] && {
			_log do map2login daemon info "ignoring: no db-entry/hash for $CMA/${CIA:-noCIA} @ $REMOTE_ADDR with in/out $CBI/$CBO bytes"
			continue
		}

		DEVICE_ID="$( _db user device query string2id "A='$LOGIN_ID';B='${CMA:-unsetmacaddress}'" )"	# fixme! build database-abstraction
		[ -n "$DEVICE_ID" ] || {
			_log do plot_remote_user_into_local_db daemon info "from $REMOTE_ADDR with mac/ip $CMA/$CIA and hash $CAH"
			/www/cgi-bin-sql.sh "$CAH" "$CMA" "" deepcheck
		}

		DEVICE_ID="$( _db user device query string2id "A='$LOGIN_ID';B='${CMA:-unsetmacaddress}'" )"
		[ -n "$DEVICE_ID" ] && {
			eval $( _db user login show "$LOGIN_ID" "PROFILE_ID INSTALLED" )
			eval $( _db user device show "$DEVICE_ID" )	# all, e.g. FIRSTSEEN

			[ $FIRSTSEEN -lt $INSTALLED ] && {
				_log do firstseen_plausicheck daemon alert "timeset to $UNIXTIME: FIRSTSEEN<INSTALLED: $FIRSTSEEN<$INSTALLED"
				FIRSTSEEN="$UNIXTIME"
			}

			LASTSEEN="$(( $UNIXTIME - ($UPTIME_NOW - $UPTIME) ))"	# design-issue in database, so we must rethink:
			USED_TRAFFIC=$(( $USED_TRAFFIC + $CBI ))		# USED_TRAFFIC -> USED_TRAFFIC_DOWNLOAD
			USED_TRAFFIC_TODAY=$(( $USED_TRAFFIC_TODAY + $CBO ))	# USED_TRAFFIC_TODAY -> USED_TRAFFIC_UPLOAD
			USED_TIME=$(( $USED_TIME + $CTU ))

			_log do loop daemon info "updating $CMA/$CIA from node $REMOTE_ADDR: +$CBI/$CBO bytes, +$CTU sec"
			_db user device update \
				"$DEVICE_ID" \
				"$USER_ID" \
				"$MAC" \
				"$DEVTYPE" \
				"$LANG" \
				"$FIRSTSEEN" \
				"$LASTSEEN" \
				"$USED_TRAFFIC" \
				"$USED_TIME" \
				"$USED_TRAFFIC_TODAY" \
				"$USED_TIME_TODAY" \
				"$ISOLATION"

			TIME_MODEL=; MAX_TIME=; MAX_TRAFFIC=
			eval $( _db user profile show "$PROFILE_ID" "TIME_MODEL MAX_TIME MAX_TRAFFIC" )
			LOCK_LOGIN=

			[ -n "$MAX_TIME" ] && {				# minutes
				MAX_TIME=$(( $MAX_TIME * 60 ))		# seconds

				if [ "$TIME_MODEL" = "0" ]; then	# used time
					[ $USED_TIME -gt $MAX_TIME ] && {
						_log do lock_login daemon alert "TIME_MODEL: $TIME_MODEL USED_TIME: $USED_TIME MAX_TIME: $MAX_TIME LOGIN_ID: $LOGIN_ID PROFILE_ID: $PROFILE_ID DEVICE_ID: $DEVICE_ID"
						LOCK_LOGIN="-2"
					}
				else					# passed time
					[ $(( $LASTSEEN - $FIRSTSEEN )) -gt $MAX_TIME ] && {
						_log do lock_login daemon alert "TIME_MODEL: $TIME_MODEL FIRSTSEEN: $FIRSTSEEN LASTSEEN: $LASTSEEN MAX_TIME: $MAX_TIME LOGIN_ID: $LOGIN_ID PROFILE_ID: $PROFILE_ID DEVICE_ID: $DEVICE_ID"
						LOCK_LOGIN="-2"
					}
				fi
			}

# fix traffic counters
#			[ -n "$MAX_TRAFFIC" ] && {			# kilobytes
#				[ $(( ($USED_TRAFFIC + $USED_TRAFFIC_TODAY) / 1024 )) -gt $MAX_TRAFFIC ] && {
#					_log do lock_login daemon alert "USED_TRAFFIC: $USED_TRAFFIC USED_TRAFFIC_TODAY: $USED_TRAFFIC_TODAY MAX_TRAFFIC: $MAX_TRAFFIC LOGIN_ID: $LOGIN_ID PROFILE_ID: $PROFILE_ID DEVICE_ID: $DEVICE_ID"
#					LOCK_LOGIN="-3"
#				}
#			}

			[ -n "$LOCK_LOGIN" ] && {
				eval $( _db user login show "$LOGIN_ID" )
				DEVICE_QUANTITY="$LOCK_LOGIN"

				_log do lock_login daemon alert "ID: $LOGIN_ID, reason: $LOCK_LOGIN, comment/user/pass: $COMMENT/$USERNAME/$PASSWORD"

				_db user login update \
					"$LOGIN_ID" \
					"$PROFILE_ID" \
					"$COMMENT" \
					"$USERNAME" \
					"$PASSWORD" \
					"$DEVICE_QUANTITY" \
					"$INSTALLED" \
					"$FUZZY"

				_db user login index_gen lock "$LOGIN_ID"

				case "$REMOTE_ADDR" in
					$WIFIADR|$LANADR|$WANADR)
						_netfilter user_del "$CMA" 'lock_login'
					;;
					*)
						CMA_URLENCODED="${CMA//:/%3a}"
						ANSWER="$( _wget do "http://$REMOTE_ADDR/cgi-bin-kick.sh?CAH=${CAH}&CMA=${CMA_URLENCODED}" )"
						_log do remote_kick daemon info "answer: '$ANSWER'"
					;;
				esac
			}
		}
	} done
} done <"$FILE"
rm "$FILE"

COUNT_OVERALL_USERS="$( _list uniq "$LIST_OVERALL_USERS" | wc -l )"
BYTES_OVERALL_READABLE="$( _sanitizer do "$OVERALL_BYTES" number_humanreadable )"
echo "A='$UNIXTIME';B='$OVERALL_BYTES';C='$COUNT_OVERALL_USERS';D='$LIST_OVERALL_USERS'" >>"$DIR_DATABASE/USER/device/stats"
_log do summary daemon info "$COUNT_OVERALL_USERS devices, $BYTES_OVERALL_READABLE bytes"

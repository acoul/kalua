#!/bin/sh
. /tmp/loader

MODE="${1:-daily}"	# daily, weekly, monthly
STARTTIME="$2"		# today, yesterday, day_before_yesterday
OPTION="$3"		# e.g. "short"
FILE="$4"

UNIXTIME_NOW="$( date +%s )"
case "$STARTTIME" in
	today)
		DATE="$( date -d @$UNIXTIME_NOW )"
	;;
	yesterday)
		DATE="$( date -d @$(( UNIXTIME_NOW - 86400 )) )"
	;;
	day_before_yesterday)
		DATE="$( date -d @$(( UNIXTIME_NOW - 86400 - 86400 )) )"
	;;
	week_ago)
		DATE="$( date -d @$(( UNIXTIME_NOW - (7 * 86400) )) )"
	;;
	month_ago)
		DATE="$( date -d @$(( UNIXTIME_NOW - (30 * 86400) )) )"
	;;
	"-"*)	# e.g. "-5"
		DATE="$( date -d @$(( UNIXTIME_NOW - (-1 * STARTTIME * 86400) )) )"
	;;
esac

explode ${DATE:-$( date )}	# today
DATE="$1 $2 $3"			# Thu Sep 15

UNIXTIME_START="$( _system date 2unixtime "$DATE 00:00:00 $5 $6" )"
case "$MODE" in
	daily)
		UNIXTIME_END=$(( UNIXTIME_START + 100800 ))	# till next day 4 o'clock
	;;
	weekly)
		UNIXTIME_END=$(( UNIXTIME_START + (7* 86400) ))
	;;
	monthly)
		UNIXTIME_END=$(( UNIXTIME_START + (30 * 86400) ))
	;;
esac

if [ "$( strings "$DIR_DATABASE/USER/device/stats" | wc -c )" = "$( wc -c <"$DIR_DATABASE/USER/device/stats" )" ]; then
	MAX_DEVICES=0
	BYTES_OVERALL=0
	while read -r LINE; do {
		eval $LINE
		[ $A -gt $UNIXTIME_END ] && break
		[ $A -gt $UNIXTIME_START ] && WORK=1
		[ "$WORK" = "1" ] && {
			DEVICE_LIST="$DEVICE_LIST $D"
			BYTES_OVERALL=$(( BYTES_OVERALL + B ))
			[ $B -gt ${MAX_BYTES:-0} ] && MAX_BYTES=$B
			[ $C -gt $MAX_DEVICES ] && MAX_DEVICES=$C
		}
	} done <"$DIR_DATABASE/USER/device/stats"
else
	_log it check_statfile daemon alert "potential error in '$DIR_DATABASE/USER/device/stats', please check manually for corruption"
fi

DEVICES_UNIQ=$( _list uniq "$DEVICE_LIST" | wc -l )
DEVICE_LIST=

bytes2blocks()
{
	local maxbytes="$1"
	local bytes="$2"
	local block_maxwidth=48		# max width overall: 76
	local blocks=0 i=0 percent
	local out=

	[ $maxbytes -eq 0 ] && maxbytes=1
	percent=$(( (bytes * 100) / maxbytes ))
	blocks=$(( (percent * block_maxwidth) / 100 ))
	[ $blocks -eq 0 ] && [ $bytes -gt 0 ] && blocks=1

	while [ $i -lt $blocks ]; do {
		out="$out#"
		i=$(( i + 1))
	} done

	echo "$out"
}

[ "$OPTION" = "short" ] && {
	echo "$DATE: $( _math bytes2unit "$BYTES_OVERALL" mb dotted ) mb, $DEVICES_UNIQ/$MAX_DEVICES devices ($MODE)"
	exit 0
}

SUBJECT="report $( _weblogin metadata_locationname | sed 's#\\&acute;##' )"
SUBJECT="$SUBJECT ($MODE)@$DATE ($( _math bytes2unit "$BYTES_OVERALL" mb dotted ) mb, $DEVICES_UNIQ/$MAX_DEVICES devices, $HOSTNAME)"

echo "$SUBJECT"
echo
echo "$MODE report for network $( _weblogin metadata_locationname | sed 's#\\&acute;##' ) @ $DATE"
echo "from $( _system date unixtime2date "$UNIXTIME_START" ) to $( _system date unixtime2date "$UNIXTIME_END" )"
echo

[ -e "$FILE" ] && cat "$FILE"

if [ -n "$MAX_DEVICES" ]; then
	WORK=
	while read -r LINE; do {
		eval $LINE

		[ $A -gt $UNIXTIME_END ] && break
		[ $A -gt $UNIXTIME_START ] && WORK=1

		[ "$WORK" = "1" ] && {
			# 'Mon Dec  9 10:50:19 CET 2013' -> '10:50'
			TIME="$( _system date unixtime2date "$A" | sed "s/^.* \(..:..\):.. .*/\1/" )"

			DEVICES="$C"
			[ ${#DEVICES} -eq 1 ] && DEVICES=" $DEVICES"

			# means 25% of a 100% bytes2blocks()
			if [ $(( (B * 100) / ${MAX_BYTES:=1} )) -gt 25 ]; then
				PRINT_BYTES="$( _sanitizer run "$B" number_humanreadable ) bytes"
			else
				PRINT_BYTES=
			fi

			[ -n "$OPTION" ] || echo "$TIME ($DEVICES) $( bytes2blocks "$MAX_BYTES" "$B" ) $PRINT_BYTES"
		}
	} done <"$DIR_DATABASE/USER/device/stats"
else
	echo "potential error in '$DIR_DATABASE/USER/device/stats', please check manually"
fi

[ ${#DEVICES_UNIQ} -eq 1 ] && DEVICES_UNIQ=" $DEVICES_UNIQ"

echo "-----------------------------------------------------------------------------"
echo "       $DEVICES_UNIQ different devices (max $MAX_DEVICES simultaneous), $( _sanitizer run "$BYTES_OVERALL" number_humanreadable ) bytes"
echo

_weblogin mail_signature

#!/bin/sh
. /tmp/loader

# filename: 	/tmp/user-f4e7fa77becb81f1687084928dfa4de0-10:93:e9:20:36:9d-10.10.2.7-2011mar21-node2-reboots4.ulog
#			    ^^^ hash of username + pass      ^^^ mac           ^^^ ip   ^^^ date
#
#		direction time ip port proto id seq ack
# 		> 11:35:41 212.58.226.33 80 TCP 10415 3248578720 0
# 		< 11:35:41 212.58.226.33 80 TCP 0 1694259892 3248578721
# 		< 11:35:47 212.58.226.33 80 TCP 33278 1694279284 3248579419
# 		< 11:35:56 212.58.226.33 80 TCP 10434 3248579419 1694279285
#
#		fixme! 11:35:56 -> unixtime?
#		speed:  ca.  9.5 lines/sec on WRT54GL
#			ca. 56.0 lines/sec on TP-Link1043ND
#
# example-shot:     92.750 bytes |  337 lines (~273 bytes) ->  18985 bytes (-> 21%) -> gzip -> 4000 bytes (-> 21% / 4.3% overall)
# extrapolation: 2.000.000 bytes | 7272 lines              -> 80.000 bytes / user / day (gzip)
#
# prepare before first execution in manual mode (is normally done via registrator)
#
# PUBKEY="$( _ssh key_public_fingerprint_get keyfilename ).pub"
# SERVERLOGIN="$( uci get system.@vds[0].server | cut -d':' -f1 )"
# cat $PUBKEY | ssh "$SERVERLOGIN" 'cat >>.ssh/authorized_keys'
# test: ssh -i "$( _ssh key_public_fingerprint_get keyfilename )" $SERVERLOGIN
#

ULOG_LOGFILE_ORIG="/var/log/ulogd.syslogemu"
ULOG_LOGFILE="/var/log/ulogd.syslogemu_working_copy"
VDS_PATH="/tmp"

func_ulog_prepare()
{
	local FUNC="ulog_prepare"
	local PID_ULOG="$( pidof ulogd )"
	local errorfile="/tmp/ulogd_startup_failed"
	local logprio

	case "$PID_ULOG" in
		*" "*)
			_log it $FUNC daemon info "ulogd started 2 times"
			/etc/init.d/ulogd stop
			killall ulogd
			PID_ULOG=
		;;
	esac

	[ -z "$PID_ULOG" -a -e /usr/sbin/ulogd ] && {
		_log it $FUNC daemon debug "ulogd inactive - starting up"

		/etc/init.d/ulogd start

		PID_ULOG="$( pidof ulogd )" || {
			if [ -e "$errorfile" ]; then
				logprio="info"
			else
				logprio="alert"
			fi

			touch "$errorfile"
			_log it $FUNC daemon $logprio "ulogd-startup failed"
			return 1						# needs correct /etc/ulogd.conf
		}

		_log it $FUNC daemon debug "ulogd-startup successful"
	}

	if ulogd --version | grep -q " 1.23"$ ; then
		/etc/init.d/ulogd restart	# memoryleak in this version or plugin?
	else
		kill -HUP $PID_ULOG		# logfile touching not needed
	fi

	[ -e "$ULOG_LOGFILE_ORIG" ]			|| return 1
	[ $( _file size "$ULOG_LOGFILE_ORIG" ) -eq 0 ]	&& return 1

	_log it $FUNC daemon debug "creating logfile working copy"
	mv "$ULOG_LOGFILE_ORIG" "$ULOG_LOGFILE"
	_log it $FUNC daemon debug "created"

	return 0
}

func_ulog_squeeze_log ()
{
	local FUNC="ulog_squeeze_log"
	local DATE="$( _system date humanreadable short )"
	local BYTES="$( _file size  $ULOG_LOGFILE )"
	local LINES="$( _file lines $ULOG_LOGFILE )"
	local REBOOTS="$( _system reboots )"

	local LINE PORT IP OUTPUT TIMECOUNT
	local TIME MAC DIR SRC DST ID PROTO SPT DPT SEQ ACK
	local COUNTER=0
					# fixme! fetch conn_length from conntrack when connection was closed
	local lines_per_sec
	read -r lines_per_sec <"/tmp/$FUNC.speed"
	divisor_valid "$lines_per_sec" || lines_per_sec=1
	_log it $FUNC daemon debug "parsing now $BYTES bytes / $LINES lines in $(( LINES / lines_per_sec )) sec"	# divisor_valid

	_stopwatch start $FUNC
	echo "data_retention" >"/tmp/CRON_OVERLOAD"

	while read -r LINE; do {		# func_ulog_make_evalable "$LINE" >>/tmp/vds_debug
		eval $( func_ulog_make_evalable "$LINE" )

		if _net ip4_is_private "$DST"; then
			IP="$SRC"
			PORT="$SPT"
			USERIP="$DST"
		else
			PORT="$DPT"
			IP="$DST"
			USERIP="$SRC"
		fi

		USERNAME=						# written during weblogin_login_check()
		read -r USERNAME 2>/dev/null </tmp/vds_user_$MAC	# nonforking/fast	fixme! use e.g. $DIR_DATABASE/devices/mac2loginhash_$MAC

		OUTPUT="$DIR $TIME $IP $PORT $PROTO $ID $SEQ $ACK"
		COUNTER=$(( COUNTER + ${#OUTPUT} ))			# debug: count bytes for logfile

		echo >>"${VDS_PATH}/user-${USERNAME:-unknown}-${MAC}-${USERIP:-noip}-${DATE}-node${NODENUMBER}-reboots${REBOOTS}.ulog" "$OUTPUT"
	} done <"$ULOG_LOGFILE"

	TIMECOUNT="$( _stopwatch stop "$FUNC" nolog )"
	divisor_valid "$TIMECOUNT" || TIMECOUNT=1
	LINES_PER_SECOND="$(( ${LINES}00 / TIMECOUNT )).$(( ${LINES}00 % TIMECOUNT ))"	# divisor_valid
	echo "$(( ${LINES}00 / TIMECOUNT ))" >"/tmp/$FUNC.speed"			# divisor_valid

	rm "/tmp/CRON_OVERLOAD" "$ULOG_LOGFILE"

	divisor_valid "$BYTES" || BYTES=1
	_log it $FUNC daemon info "squeezed to $(( COUNTER * 100 / BYTES ))% ($COUNTER bytes/$LINES lines @ $LINES_PER_SECOND lines/sec, load: $( _system load 1min full ))"	# divisor_valid
}

func_ulog_make_evalable ()
{
	# Input is like: (no space, all in one line)

	# Mar  9 23:21:29 node408ap 00:04:75:f8:ed:67< IN=eth2 OUT=br0 MAC=00:90:4b:87:82:d5:00:04:75:f8:ed:67:08:00
	# SRC=10.63.153.66 DST=212.79.62.105 LEN=52 TOS=00 PREC=0x00 TTL=63 ID=26975 DF PROTO=TCP SPT=39952 DPT=80
	# SEQ=3144651213 ACK=3259829088 WINDOW=4340 ACK FIN URGP=0

	# Mar 10 11:18:17 liszt28 00:02:2d:2d:8a:54< IN=vlan1 OUT=eth1 MAC=00:1d:73:05:0f:58:00:1c:4a:89:b6:17:08:00:45:00:00:34
	# SRC=74.125.39.104 DST=10.63.167.70 LEN=52 TOS=00 PREC=0x00 TTL=55 ID=49744 CE PROTO=TCP SPT=80 DPT=32908
	# SEQ=4275812248 ACK=2185052976 WINDOW=135 ACK FIN URGP=0

	# Mar 10 11:18:21 liszt28 00:02:2d:2d:8a:54< IN=eth1 OUT=vlan1 MAC=00:1d:73:05:0f:59:00:02:2d:2d:8a:54:08:00
	# SRC=10.63.167.70 DST=74.125.39.104 LEN=52 TOS=00 PREC=0x00 TTL=63 ID=37032 CE DF PROTO=TCP SPT=32908 DPT=80
	# SEQ=2185052976 ACK=4275812249 WINDOW=25524 ACK FIN URGP=0

	echo "$1" | sed -ne 's/^[a-zA-Z]* *[0-9]* \([0-9][0-9]:[0-9][0-9]:[0-9][0-9]\).*\([0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]\)\(.\) .* SRC=\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\) DST=\([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\) .* ID=\([0-9]*\).*PROTO=\(.*\)$/TIME=\1;MAC=\2;DIR="\3";SRC=\4;DST=\5;ID=\6;PROTO=\7/' \
	                 -e 'y/ /;/' \
	                 -e 's/;ACK;/;FLAG_ACK=1;/' \
	                 -e 's/;SYN;/;FLAG_SYN=1;/' \
	                 -e 's/;RST;/;FLAG_RST=1;/' \
			 -e 's/;FIN;/;FLAG_FIN=1;/' \
			 -e 's/;PSH;/;FLAG_PSH=1;/' \
			 -e 'p'

	# Output is like: (no spaces, all in one line)

	# TIME=11:18:17; MAC=00:02:2d:2d:8a:54; DIR="<"; SRC=74.125.39.104; DST=10.63.167.70; ID=49744; PROTO=TCP;
	# SPT=80; DPT=32908; SEQ=4275812248; ACK=2185052976; WINDOW=135; FLAG_ACK=1; FLAG_FIN=1; URGP=0

	# TIME=11:18:21; MAC=00:02:2d:2d:8a:54; DIR="<"; SRC=10.63.167.70; DST=74.125.39.104; ID=37032; PROTO=TCP;
	# SPT=32908; DPT=80; SEQ=2185052976; ACK=4275812249; WINDOW=25524; FLAG_ACK=1; FLAG_FIN=1; URGP=0
}

func_ulog_logsaving ()
{
	local FUNC="ulog_logsaving"
	local PATTERN="${VDS_PATH}/user-*.ulog"
	local TODAY="$( _system date humanreadable short )"
	local COPYCOMMAND SERVER
	local DESTINATION
	local FILELIST="$( find $PATTERN -type f 2>/dev/null )"
	local FILE FILESIZE GATEWAY
	local LOGPRIO="alert"
	local SSH_IDENTITY="$( _ssh key_public_fingerprint_get keyfilename )"

	[ -z "$FILELIST" ] && {
		_log it $FUNC daemon debug "no logs - abort"
		rm "/tmp/ERROR_VDS"
		return
	}

	[ -e /tmp/ERROR_VDS ] && LOGPRIO="info"

	read -r GATEWAY </tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY

	if   [ -n "$( uci get system.@vds[0].server )" ]; then

		_log it $FUNC daemon debug "direct copy to server '$( uci get system.@vds[0].server )'"

		COPYCOMMAND="scp -p -i $SSH_IDENTITY"			# '-p' preserve time,accesstime and modes
		DESTINATION="$( uci get system.@vds[0].server )"

	elif [ "$GATEWAY" = "$WIFIADR" ]; then				# fixme! make this check at 1st, and abort if low flash, safes cpu-power
		_log it $FUNC daemon debug "gateway = myself"

		COPYCOMMAND='cp -p'
		DESTINATION="$( _storage path )"		# e.g. /www/cgi-bin

		[ "$DESTINATION" = '/www/cgi-bin' -a $( _system flash_free ) -lt 200 ] && {
			_log it $FUNC daemon $LOGPRIO "low_flash: $( _system flash_free )kb - aborting"

			mv /www/cgi-bin/user-* /tmp && {
				_log it $FUNC daemon alert "moved vds-data from flash to ram"		# maybe scp'ing works next time
			}

			touch "/tmp/ERROR_VDS"
			exit 1
		}			# fixme! remove VDS-data from RAM? or copy to /dev/null?
	else
		_log it $FUNC daemon debug "gateway = '$GATEWAY'"
		COPYCOMMAND="scp -p -i $SSH_IDENTITY"			# '-p' preserve time,accesstime and modes, fixme! -B (batchmode) -C (compression) -q (quiet)
		DESTINATION="${GATEWAY}:${VDS_PATH}"			# fixme! empty GATEWAY?
	fi

	case "$COPYCOMMAND" in
		'scp'*)
			SERVER="$( echo $DESTINATION | cut -d':' -f1 | cut -d'@' -f2 )"

			fgrep -q $SERVER /etc/dropbear/known_hosts || {
				_log it $FUNC daemon alert "[ERR] not found '$SERVER' in /etc/dropbear/known_hosts, saving on lokal storage"
				COPYCOMMAND="cp -p"
				DESTINATION="$( _storage path )"	# e.g. /www/cgi-bin
			}
		;;
	esac

	for FILE in $FILELIST; do {
		FILESIZE="$( _file size "$FILE" )"

		[ "$FILESIZE" -gt 80000 ] && {			# shrinks to 25% -> 20kb-snippets
			_filetype compressed "$FILE" || {

				_log it $FUNC daemon debug "compressing '$FILE' ($FILESIZE bytes)"

				APPEND=".up$( _system uptime sec ).gz.ulog"

				# automatically renames compressed "file" to "file.gz",
				# defaults to compression level 6
				gzip -f "$FILE"

				mv $FILE.gz ${FILE}${APPEND}
				rm ${FILE}.copyhash 2>/dev/null

				FILE="${FILE}${APPEND}"
				FILESIZE_OLD="$FILESIZE"
				FILESIZE="$( _file size "$FILE" )"

				divisor_valid "$FILESIZE_OLD" || FILESIZE_OLD=1
				_log it $FUNC daemon info "compressed ($FILESIZE_OLD -> $FILESIZE bytes -> $(( FILESIZE * 100 / FILESIZE_OLD ))% on file '$FILE')"	# divisor_valid
			}
		}


		local HASH_NOW="$( _file hash "$FILE" )"
		local HASH_OLD="$( cat "${FILE}.copyhash" 2>/dev/null )"

		_log it $FUNC daemon debug "NOW:'$HASH_NOW'"
		_log it $FUNC daemon debug "OLD:'$HASH_OLD'"

		if [ "${HASH_OLD:=never_hashed}" != "$HASH_NOW" -a $FILESIZE -gt 0 ]; then	# file has changed
			case "$COPYCOMMAND" in
				'scp'*)
					pidof scp >/dev/null && COPYCOMMAND='false scp'
				;;
			esac

			if $COPYCOMMAND "$FILE" "$DESTINATION" ; then
				if echo "$FILE" | grep -q "$TODAY" && ! _filetype compressed "$FILE" ; then
					_log it $FUNC daemon debug "copying '$FILE' ($FILESIZE bytes) was successful (is from today and uncompressed)"
					printf '%s' "$HASH_NOW" >"${FILE}.copyhash"
				else
					_log it $FUNC daemon info "copying '$FILE' ($FILESIZE bytes) was successful - removing"
					rm "$FILE" "${FILE}.copyhash" 2>/dev/null
				fi

				[ -e /tmp/ERROR_VDS ] && rm /tmp/ERROR_VDS
			else
				case "$COPYCOMMAND" in
					'scp'*)
						LOGPRIO="info"
					;;
				esac

				_log it $FUNC daemon $LOGPRIO "copying '$FILE' ($FILESIZE bytes) failed"
				touch /tmp/ERROR_VDS
			fi
		else								# file unchanged
			[ -e /tmp/ERROR_VDS ] || {				# no former error
				echo "$FILE" | grep -q "$TODAY" || {		# not from today
					_log it $FUNC daemon info "removing old '$FILE' ($FILESIZE bytes)"
					rm "$FILE" "${FILE}.copyhash" 2>/dev/null
				}
			}
		fi

		sync		# if destination is USB-stick, then be sure that all data was written
	} done
}

func_backup_userdata ()		# and restore, if missing
{
	local funcname='backup_userdata'
	local FUNC="backup_userdata"
	local DESTINATION="$( uci get system.@vds[0].server )"	# root@intercity-vpn.de:/var/www/networks/liszt28/vds/
	local FILE HASH HASH_LASTSEND HASH_SSH_PRIV size
	local I=0
	local FILELIST="$( _storage path )/db_backup.tgz"	# was: "/www/users_logged_in /www/cgi-bin/userdata.txt"
	local SSH_IDENTITY="$( _ssh key_public_fingerprint_get keyfilename )"

	[ -z "$DESTINATION" ] && {
		_log it $FUNC daemon debug "no destination - abort"
		return 1
	}

	for FILE in $FILELIST; do {
		HASH=
		HASH_LASTSEND=
		tempfile="/tmp/$( dirname "$FILE" | md5sum | cut -d' ' -f1 )$( basename "$FILE" )"

		if [ -e "$FILE" ]; then
			if [ "$FILE" = "/www/cgi-bin/db_backup.tgz" ]; then
				tar -tzf "$FILE" || {
					_log it $FUNC daemon alert "tar broken: $FILE"
					return 1
				}

				HASH="$( find "$DIR_DATABASE" -type f | while read -r HASH; do cat "$HASH"; done | md5sum | cut -d' ' -f1 )"
			else
				HASH="$( _file hash "$FILE" )"
			fi

			read -r HASH_LASTSEND 2>/dev/null <"$FILE.hashlastsend"
		else
			_log it $FUNC daemon info "restoring userdata '$FILE' from monitoring server"

			if _watch counter "/tmp/${funcname}_restore_counter" increment 1 max 7 ; then
				HASH_SSH_PRIV="$( _file hash $SSH_IDENTITY )"
				URL_BACKUP="$( uci get system.@monitoring[0].url )/vds/$( basename "$FILE" )_${HASH_SSH_PRIV}"

				_curl it "$URL_BACKUP" >"$tempfile" 120
				size=$( _file size "$tempfile" )

				if [ $size -gt 0 ]; then
					_log it $FUNC daemon info "[OK] restored '$FILE'/'$tempfile' with $size bytes"
				else
					# e.g. ERROR 404
					_log it $FUNC daemon info "[ERR] download '$FILE' from '$URL_BACKUP' failed ($size bytes)"
					rm "$tempfile"
				fi

				if [ -e "$tempfile" ]; then
					if [ $size -eq 0 ]; then
						rm "$tempfile"
					else
						mv "$tempfile" "$FILE"
						HASH="$( _file hash "$FILE" )"
						printf '%s' "$HASH" >"$FILE.hashlastsend"

						_db restore && rm "/tmp/${funcname}_restore_counter"
					fi
				else
					_log it $FUNC daemon info "[ERR] restoring/download failed"
				fi
			else
				_log it $FUNC daemon info "[ERR] restoring/download failed"
			fi

			continue
		fi
											# append hash of private ssh_key, for autofetching it
		[ "$HASH" != "$HASH_LASTSEND" ] && {
			I=$(( I + 1 ))
			HASH_SSH_PRIV="$( _file hash $SSH_IDENTITY )"

			_db backup "prepare_copy_to_server"

			if   scp -i $SSH_IDENTITY "$FILE" "${DESTINATION}$( basename "$FILE" )_${HASH_SSH_PRIV}" ; then		# to make it secret
				_log it $FUNC daemon info "copying '$FILE' ($( _file size "$FILE" ) bytes) was successful"
				printf '%s' "$HASH" >"$FILE.hashlastsend"
			else
				_log it $FUNC daemon debug "copying '$FILE' ($( _file size "$FILE" ) bytes) was NOT successful"
			fi
		}

	} done

	[ $I -eq 0 ] && _log it $FUNC daemon debug "no file has changed, no action"
}

[ -e /tmp/service_ulog_nowatching ] || {
	[ -e /tmp/NETFILTER/connection_detection ] && {
		func_ulog_prepare && func_ulog_squeeze_log
	}
}

func_ulog_logsaving
func_backup_userdata

exit 0

#!/bin/sh
. /tmp/loader

FUNC="heartbeat"

# idee: per scp + compression auf den server schieben
# idee: mehrere snapshots in einem query senden (base64 encoding?)
# idee: url kurz halten: ip statt hostname? -> "http://$IP/ffweimar/?bla=1"
# idee: variable=wert paare zeilenweise in datei schreiben und dann in einem rutsch (extra task) durch sanitizer jagen
#       /tmp/ARCHIV_MONITORING
#       /tmp/ARCHIV_MONITORING_urlencoded	// hat den vorteil, das der loader besser arbeitet
#
# idee: immer alles erzeugen, aber nur DIFF zum letzten abspeichern
# idee: a1...A3...b9....c7=  (benennen der variablen nach kategorien -> ist kuerzer, es muss nur eine zuordnungstabelle existieren)
# idee: versionsstring v1= mitsenden (weniger aerger auf dem server)

### sending "i'am alive"-messages to vpn-server in random
### intervals (approx. once a day) or/and simply log it

_system include
CPU_LOAD="$( _system load 15min )"
RAM_SIZE="$( _system ram_size )"

[ -n "$LOWMEM" ] && {
	[ $( _file lines /proc/modules ) -gt 30 ] && {		# 3.3.8, apmode = 23, adhoc-mode = 5 (SIMPLEMESH)
		_log do start daemon info "no execution - waiting for unload of unneeded kmodules"
		exit
	}
}

ARG1="$1"
ARG2="$2"

case "$CONFIG_PROFILE" in
	monami*)
	;;
	*)
		test   -e "/tmp/LOWMEM"			&& ARG1=fast
	;;
esac

_system fully_installed || ARG1='fast'

[ "$ARG1" = 'fast' ] && _log do $FUNC daemon debug "fastmode - no data_collection"

if [ -n "$NODENUMBER" -a "$ARG1" != 'fast' ]; then
	_log do $FUNC daemon debug "start"

	_sanitizer include
	_math include
	_wifi include

	# fixme! use more abstraction

					# keyword 'fast' means not to collect any data, which is faster
					# tip: it is useful that neighbour-infos must be "in sync" with other nodes
					#      which means: take this neighbour-snapshot at exactly the same time
					#                   in hole network

	# echo -n "t1="			 >$F	// _do "t1"
	# _system date unixtime		>>$F
	# echo -n "t2="			>>$F
	# _system load 15min		>>$F

	TIME="$( _system date unixtime )"

	# generated via olsr_build_tables()
	# -335:10.63.167.97:10.63.80.97:LC:1.000:1.000:1.000:1...
	read NEIGH 2>/dev/null <'/tmp/OLSR/meshrdf_neighs' && {
		NEIGH="$( _sanitizer do "$NEIGH" urlvalue )"
	}

	USERS=		# -001122334455:500~112233445566:9888

	FORWARDED=	# 327 (unit = megabytes)

	UPTIME="$( _system uptime hours )"				# 1078
	VERSION=$FFF_PLUS_VERSION					# 345678
	REBOOT="$( _system reboots )"					# 15

	OLSRVER="$( _sanitizer do "$( _olsr version )" urlvalue )"	# pre-0.5.6-r4 2009-01-02 12:00:45 on pcnet
	# WIFIDEV="$WIFI_DEVS"		# FIXME!			# eth1
									# 001122334455
	if [ -e '/www/monitoring.wifimac' ]; then
		read WIFIMAC <'/www/monitoring.wifimac'
		[ ${#WIFIMAC} = 12 ] || rm '/www/monitoring.wifimac'
	else
		[ -z "$WIFIDEV" ] && {
			/etc/init.d/S41build_static_netparam call
			. /tmp/NETPARAM
		}

		WIFIMAC="$( _sanitizer do "$( _net dev2mac ${WIFIDEV:-${LANDEV:-$WANDEV}} )" hex )"
		[ -z "$WIFIMAC" ] && {
			WIFIMAC="$( _sanitizer do "$( uci -q get wireless.radio0.macaddr )" hex )"
			[ -z "$WIFIMAC" ] && {
				bool_true 'wireless.radio0.disabled' || {
					_log do $FUNC daemon alert 'empty wifimac, rebuilding netparam'
					/etc/init.d/S41build_static_netparam

					random_mac()
					{
						local oct

						echo -n '02'
						for oct in 2 3 4 5 6; do {
							printf %x $( _math random_integer 1 255 )
						} done
					}

					random_mac >'/www/monitoring.wifimac'
					exit 1
				}
			}
		}
	fi

	# iterate over all devs...first wifi...first non-locally_administered = valid
	[ -e '/www/monitoring.wifimac' ] || {
		# OK and not 'locally_administered'
		for DEV in $WIFI_DEVS $LANDEV $WANDEV; do {
			MYMAC="$( _net dev2mac "$DEV" )"
			MYMAC="$( _sanitizer do "$MYMAC" hex )"
			_net mac2vendor "$MYMAC" >/dev/null | grep -q 'locally_administered' || {
				[ ${#MYMAC} = '12' ] && {
					echo "$MYMAC" >'/www/monitoring.wifimac'
					exit 1
#					_system crashreboot 'wifimac_safed'
				}
			}
		} done
	}

	UPDATE="$( _firmware updatemode ).$( _firmware get_usecase )"					# testing.Standard,kalua
	UPDATE="$( _sanitizer do "$UPDATE" urlvalue )"

	LATLON="$( uci -q get system.@admin[0].latlon | sed -e 's/[^0-9\;,\.]//g' -e 's/\;/,/g' )"	# 50.1234,11.3345
		if [ "," = "$LATLON" ] || [ -z "$LATLON" ]; then
			LATLON="0,0"
		fi
		LATLON="$( _sanitizer do "$LATLON" urlvalue )"

	ADMINEMAIL="$( _sanitizer do "$( uci -q get system.@admin[0].mail )" email urlvalue )"		# bla@blubb.de

	ADMINPHONE="$( _sanitizer do "$( uci -q get system.@admin[0].phone )" alphanum )"		# 036435101112zuhause

	TXPWR="$(	_wifi phy_txpower	$WIFIDEV mw )"	# 40
	FRAG="$(	_wifi frag	  	$WIFIDEV )"		# 500
	RTS="$(		_wifi rts	  	$WIFIDEV )"		# 2347
	GMODEPROT="$(	_wifi protection_gmode  $WIFIDEV )"		# 0 or 1
	WIFIMODE="$(	_wifi mode	  	$WIFIDEV )"		# adhoc
	DISTANCE="$(	_wifi timing_distance	$WIFIDEV )"		# 1500
	NOISE="$(	_wifi noise	  	$WIFIDEV )"		# -94
	CHANNEL="$(	_wifi channel	  	$WIFIDEV )"		# 104

	# fixme! create _watch_mcastrate()
	MRATE="$(	_wifi mcastrate		$WIFIDEV )"		# 5.5
	MRATE_CONFIG="$( uci -q get wireless.@wifi-iface[0].mcast_rate )"	# 5500000 or <empty> or "auto"
	if _sanitizer do "$MRATE_CONFIG" numeric check ; then
		MRATE_CONFIG=$(( MRATE_CONFIG * 1000 ))
	else
		MRATE_CONFIG='auto'
	fi

	case "$MRATE" in
		auto)
			MRATE_TEMP="$MRATE"
		;;
		5.5)
			MRATE_TEMP=5500000
		;;
		*)
			MRATE_TEMP=$(( MRATE * 1000000 ))
		;;
	esac
	[ "$MRATE_CONFIG" != "auto" -a "$MRATE_TEMP" != "${MRATE_CONFIG:=5500000}" ] && {
		_wifi phy_restart "$WIFIDEV" "$FUNC: mrate config/real differs: $MRATE_CONFIG/$MRATE"
	}


	# FIXME! rename var to speed? it was SENSITIVITY...
	SENS="$( _wifi speed $WIFIDEV )"
	SENS="$( _sanitizer do "$SENS" urlvalue )"

	DRIVER="$( _wifi driver_version "$WIFIDEV" )"		# wl-adv_3.90-RC37.0_v1.1
	DRIVER="$( _sanitizer do "$DRIVER" urlvalue )" 		# wl-simple_v1.0
								# mod-madwifi_2.4.30brcm+r3314-8

	# 11na10mhzHT20 or 11naHT20 or 11ngHT20 or 11g
	GMODE="$( uci -q get wireless.radio0.chanbw )"
	[ -n "$GMODE" ] && GMODE="${GMODE}mhz"
	GMODE="$( uci -q get wireless.radio0.hwmode )${GMODE}$( uci -q get wireless.radio0.htmode )"
	GMODE="$( _sanitizer do "$GMODE" urlvalue )"

	# show all active ESSID's
	for INDEX in 0 1 2 3; do {
		bool_true "wireless.@wifi-iface[${INDEX}].disabled" || {
			SSID_TEMP="$( uci -q get wireless.@wifi-iface[${INDEX}].ssid )" && {
				bool_true "wireless.@wifi-iface[${INDEX}].hidden" && SSID_TEMP='<hidden>'
				ESSID="${ESSID}${ESSID:+|}$SSID_TEMP"
			}
		}
	} done
	ESSID="$( _sanitizer do "$ESSID" urlvalue )"

	BSSID="$( _sanitizer do "$( _wifi bssid $WIFIDEV )" hex )"

	if [ -e "/etc/HARDWARE" ]; then
		read HW <"/etc/HARDWARE"
		HW="$( _sanitizer do "$HW" urlvalue )"
	else
		HW=
	fi

	SSH_PUBKEY_FP="$( _sanitizer do "$( _ssh key_public_fingerprint_get )" hex )"	# 1660559e90efefafd04298c516365bbd12b0ffda
											# (40 bytes HEX [SHA-1])
	FREE_SPACE_FLASH="$( _system flash_free )"
	SERVICES="flash.free.kb:${FREE_SPACE_FLASH}"					# [kByte]

	FREE_SPACE_USB="$( df | grep "/mnt/disc0_." | sed -n "s/^[0-9a-zA-Z\/]*[^0-9]*[0-9]*[^0-9]*[0-9]*[^0-9]*\([0-9]*\).*/\1/p" )"	# fixme! more abstraction!
	if [ -n "$FREE_SPACE_USB" ]; then
		SERVICES="${SERVICES}|usbstorage.free.kb:$(( FREE_SPACE_USB / 1024 ))"	# [kByte]	# howto determine IDE <-> USB.storage?
	else
		_storage usb_installed && {
			SERVICES="${SERVICES}|usbstorage.free.kb:$( _storage size sda kbytes )"
		}
	fi

#	FREE_SPACE_IDE="$( df | grep "/mnt/disc0_." | sed -n "s/^[0-9a-zA-Z\/]*[^0-9]*[0-9]*[^0-9]*[0-9]*[^0-9]*\([0-9]*\).*/\1/p" )"	# fixme!
#	[ -n "$FREE_SPACE_IDE" ] && {
#		SERVICES="${SERVICES}|idestorage.free.kb:$(( FREE_SPACE_IDE / 1024 ))" # [kByte]
#	}

	SERVICES="$( _sanitizer do "$SERVICES" urlvalue )"

											# fixme! add: soundcard, webcam, sambashare, sensorstuff, inetoffer, ...
	FFF_CITY="$( _ipsystem getvar 'FFF_CITY' )"

	_net inet_seems_stable && {
		PUBIP="$( _net get_external_ip )"

		# FIXME! hotfix
		for AP_INDEX in $( _wifi get any mode ap ); do {
			case "$( uci -q get wireless.@wifi-iface[$AP_INDEX].ssid )" in
				*'Wartungsmodus'*|*'maintenance'*)
					SSID_HOTFIX='true'
				;;
			esac
		} done

		[ "$SSID_HOTFIX" = 'true' ] && {
			touch '/tmp/wifi_change_essid_ap'
			_log do hotfix daemon alert 'change SSID'
			_wifi change_essid_ap original
		}
	}

	case "${CONFIG_PROFILE}-${HOSTNAME}" in
		preskil*)
			SPEEDTEST_SERVER="202.123.27.113"
		;;
		ejbw_ap-RH*)
			SPEEDTEST_SERVER="192.168.111.242"
		;;
		*)
			SPEEDTEST_SERVER="195.90.7.115"		# speedtest.qsc.de
			SPEEDTEST_SERVER='194.8.194.20'		# netcologne
		;;
	esac

	if _sanitizer do "$PUBIP" ip4 check ; then
		read PUBIP_OLD 2>/dev/null </tmp/MY_PUBLIC_IP
		echo >/tmp/MY_PUBLIC_IP "$PUBIP"

		case "$( date +%H )" in
			02|05)
				PUBIP_OLD="enforce_recheck"
			;;
		esac

		[ "$PUBIP" != "$PUBIP_OLD" ] && {
			_log do $FUNC daemon info "public IP changed: '$PUBIP_OLD' -> '$PUBIP'"
			ARG1="send_alive_message"

			# renew dyndns: fixme! must be called via hotplug
			[ -n "$( uci -q get network.wan.dyndns )" ] && {
				_wget do "$( uci -q get network.wan.dyndns )" >/dev/null
			}

			_net local_inet_offer >/dev/null && {		# respect maybe new DHCP-values
				/etc/init.d/S41build_static_netparam
				/etc/init.d/S43ethers_fff+ call
				. /tmp/NETPARAM

				_speedtest do $WANADR $SPEEDTEST_SERVER poormens_tcpdownload2 "30"	# fixme! respect type: wan, lan ...
				_speedtest do $WANADR $SPEEDTEST_SERVER poormens_tcpupload "20"
			}
		}
	else
		_log do $FUNC daemon info "public IP cannot be sanitized to ip4: '$PUBIP'"
		PUBIP=
	fi

	INET_INTERFACE="$( _net local_inet_offer )" && {
		eval $( _speedtest stats $WANADR $SPEEDTEST_SERVER poormens_tcpdownload2 )
		WAN_SPEED_DOWNLOAD="$SPEED_MAX"

		eval $( _speedtest stats $WANADR $SPEEDTEST_SERVER poormens_tcpupload )
		WAN_SPEED_UPLOAD="$SPEED_MAX"

		echo "DOWN:$WAN_SPEED_DOWNLOAD UP:$WAN_SPEED_UPLOAD" >"/tmp/speed_inet_$INET_INTERFACE"
	}

	# _needs gwcheck
	#
	# GWCHECK=1; T=1243685931; DATE=30May2009-14uhr18; GW=10.63.3.1; HOSTNAME=KG-bittorfwireless-AP;
	# NEXTHOP=10.63.3.1; METRIC=0; ETX=1.00; COST=1.00; COST_INT=0
	# user better vars:
	#
	# GWCHECK_OVERALL_COST_INT="9876"
	# GWCHECK_OVERALL_METRIC="5"
	# GWCHECK_OVERALL_GATEWAY_IP4="10.63.5.1"
	# GWCHECK_OVERALL_GATEWAY_HOST="trierer65"	// really?
	# GWCHECK_NEXTHOP_COST_INT="2876"
	# GWCHECK_NEXTHOP_IP4="10.63.3.1"
	# GWCHECK_NEXTHOP_HOST="bruckner4"		// really?
	# GWCHECK_NEXTHOP_MEDIA="remote/localwifi|lan|wan|pppoe|lan|..."
	#
	# -> GWCHECK="value:value:value:value:value:value:value"

	[ -e /tmp/GATEWAY_CHECK_RECENT ] && {
		. /tmp/GATEWAY_CHECK_RECENT		# need: NEXTHOP|GATEWAY is: DATE|HOSTNAME|COST_INT|GATEWAY|NEXTHOP|METRIC
		[ -e "/tmp/GATEWAY_CHECK_RECENT.batman" ] && . /tmp/GATEWAY_CHECK_RECENT.batman
	}

	if   [ -z "$NEXTHOP" ]; then
		SIGNAL=
	elif ip -o route get "$NEXTHOP" | fgrep -q 'dev wlan'; then
		SIGNAL="$( _wifi signal	"$WIFIDEV" "$NEXTHOP" )"	# example-value
		SIGNAL="$( _sanitizer do "$SIGNAL" urlvalue )"
	else
		SIGNAL=
	fi

	HOP2GW="$METRIC"				# 5
	ETX2GW="$COST_INT"				# 5234 (was 5.234)

	case "$NEXTHOP" in
		'192.168.'*)
			GWNODE="$( echo "$NEXTHOP" | cut -d'.' -f3 )"
		;;
		*)
			GWNODE="$( _ipsystem do ${NEXTHOP:-NULL} )"	# 10.63.144.65 -> 400

			[ "$GWNODE" = "$NODENUMBER" -a -z "$INET_INTERFACE" ] && {
				read NEXTHOP <'/tmp/OLSR/DEFGW_NOW' && {
					GWNODE="$( _ipsystem do ${NEXTHOP:-NULL} )"
				}
			}

			if   [ "$GWNODE" = "$NODENUMBER" -a -z "$INET_INTERFACE" ]; then
				read NEXTHOP <'/tmp/OLSR/DEFGW_LASTGOOD' && {
					GWNODE="$( _ipsystem do ${NEXTHOP:-NULL} )"
				}
			elif [ -z "$GWNODE" ]; then
				read NEXTHOP <'/tmp/OLSR/DEFGW_LASTGOOD' && {
					GWNODE="$( _ipsystem do ${NEXTHOP:-NULL} )"
				}
			fi

			[ "$GWNODE" = "$NODENUMBER" -a -z "$INET_INTERFACE" ] && GWNODE=
		;;
	esac

	# only allow,if we do local_inet_offer
	[ "$GWNODE" = "$NODENUMBER" -a -z "$INET_INTERFACE" ] && GWNODE=

	case "$GATEWAY" in
		'192.168.'*)
			GW="$( echo "$GATEWAY" | cut -d'.' -f3 )"
		;;
		*)
			GW="$( _ipsystem do ${GATEWAY:-NULL} )"		# 10.63.2.1 -> 2
		;;
	esac

	HOP2GW=${HOP2GW:=NULL}			# todo: ensure, that empty values are rewritten to 'NULL'
	ETX2GW=${ETX2GW:=NULL}
	GW=${GW:=NULL}

	HOSTNAME="$( uci -q get system.@system[0].hostname )"
	HOSTNAME="$( _sanitizer do "$HOSTNAME" hostname urlvalue )"

	if [ -e '/tmp/WIFISCAN' ]; then
		WIFISCAN="$( cat '/tmp/WIFISCAN' )"
		WIFISCAN="$( _sanitizer do "$WIFISCAN" urlvalue )"
	else
		case "$( date +%H )" in			# only at night
			03)
				_wifi scan "$WIFIDEV" >'/tmp/WIFISCAN'
				case " $WIFI_DEVS " in
					*' wlan1 '*)
						_wifi scan "$WIFIDEV" >>'/tmp/WIFISCAN'
					;;
				esac
			;;
		esac
	fi

	only_one_wired_neigh()
	{
		local count="$( echo "$NEIGH" | sed 's/[^-]//g' )"
		test "${#count}" -eq 1
	}

	get_sorted_first_ip()
	{
		local ip1="$1"
		local ip2="$2"

		echo -e "${ip1}\n${ip2}" | sort | head -n1
	}

	if only_one_wired_neigh; then		# fixme! always return a sorted list of all wired neighs

		C="%3a"		# html-code for ':'
		wired_neigh_ip="$( echo "$NEIGH" | sed -n "s/^.*-[0-9]*${C}${LANADR}${C}\([0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\)${C}COST${C}.*/\1/p" )"

		N0="$( get_sorted_first_ip "$LANADR" "$wired_neigh_ip" )"
	else
		N0=
	fi

	# ----- fixme! start_of_ugly_packetfilter_monitoring

grep -q ^"ip_tables " /proc/modules && {


	PFILTER_NAT=0
	for CHAIN in PREROUTING INPUT OUTPUT POSTROUTING; do {
		COUNT=$( $IPT -t nat -nxvL "$CHAIN" | tail +3 | fgrep -v 'mark match'| fgrep -v 'NAT_ALIEN_ROAMERS' | wc -l )
		PFILTER_NAT=$(( PFILTER_NAT + COUNT ))
	} done
	[ $PFILTER_NAT -eq 0 ] && PFILTER_NAT='noNAT'

	PFILTER_FILTER="$(		$IPT -t filter -nxvL | grep "\--" | sed -n '$=' )"
	PFILTER_MANGLE="$(		$IPT -t mangle -nxvL | grep "\--" | sed -n '$=' )"
	PFILTER_MANGLE_REAL="${PFILTER_MANGLE:=0}"

	# FIXME!
	PFILTER_MANGLE_USER_REAL=0
	PFILTER_MANGLE_USER_RESERVE=0

	_meshrdf_count_user_real ()
	{
		local LIST="$( $IPT -t mangle -nxvL | sed -n 's/^Chain traff_\(..:..:..:..:..:..\) .*/\1/p' | grep -v 99:99:99:99:99:9 )"
		local LOOP=
		local COUNT
		local MAC

		for MAC in $LIST; do {
			COUNT="$( $IPT -t mangle -nxvL traff_$MAC | sed -n '$=' )"
			echo -n "${LOOP:+,}${COUNT:-0}"
			LOOP=1
		} done

		[ -z "$LOOP" ] && echo -n "0"
	}

	_meshrdf_count_user_reserve ()
	{
		local LIST="$( $IPT -t mangle -nxvL | sed -n 's/^Chain traff_\(..:..:..:..:..:..\) .*/\1/p' | grep    99:99:99:99:99:9 )"
		local LOOP=
		local COUNT
		local MAC

		for MAC in $LIST; do {
			COUNT="$( $IPT -t mangle -nxvL traff_$MAC | sed -n '$=' )"
			echo -n "${LOOP:+,}${COUNT:-0}"
			LOOP=1
		} done

		[ -z "$LOOP" ] && echo -n "0"
	}

	PFILTER="$( _meshrdf_count_user_real ):$( _meshrdf_count_user_reserve )"

	OLDIFS="$IFS"
	IFS=",:"
	for COUNT in $PFILTER; do {
		PFILTER_MANGLE_REAL=$(( PFILTER_MANGLE_REAL - ${COUNT:-0} ))
	} done
	IFS="$OLDIFS"

	PFILTER="${PFILTER_NAT:-noNAT}:${PFILTER_FILTER:-0}:${PFILTER_MANGLE}:${PFILTER_MANGLE_REAL}:${PFILTER_MANGLE_USER_REAL:-0}:${PFILTER_MANGLE_USER_RESERVE:-0}:${PFILTER}"
	PFILTER="$( _sanitizer do "$PFILTER" urlvalue )"

	[ -e '/tmp/FREE' ] && {
		PFILTER="FREE+$PFILTER"
	}

	grep -sq "oops" /proc/cmdline || {
		PFILTER="OOPS0+$PFILTER"
	}

	[ -e '/tmp/WATCHDOG_TYPE1' ] && {
		PFILTER="WD-$( cat '/tmp/WATCHDOG_TYPE1' )+$PFILTER"
	}

}
	# ----- end_of_ugly_packetfilter_monitoring, output like: 7:39:600:97:10:12:49,49,49,49,49:13,49,49,49,49,49

	# trying to print at first the values that are not likely to change its length/appearance often
	# just to be better readable in logfile


	DATE_LOCAL_HUMAN="$( date +%d%b%Y-%Huhr%M )"

	if pidof olsrd >/dev/null; then
		olsrrestartcount="$( _olsr uptime restarts_get )"
	else
		olsrrestartcount="off"
	fi

	pidof bat_events >/dev/null && olsrrestartcount="batman+$olsrrestartcount"

	grep -qs "sched: RT throttling activated" "/tmp/dmesg.log" && {
		# seconds from klog, when 'throttling' was detected
		k0="$( grep "sched: RT throttling activated" /tmp/dmesg.log | cut -d'.' -f1 | sed 's/[^0-9]//g' )"
	}

	[ -e "/tmp/dmesg.boot" ] && {
		k1="$( sed -n '$=' "/tmp/dmesg.boot" || k1=0 )"
	}

	[ -e "/tmp/dmesg.log" ] && {
		read k2 2>/dev/null <'/tmp/dmesg.counter' || k2=0
		k2=$(( k2 + k1 ))
	}

	if [ -d '/www/coredumps' ]; then
		for COREDUMP in /www/coredumps/*.core; do {
			[ -e "$COREDUMP" ] && {
				test -s "$COREDUMP" || {
					# is 0 byte
					rm "$COREDUMP"
					echo "$COREDUMP" >>'/www/coredumps/old.txt'
				}
			}
		} done

		k3=$( ls -1 /www/coredumps/*.core | wc -l )
		k3=$(( k3 + $( wc -l <'/www/coredumps/old.txt' ) - 1 ))
	else
		k3=0
	fi

	QUERY=
	QUERY="${QUERY}local=$DATE_LOCAL_HUMAN&mail=$ADMINEMAIL&phone=$ADMINPHONE&time=$TIME&services=$SERVICES&pubkey=$SSH_PUBKEY_FP"
	QUERY="${QUERY}&node=$NODENUMBER&city=$FFF_CITY&mac=$WIFIMAC&latlon=$LATLON&hostname=$HOSTNAME&update=$UPDATE&wifidrv=$DRIVER&olsrver=$OLSRVER"
	QUERY="${QUERY}&olsrrestartcount=${olsrrestartcount}&olsrrestarttime=$( _olsr uptime restart_time )"
	QUERY="${QUERY}&portfw=$( _sanitizer do "$( uci -q get firewall.@portfw[0].portfw )" urlvalue )&optimizenlq=$( uci -q get wireless.@auto_optimize[0].nlq )&optimizeneigh=$( uci -q get wireless.@auto_optimize[0].neigh )"
	QUERY="${QUERY}&txpwr=$TXPWR&wifimode=$WIFIMODE&channel=$CHANNEL&mrate=$MRATE&hw=$HW&frag=$FRAG&rts=$RTS&pfilter=$PFILTER"
	QUERY="${QUERY}&gmodeprot=${GMODEPROT:=0}&gmode=${GMODE:=0}&profile=$CONFIG_PROFILE&noise=$NOISE&rssi=$SIGNAL&distance=$DISTANCE"
	QUERY="${QUERY}&version=$VERSION&reboot=$REBOOT&up=$UPTIME&load=$CPU_LOAD&forwarded=$FORWARDED&essid=$ESSID&bssid=$BSSID"
	QUERY="${QUERY}&gw=$GW&gwnode=$GWNODE&etx2gw=$ETX2GW&hop2gw=$HOP2GW&neigh=$NEIGH&users=$USERS&pubip=$PUBIP&sens=$SENS&wifiscan=$WIFISCAN"
	QUERY="${QUERY}&k0=$k0&k1=$k1&k2=$k2&k3=$k3"
	QUERY="${QUERY}&v1=$( uname -r )"
	QUERY="${QUERY}&v2=$OPENWRT_REV"
	QUERY="${QUERY}&s1=$( _switch show )"
	QUERY="${QUERY}&s2=$( uci -q get dhcp.lan.ignore )"
	QUERY="${QUERY}&h1=$RAM_SIZE"
	QUERY="${QUERY}&h2=$( _system ram_free )"
	QUERY="${QUERY}&r9=$( _system reboot_reason )"

	if [ -e '/dev/zram0' ]; then
		QUERY="${QUERY}&h4=$( cat /sys/block/zram0/num_reads )"
		QUERY="${QUERY}&h5=$( cat /sys/block/zram0/num_writes )"
		QUERY="${QUERY}&h6=$( cat /sys/block/zram0/mem_used_total )"
		QUERY="${QUERY}&h7=$( cat /sys/block/zram0/compr_data_size )"
	else
		QUERY="${QUERY}&h3=$( _system ram_free flush )"			# FIXME! we should'nt be smarter than the vm-controller
	fi

	[ -e "/www/SIMPLE_MESHNODE" ] && {
		QUERY="${QUERY}&h0=1"
	}

	if   [ -e "$DIR_DATABASE/USER/login/rows" ]; then
		QUERY="${QUERY}&d0=$( _db user login list last )"
	elif [ -e '/tmp/USERDB_COPY' ]; then
		QUERY="${QUERY}&d0=$( _file lines '/tmp/USERDB_COPY' )"
	else
		QUERY="${QUERY}&d0=0"
	fi
	QUERY="${QUERY}&d1=$( _weblogin authserver )"

	QUERY="${QUERY}&n0=$N0"

	incoming_and_outgoing_olsr_traff()
	{
		pidof olsrd >/dev/null || return 0

		local device="$1"
		local dev_address="$2"

		[ -z "$device" -o -z "$dev_address" ] && return 0

		local funcname="incoming_and_outgoing_olsr_traff"
		local interval=30
		local port=698
		local ruleset_in="INPUT -p udp -i $device ! -s $dev_address --dport $port"
		local ruleset_out="OUTPUT -p udp -o $device --dport $port"
		local packets bytes rest bytes_in bytes_out bytes_in_sec bytes_out_sec

		get_bytes()
		{
			$IPT -nxvL "$1" 1 | while read packets bytes rest; do echo ${bytes:-0}; done
		}

		$IPT -I $ruleset_in
		$IPT -I $ruleset_out

		_log do $funcname daemon info "counting olsr-traff for $interval sec"
		sleep $interval

		bytes_in="$(  get_bytes INPUT  )"
		bytes_out="$( get_bytes OUTPUT )"

		bytes_in_sec=$((  bytes_in  / interval ))
		bytes_out_sec=$(( bytes_out / interval ))

		$IPT -D $ruleset_in
		$IPT -D $ruleset_out

		_log do $funcname daemon info "in: $bytes_in = $bytes_in_sec bytes/s out: $bytes_out = $bytes_out_sec bytes/s"
		echo "&t0=${bytes_in_sec}&t1=${bytes_out_sec}"
	}

	case "$WIFIMODE" in
		*adhoc*)
			QUERY="${QUERY}$( incoming_and_outgoing_olsr_traff "$WIFIDEV" "$WIFIADR" )"
		;;
		*)
			QUERY="${QUERY}$( incoming_and_outgoing_olsr_traff "$LANDEV" "$LANADR" )"
		;;
	esac

	OLSR_SPEED="$( uci -q get olsrd.@Interface[0].speed )"
	[ -z "$OLSR_SPEED" ] && {
		# fallback to old value
		OLSR_SPEED="$( uci -q get olsrd.@meta[0].speedvalue )"
	}

	OLSR_METRIC="$( uci -q get olsrd.@olsrd[0].LinkQualityAlgorithm )"
	QUERY="${QUERY}&t2=${OLSR_SPEED:-5}&t3=${OLSR_METRIC}"

	[ -e "/www/force_weblogin_check_script" ] && {
		local scriptname
		read scriptname <"/www/force_weblogin_check_script"
		QUERY="${QUERY}&d2=${scriptname}"
	}

	[ -n "$WAN_SPEED_DOWNLOAD" ] && {
		URL_SLASH="%2f"
		QUERY="${QUERY}&i0=$( uci -q get network.wan.proto )"
		QUERY="${QUERY}&i1=${INET_INTERFACE},$( _sanitizer do "$( _net my_isp cached )" urlvalue )"
		QUERY="${QUERY}&i2=${WANADR}${URL_SLASH}${WANPRE}"
		QUERY="${QUERY}&i3=${WAN_SPEED_DOWNLOAD}"
		QUERY="${QUERY}&i4=${WAN_SPEED_UPLOAD}"
		# nexthop IP:
		QUERY="${QUERY}&i5=$( ip route list exact '0.0.0.0/0' table main | sed -n 's/^.* via \([0-9\.]*\) .*/\1/p;q' )"
	}

	[ -e "/tmp/USERDB_COPY.speed" ] && {
		QUERY="${QUERY}&i6=$( cat /tmp/USERDB_COPY.speed )"
	}

	case "$CONFIG_PROFILE" in
		aschbach*)
			QUERY="${QUERY}&r0=$( _wifi signal wlan2 )"	# adhoc -> 1st essid
			QUERY="${QUERY}&r1=$( _wifi signal wlan0 )"	# ap -> 2nd essid
			QUERY="${QUERY}&r2=$( _wifi signal wlan1 )"	# ap/wep(kasse) -> 3rd essid
		;;
		*)
			QUERY="${QUERY}&r0=$( _wifi signal $WIFIDEV )"	# adhoc or ap
		;;
	esac

	QUERY="${QUERY}&r4=$( _net count_wireless )"
	QUERY="${QUERY}&r5=$( _net count_wired )"

	QUERY="${QUERY}&w0=$WIFIDEV"
	QUERY="${QUERY}&w1=$( cat "/tmp/STATS_WIFI_RESTARTS.$WIFIDEV" 2>/dev/null )"
	QUERY="${QUERY}&w2=$( _wifi phy_uptime "$WIFIDEV" )"

	read reason 2>/dev/null <"/tmp/STATS_WIFI_RESTARTS.$WIFIDEV.reason"
	QUERY="${QUERY}&w3=$( _sanitizer do "$reason" urlvalue )"

	usbport_something_is_plugged_in()
	{
		case "$HARDWARE" in
			"Linksys WRT54G/GS/GL"|"Buffalo WHR-HP-G54"|"Dell TrueMobile 2300")
				return 1
			;;
		esac

		test -n "$( grep -s " Driver=" /proc/bus/usb/devices | grep -v "Driver=hub" )"
	}

	QUERY="${QUERY}&u0=$( usbport_something_is_plugged_in && echo "1" )"

	[ -n "$( uci -q get dhcp.@dnsmasq[0].dhcpscript )" ] && {
		QUERY="${QUERY}&D0=1"
	}

	if [ -n "$LOWMEM" ]; then
		echo >/tmp/ARCHIV_MONITORING "$QUERY"
	else
		_watch archivsize "/tmp/ARCHIV_MONITORING" 150 lines_max
		echo >>/tmp/ARCHIV_MONITORING "$QUERY"
	fi

	[ "$( _math random_integer 1 96 )" -eq 50 ] && ARG1="send_alive_message"	# roundabout each day (15min = 4/h * 24 = 96)
	[ -e /www/backup_archiv_node_data ] && ARG1="send_alive_message"
	[ -e /tmp/SEND_ALIVE_FAILED ] && {
		rm /tmp/SEND_ALIVE_FAILED
		ARG1="send_alive_message"
		ARG2="no_antenna_test"
	}

	_log do $FUNC daemon debug "ready"

	KEEP_ALIVE_URL="$( uci -q get system.@monitoring[0].url )/meshrdf/"

	[ "$UPTIME" -lt 2 ] && {
		ARG1="send_alive_message"
		ARG2="no_antenna_test"
	}

	if [ -n "$KEEP_ALIVE_URL" ] && [ "$ARG1" = "send_alive_message" -o "$ARG1" = "sam" ]; then

		[ -z "$ARG2" ] && sleep "$( _math random_integer 0 60 )"

		_log do $FUNC daemon info "sending message: '${KEEP_ALIVE_URL} [...]'"

		_ntp set

		[ -e '/www/backup_archiv_node_data' ] && {			# see _system reboot_safe()

			_log do $FUNC daemon info "found node-data backup, including"

			mv "/tmp/ARCHIV_MONITORING" "/tmp/ARCHIV_MONITORING.temp"	# copy backup-file
			mv '/www/backup_archiv_node_data' "/tmp/ARCHIV_MONITORING"	# on top of
			cat "/tmp/ARCHIV_MONITORING.temp" >>"/tmp/ARCHIV_MONITORING"	# normal node_data_file
			rm  "/tmp/ARCHIV_MONITORING.temp"				# and remove backup
		}

		# look for last comment "# alive was send..." in our archive
		# and try to send all lines from this point to end of file
		# to the logging server. After this we set the comment at file-end

		LINENUMBER_LAST_SUCCESS="$( grep -n "^#" "/tmp/ARCHIV_MONITORING" | tail -n1 | cut -d':' -f1 )"	# last comment

		while true; do {							# start one line after last comment
			LINENUMBER_LAST_SUCCESS=$(( LINENUMBER_LAST_SUCCESS + 1 ))	# worst case is line one
		 	QUERY="$( sed "${LINENUMBER_LAST_SUCCESS}q;d" "/tmp/ARCHIV_MONITORING" )"		# must be url-encoded

			case "$QUERY" in
				'local='*|'log='*)
					# http://stackoverflow.com/questions/2659952/maximum-length-of-http-get-request
					# REQUEST="$( I=8000; while let I-=1; do echo -n 'x'; done )"
					# wget -O - "${KEEP_ALIVE_URL}?log=$REQUEST"
					# check length of QUERY_STRING on server
					[ ${#QUERY} -gt 8000 ] && {
						_log do $FUNC daemon info "ignoring long line: '${#QUERY}' bytes"
						continue
					}

					case "$QUERY" in
						'log='*)
 							_log do $FUNC daemon debug "send log-message"
							# time=... is appended in log()
 							QUERY="${QUERY}&hostname=$HOSTNAME&mac=$WIFIMAC&rev=$OPENWRT_REV&config=$CONFIG_PROFILE"
 						;;
					esac

					echo "$QUERY" >"/tmp/ARCHIV_MONITORING.recent"

					if [ -e "/tmp/ARCHIV_MONITORING.errors" ]; then
						read errors_overall <"/tmp/ARCHIV_MONITORING.errors"
					else
						errors_overall=0
					fi

					i=0; OUT=
					while [ "$OUT" != "OK" -a $i -lt 10 ]; do {
						OUT="$( _wget do "${KEEP_ALIVE_URL}?${QUERY}&e0=$i&e1=$errors_overall" 10 )" || {
							sleep $i
						}

						_watch coredump 'during: monitoring'
						_watch dns_resolution
						i=$(( i + 1 ))
					} done

					errors_overall=$(( errors_overall + i - 1 ))
					echo "$errors_overall" >"/tmp/ARCHIV_MONITORING.errors"

 					if [ "$OUT" = 'OK' ]; then
 						_log do $FUNC daemon debug "send alive-line: $LINENUMBER_LAST_SUCCESS - $OUT - i: $i"
					else
 						_log do $FUNC daemon info "send alive-line: something went wrong at line '$LINENUMBER_LAST_SUCCESS' - ending ('${KEEP_ALIVE_URL}?${QUERY}' -> '$OUT')"

 						# FIXME! this is a workaround for only sending lines, which we have not send yet
						sed -n "$LINENUMBER_LAST_SUCCESS,999p" "/tmp/ARCHIV_MONITORING" >"/tmp/ARCHIV_MONITORING.tmp"
						mv "/tmp/ARCHIV_MONITORING.tmp" "/tmp/ARCHIV_MONITORING"

 						touch '/tmp/SEND_ALIVE_FAILED'
 						echo >>$SCHEDULER "$0"

						# FIXME! set comment ("marker") after last sent line
 						break
 					fi
 				;;
 				*)
	 				_log do $FUNC daemon debug "send alive normally ended"
 					echo >>"/tmp/ARCHIV_MONITORING" "# alive-message was send @ $DATE_LOCAL_HUMAN (normal exit...)"
 					break
 				;;
			esac
		} done
	fi
fi

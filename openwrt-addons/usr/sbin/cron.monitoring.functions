#!/bin/sh

heartbeat_minimal_send()
{
	local up="$1"		# hours
	local load="$2"		# 15mins

	local file_url='/tmp/MONITORING_HEARTBEAT_URL'
	local file_archiv="$TMPDIR/ARCHIV_MONITORING"
	local mac url up free load lan_clients wifi_clients

	if [ -e "$file_url" ]; then
		read -r url <"$file_url"
	else
		# at least on normal sending/monitoring-run is needed
		grep -q ^'# alive-message was send' "$file_archiv" || {
			grep -q 'olsrrestarttime=' "$file_archiv" || return 1
		}

		read -r mac <'/www/monitoring.wifimac'
		url="$( uci -q get system.@monitoring[0].url )/meshrdf/?refresh=true&mac=$mac"
		echo "$url" >"$file_url"
	fi

	up="$( _system uptime hours )"
	free="$( _system ram_free )"
	load="$( _system load 15min )"
	wifi_clients="$( _net count_wireless )"
	lan_clients="$( _net count_wired )"

	url="$url&up=$up&h2=$free&load=$load&version=$FFF_PLUS_VERSION&r4=$wifi_clients&r5=$lan_clients"

	case "$( _curl it "$url" 30 )" in
		'REFRESHED')
			echo "$url" >"$file_archiv"
		;;
	esac
}

heartbeat_mapapi()
{
	local apiurl='http://mapapi.weimarnetz.de'
	local url="$apiurl/update_node/$HOSTNAME.olsr"
	local file="$TMPDIR/mapapi.cache"
	local data nexthop gateway

	[ -e "$file" ] || {
		# TODO: distinguish between static and dynamic values
		read -r gateway <'/tmp/GATEWAY_CHECK_RECENT_GATEWAY_IP_ONLY'
		read -r nexthop <'/tmp/GATEWAY_CHECK_RECENT_NEXTHOP_IP_ONLY'

		cat >"$file" <<EOF
{
"api_rev": "1.0",
"hostname": "$HOSTNAME",
"latitude": 50,
"type": "node",
"longitude": 12,
"updateInterval": 3600,
"location": "$HOSTNAME",
"weimarnetz": {
	"gateway": "$gateway",
	"nodenumber": $NODENUMBER,
	"nexthop": "$nexthop",
	"gatewaycost": 1
	}
"firmware": {
	"distname": "",
	"luciname": "no LuCI",
	"fffversion": "$FFF_PLUS_VERSION",
	"luciversion": "0",
	"revision": "OpenWrt (kalua) r$OPENWRT_REV",
	"distversion": "OpenWrt (kalua) r$OPENWRT_REV",
	"name": ""
	}
}
EOF
	}

	read -r data <"$file"
	curl -X PUT "$url" -d "$data"
}

#!/bin/sh
. /tmp/loader

pingstat()
{
	local ip="$1"
	local file='/tmp/PING'
	local line='' packets='' retries=''

	if [ -e "$file" ]; then
		while read -r line; do {
			case "$line" in
				*'packets transmitted'*|'round-trip'*)
					printf '%s' "$line "
				;;
			esac
		} done <"$file"
	else
		printf '%s' 'empty_pingstat()'
	fi

	# FIXME! enforce usage of specific interface
	#        otherwise a flapping route (e.g. bad wifi-link) is bad for mesurement
	# append some wifi TX-debug, e.g.:
	# bytes: 10.729.533 packets: 35.965 retries: 4230 (=11.76%) failed: 2 avg: -75 bitrate: 39.0
	ip route get "$ip" | grep -Fq " dev $WIFIDEV " && {
		iw dev $WIFIDEV station get "$( _net ip2mac "$ip" )" |
		 while read -r line; do {
			case "$line" in
				# tx bytes:	  96028494
				# tx packets:     435790
				# tx retries:     1775
				# tx failed:      0
				# signal avg:     -46 [-46] dBm
				# tx bitrate:     65.0 MBit/s MCS 7

# TODO: here we have 100% failed: 'tx packets' = 'tx failed'
#Station 00:27:22:32:0f:dd (on wlan0)
#    inactive time:      2210 ms
#    rx bytes:   1300
#    rx packets: 8
#    tx bytes:   2096
#    tx packets: 26
#    tx retries: 184
#    tx failed:  26
#    signal:     -92 [-92] dBm
#    signal avg: -91 [-91] dBm


				*'tx '*|*'signal avg:'*)
					explode $line

					case "$line" in
						*' bytes:'*|*' packets:'*|*' retries:'*)
							printf '%s' "$2 $( _sanitizer run "$3" number_humanreadable ) "

							if [ -n "$packets" ]; then
								retries=$3
								printf '%s' "($( _math percentof "$retries" "$packets" )%) "
							else
								[ "$2" = 'packets:' ] && packets=$3
							fi
						;;
						*)
							printf '%s' "$2 $3 "
						;;
					esac
				;;
			esac
		} done
	}
}

olsr_stats()		# if we only have one neigh, take it? e.g. ping from central_inetoffer into mesh
{
	local ip="$1"
	local line

	[ -z "$ip" -o "$ip" = 'getip' ] && read -r ip <'/tmp/OLSR/DEFGW_NOW'
	line="$( grep -Fs "$ip" /tmp/OLSR/LINKS )"

	case "$line" in
		*'1.1'[0-9][0-9]|*'1.000'|*'0.100')
			echo 'OK'
		;;
		*)
			echo "$line"
		;;
	esac
}

if   [ -n "$DONT_WORK" ]; then
	:
elif grep -Fs ' 0% packet loss' '/tmp/PING'; then
	mv '/tmp/PING' '/tmp/PING.last'
else
	REST="$( grep -Fs '% packet loss' '/tmp/PING' )"

	case "$REST" in
		'')
		;;
# LOWLOSS #	*' 1% packet loss'*) REST=;;		# 1/59 packets lost
# LOWLOSS #	*' 3% packet loss'*) REST=;;		# 2/59
# LOWLOSS #	*' 5% packet loss'*) REST=;;		# 3/59
# LOWLOSS #	*' 6% packet loss'*) REST=;;		# 4/59
		*'100% packet loss'*)
			# --- 10.10.249.33 ping statistics ---
			# 59 packets transmitted, 0 packets received, 100% packet loss
			REST=1
		;;
		*)
			# --- 10.63.21.97 ping statistics ---
			# 50 packets transmitted, 50 packets received, 0% packet loss
			# round-trip min/avg/max = 3.678/7.829/19.125 ms
			#
			# or:
			# 59 packets transmitted, 48 packets received, 7 duplicates, 18% packet loss
			#
			# or:
			# PING 10.63.209.129 (10.63.209.129): 56 data bytes
			# ping: sendto: Operation not permitted
			REST=2
		;;
	esac

	[ -n "$REST" ] && {
		# ignore error during early UP and reboot_nightly
		[ ${UP%.*} -lt 300 -o ${UP%.*} -gt 86000 ] && {
			_system maintenance_window_active && REST=
		}
	}

	if [ -n "$REST" ]; then
		read -r LOAD _ <'/proc/loadavg'
		echo "$( date ) IP:$IP up:$UP load:$LOAD TX:$( pingstat "$IP" ) OLSR: $( olsr_stats getip )" >>'/www/PINGCHECK'
		mv '/tmp/PING' '/tmp/PING.last'
	else
		[ -e '/tmp/PING' ] && mv '/tmp/PING' '/tmp/PING.last'
	fi
fi

[ -z "$DONT_WORK" ] && {
	# FIXME! enforce specific interface with e.g. '-I $WIFIDEV'
	# grep -s 'round-trip' '/tmp/PING.last' | logger
	ping -q -w59 -c59 ${IP:-127.0.0.1} >'/tmp/PING' &
}

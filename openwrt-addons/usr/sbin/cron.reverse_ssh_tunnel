#!/bin/sh
. /tmp/loader

ARG1="$1"	# e.g. 'no_check_ssh'

case "$CONFIG_PROFILE" in
	malchow*)
		uci set system.@monitoring[0].maintenance='reverse_sshtunnel'
		uci set system.@monitoring[0].maintenance_ports='22 80'
	;;
esac

[ "$( uci get system.@monitoring[0].maintenance )" = 'reverse_sshtunnel' ] && {
	PORTS="$( uci get system.@monitoring[0].maintenance_ports )"
	PORTS="${PORTS:-22}"
}

_net local_inet_offer || {
	[ "$( uci get system.@monitoring[0].maintenance_force )" = '1' ] || {
		exit 1
	}
}

tunnel_is_running()
{
	local port="$1"
	local pid line

	for pid in $( pidof dbclient ); do {

		# dbclient-y-I600-K300-f-N-R8080:localhost:80-p22root@intercity-vpn.de-i/etc/dropbear/dropbear_dss_host_key
		read line <"/proc/$pid/cmdline"

		case "$line" in
			*":localhost:$port-"*)
				_log do reverse_sshtunnel daemon info "[OK] $line"
				return 0
			;;
		esac
	} done

	return 1
}

fire_tunnel()
{
	local funcname="fire_tunnel"
	local port_here="$1"
	local port_server="$2"
	local type="$3"		# message = ssh | http
	local maxtry="${4:-25}"

	local user="root"
	local server="$( _http url_get_serverstring "$( uci get system.@monitoring[0].url )" )"
	local try=0

	_log do reverse_sshtunnel daemon debug "[START] on local port $port_here and server port $port_server type '$type'"

	while [ $try -lt $maxtry ]; do {
		dbclient -y -I 600 -K 300 -f -N \
			 -R $port_server:localhost:$port_here \
			 -p 22 ${user}@${server} \
			 -i "/etc/dropbear/dropbear_dss_host_key" && break

		_log sleep "$funcname() [ERR] try/max: $try/$maxtry to $server" 10 step 1
		try=$(( try + 1 ))
	} done

	[ $try -eq $maxtry ] && _log do $funcname daemon alert "[ERR] abort after $try retries for type $type"

	if pidof dbclient >/dev/null; then
		_log do reverse_sshtunnel daemon info "[OK] pid: '$( pidof dbclient )' on local port $port_server"
	else
		_log do reverse_sshtunnel daemon alert "[ERR] could not startup on local port $port_server"
	fi
}

for LOCAL_PORT in $PORTS; do {
	case "$LOCAL_PORT" in
		22)
			[ "$ARG1" = "no_check_ssh" ] || _watch sshd_or_telnet

			tunnel_is_running "$LOCAL_PORT" || {
				[ -e "/tmp/service_ssh_nowatching" ] && {
					rm "/tmp/service_ssh_nowatching"
				}

				fire_tunnel "$LOCAL_PORT" "$( _net text2port "${CONFIG_PROFILE}${HOSTNAME}" )" "ssh"
			}
		;;
		80)
			_watch webserver

			tunnel_is_running "$LOCAL_PORT" || {
				fire_tunnel "$LOCAL_PORT" "$( _net text2port "${CONFIG_PROFILE}${HOSTNAME}HTTP" )" "http"
			}
		;;
	esac
} done

#!/bin/sh
. /tmp/loader

ARG1="$1"	# e.g. 'no_check_ssh'

[ "$( uci get system.@monitoring[0].maintenance )" = 'reverse_sshtunnel' ] && {
	PORTS="$( uci get system.@monitoring[0].maintenance_ports )"
	PORTS="${PORTS:-22}"
}

bool_true 'system.@monitoring[0].maintenance_force' || {
	_net local_inet_offer >/dev/null || exit
}

tunnel_is_running()
{
	local port="$1"
	local pid line

	# on server:
	# lsof -i -n | grep ^sshd | grep $REMOTE_ADDR

	for pid in $( pidof dbclient ); do {
		# dbclient-y-I600-K300-f-N-R8080:localhost:80-p22root@intercity-vpn.de-i/etc/dropbear/dropbear_dss_host_key
		read -r line <"/proc/$pid/cmdline"

		case "$line" in
			*":localhost:$port-"*)
				_log it reverse_sshtunnel daemon info "[OK] $line"
				return 0
			;;
		esac
	} done

	return 1
}

fire_tunnel()
{
	local funcname='fire_tunnel'
	local port_here="$1"
	local port_server="$2"
	local service="$3"	# message = ssh | http
	local maxtry="${4:-25}"
	local pids
	local user='root'
	local server="$( _http url_get_serverstring "$( uci get system.@monitoring[0].url )" )"
	local try=0
	local keyfile="$( _ssh key_public_fingerprint_get keyfilename )"

	_log it $funcname daemon debug "[START] local port $port_here server port $port_server service '$service'"

	while [ $try -lt $maxtry ]; do {
		dbclient -y -I 600 -K 300 -f -N \
			 -R $port_server:localhost:$port_here \
			 -p 22 ${user}@${server} -i "$keyfile" && break

		_log sleep "$funcname() [ERR] try/max: $try/$maxtry to $server" 10 step 5
		try=$(( try + 1 ))
	} done

	[ $try -eq $maxtry ] && _log it $funcname daemon alert "[ERR] abort after $try retries for service '$service' port $port_server"

	if pids="$( pidof dbclient )"; then
		_log it $funcname daemon info "[OK] pid: '$pids' on local port $port_server"
	else
		_log it $funcname daemon info "[ERR] could not startup on local port $port_server"
		return 1
	fi
}

for LOCAL_PORT in $PORTS; do {
	case "$LOCAL_PORT" in
		22)
			tunnel_is_running "$LOCAL_PORT" || {
				[ -e '/tmp/service_ssh_nowatching' ] && rm '/tmp/service_ssh_nowatching'
				[ "$ARG1" = 'no_check_ssh' ] || _watch sshd_or_telnet

				REMOTE_PORT="$( _net text2port "${CONFIG_PROFILE}${HOSTNAME}" )"
				fire_tunnel "$LOCAL_PORT" "$REMOTE_PORT" 'ssh' || {
					echo >>$SCHEDULER "$0 $*"
				}
			}
		;;
		80)
			tunnel_is_running "$LOCAL_PORT" || {
				_watch webserver

				REMOTE_PORT="$( _net text2port "${CONFIG_PROFILE}${HOSTNAME}HTTP" )"
				fire_tunnel "$LOCAL_PORT" "$REMOTE_PORT" 'http' || {
					echo >>$SCHEDULER "$0 $*"
				}
			}
		;;
	esac
} done

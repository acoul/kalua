#!/bin/sh

# rrdtool fetch /tmp/datafile.rrd AVERAGE

rrd_setup()
{
	local option="$1"			# 'keep_database'
	local file="/tmp/datafile.rrd"
	local interval=60			# [sec]
	local maxwait=$(( $interval * 2 ))	# [sec] writes 'unknown' into database after this time
	local minmax_unlimited='U:U'		# allow all values, do not limit min or max
	local minmax_100mbit='0:12500000'
	local minmax_100mbit_packets='0:12500'

	[ -e "$file" ] && {
		if [ "$option" = 'keep_database' ]; then
			return 0
		else
			rm "$file"
		fi
	}

	_log do setup daemon info "initial setup of $file"

	# DS  = Data Source
	# RRA = Round Robin Archive
	# datasource_type = DERIVE|COUNTER|ABSOLUTE|GAUGE - see https://collectd.org/wiki/index.php/Data_source

	rrdtool create "$file" \
		DS:upload_packets:DERIVE:${maxwait}:$minmax_100mbit_packets \
		DS:upload_bytes:DERIVE:${maxwait}:$minmax_100mbit \
		DS:download_packets:COUNTER:${maxwait}:$minmax_100mbit_packets \
		DS:download_bytes:COUNTER:${maxwait}:$minmax_100mbit \
		DS:wifi_stations:GAUGE:${maxwait}:$minmax_unlimited \
		DS:different_users:GAUGE:${maxwait}:$minmax_unlimited \
		DS:tcp:GAUGE:${maxwait}:$minmax_unlimited \
		DS:udp:GAUGE:${maxwait}:$minmax_unlimited \
		DS:signal:GAUGE:${maxwait}:$minmax_unlimited \
			--step $interval \
			RRA:AVERAGE:0.5:1:1440
#			RRA:AVERAGE:0.5:4:3600 \
#			RRA:AVERAGE:0.5:24:3600
}

rrd_update()
{
	local force_station_mac="$1"

	local funcname='rrd_update'
	local file="/tmp/datafile.rrd"
	local up_packets=0 up_bytes=0
	local down_packets=0 down_bytes=0
	local mac stations=0
	local users=0 iw_rc=0
	local line udp=0 tcp=0 signal=0
	local typical_average_packetsize=350	# for upscaling in graph

	[ -e "$file" ] || return 0

# FIXME!
#	[ -e "/tmp/STATS_FORWARD" ] && {	# S51cron set this if needed
#		local stats_old
#		read stats_old <"/tmp/STATS_FORWARD"
#		[ "$stats_old" = "${up_packets}:${down_packets}" ] && {
#			echo "ALERT: no_forward $( date ) - load: $LOAD - up: $UP stats: $stats_old" >>/www/everlasting_syslog.txt
#		}
#		echo "${up_packets}:${down_packets}" >"/tmp/STATS_FORWARD"
#	}

	for mac in /sys/kernel/debug/ieee80211/phy0/netdev:$WIFIDEV/stations/*; do stations=$(( $stations + 1 )); done
	case "$mac" in
		*'*') stations=0
		;;
	esac

	for mac in /tmp/vds_user_*; do users=$(( $users + 1 )); done
	case "$mac" in
		*'*') users=0
		;;
	esac

	# longshot-mode
	if [ $stations -eq 1 -o -n "$force_station_mac" ]; then
		if   [ "$force_station_mac" = 'all' ]; then
			set -- $( iw dev "$WIFIDEV" station dump || iw_rc=$? ) was_empty
		elif [ -n "$force_station_mac" ]; then
			set -- $( iw dev "$WIFIDEV" station get "$force_station_mac" || iw_rc=$? ) was_empty
		else
			set -- $( iw dev "$WIFIDEV" station dump || iw_rc=$? ) was_empty
		fi

		line="$@"
		shift 7

		# fixme! maybe we should add e.g. 'tx retries:' to get the REAL air-pollution or at least graph it
		while [ -n "$2" ]; do {
			shift
			case "$1 $2" in
				'rx bytes:')
					up_bytes=$(( $up_bytes - $3 ))
					shift 2
				;;
				'rx packets:')
					up_packets=$(( $up_packets - $3 ))
					shift 2
				;;
				'tx bytes:')
					down_bytes=$(( $down_bytes + $3 ))
					shift 2
				;;
				'tx packets:')
					down_packets=$(( $down_packets + $3 ))
					shift 2
				;;
				'signal avg:')
					signal=$(( $signal + ${3:-0} ))
					[ "$force_station_mac" = 'all' ] || break
				;;
			esac
		} done

		signal=$(( $signal / $stations ))
		up_packets=$((   $up_packets   * $typical_average_packetsize ))		# later: use CDEF
		down_packets=$(( $down_packets * $typical_average_packetsize ))

		[ ${iw_rc:-0} -eq 0 ] || {
			. /tmp/loader
			_log do $funcname daemon alert "strange values: rc: $iw_rc line: '$line'"
		}

		case "${up_bytes}" in
			*'-'*|'0')
				up_bytes=$(( $up_bytes * -1 ))
			;;
			*)
				. /tmp/loader
				_log do $funcname daemon alert "strange values: rc: $iw_rc up_bytes: $up_bytes line: '$line'"
				up_bytes=0
			;;
		esac

		case "${up_packets}" in
			*'-'*|'0')
				up_packets=$(( $up_packets * -1 ))
			;;
			*)
				. /tmp/loader
				_log do $funcname daemon alert "strange values: rc: $iw_rc up_packets: $up_packets line: '$line'"
				up_packets=0
			;;
		esac

		case "${down_bytes}" in
			*'-'*|'')
				. /tmp/loader
				_log do $funcname daemon alert "strange values: rc: $iw_rc down_bytes: $down_bytes line: '$line'"
				down_bytes=0
			;;
		esac

		case "${down_packets}" in
			*'-'*|'')
				. /tmp/loader
				_log do $funcname daemon alert "strange values: rc: $iw_rc down_packets: $down_packets line: '$line'"
				down_packets=0
			;;
		esac
	else
		set -- $( $IPT -nxvL FORWARD 2 ) 0
		case "$1" in
			'0')
				up_packets=0
				up_bytes=0
			;;
			*)
				up_packets="-$(( $1 * $typical_average_packetsize ))"
				up_bytes=-$2
			;;
		esac

		set -- $( $IPT -nxvL FORWARD 1 ) 0
		down_packets=$(( $1 * $typical_average_packetsize ))
		down_bytes=$2
	fi

	while read line; do {
		case "$line" in
			*" tcp"*)
				tcp=$(( $tcp + 1 ))
			;;
			*)
				# this is not correct
				udp=$(( $udp + 1 ))
			;;
		esac
	} done <"/proc/net/nf_conntrack"

#	logger "up: $up_packets/$up_bytes down: $down_packets/$down_bytes stations: $stations users: $users conn-tcp/udp: $tcp/$udp signal: $signal"

	# upscale, so we can see it in graph (fixme! use CDEF-expression)
	stations=$(( stations * 100000 ))	# 5 station = at 500k/s traffic-level
	users=$(( $users * 10000 ))		# 200 user = at 2 MB/s traffic-level
	tcp=$(( $tcp * 1000 ))
	udp=$(( $udp * 1000 ))
	signal=$(( $signal * -10000 ))		# e.g. -70 dBm at 700k/s traffic-level

	line="N:${up_packets}:${up_bytes}:${down_packets}:${down_bytes}:${stations}:${users}:${tcp}:${udp}:${signal}"

	rrdtool update "$file" $line || {
		_log do $funcname daemon info "error $?: rrdtool update $file $line"
	}
}

rrd_show()
{
	local duration="${1:-$( _system uptime min )min}"	# e.g. 15min, 4h

	local webfile="/www/traffic.png"
	local output="/tmp/graph.png"
	local file="${2:-/tmp/datafile.rrd}"
	local rrd_version="$( rrdtool --version | head -n1 )"
	local date="$( _system date humanreadable pretty )"
	local location="$( _weblogin metadata_locationname )"
	local title="$location: forwarded WAN-traffic $WANDEV host-$NODENUMBER: $HOSTNAME - time: $date (-$duration)"
	local watermark

	local context="traffic"
	local label="bytes/sec & users/stations (1 = 100k) & TCP/UDP-conntrack (1000 = 1M)"	# Y-axis
	local alpha="44"
	local end='\j'

	case "$rrd_version" in
		*'1.0.50'*|*'1.0.'*)
			# element not supported
			unset watermark
			unset alpha
		;;
		*'1.2.30'*|*'1.2.'*)
			watermark='kalua-framework'
		;;
	esac

	local color1='#ff6600'		# upload_packets		- orange
	local color2="#9999ff${alpha}"	# upload_bytes/area		- grey
	local color3='#00cc00'		# download_packets		- green
	local color4="#ffCC00${alpha}"	# download_bytes/area		- yellow
	local color5='#ff9999'		# connected wifi_stations	- pink
	local color6='#0099ff'		# users_overall(login ok/valid)	- babyblue
	local color7='#663300'		# tcp / conntrack		- brown
	local color8='#cc0066'		# udp / conntrack		- violett
	local color9='#ff0000'		# signal			- red

	# supress output of image-size
	rrdtool >/dev/null graph "$output"				\
		--imgformat PNG --width 900 --height 600		\
		--start -$duration					\
		--vertical-label "$label"				\
		--title "$title" ${watermark+--watermark} $watermark 	\
		DEF:upload_packets=${file}:upload_packets:AVERAGE	\
		DEF:upload_bytes=${file}:upload_bytes:AVERAGE		\
		DEF:download_packets=${file}:download_packets:AVERAGE	\
		DEF:download_bytes=${file}:download_bytes:AVERAGE	\
		DEF:wifi_stations=${file}:wifi_stations:AVERAGE		\
		DEF:different_users=${file}:different_users:AVERAGE	\
		DEF:tcp=${file}:tcp:AVERAGE				\
		DEF:udp=${file}:udp:AVERAGE				\
		DEF:signal=${file}:signal:AVERAGE			\
		LINE1:upload_packets${color1}:"upload [packets]  "	\
			GPRINT:upload_packets:LAST:"current\:%8.2lf %s"	\
			GPRINT:upload_packets:AVERAGE:"avg\:%8.2lf %s"	\
			GPRINT:upload_packets:MIN:"min\:%8.2lf %s"	\
			GPRINT:upload_packets:MAX:"max\:%8.2lf %s$end"	\
		AREA:upload_bytes${color2}:"upload [bytes]    "		\
			GPRINT:upload_bytes:LAST:"current\:%8.2lf %s"	\
			GPRINT:upload_bytes:AVERAGE:"avg\:%8.2lf %s"	\
			GPRINT:upload_bytes:MIN:"min\:%8.2lf %s"	\
			GPRINT:upload_bytes:MAX:"max\:%8.2lf %s$end"	\
		LINE1:download_packets${color3}:"download [packets]"	\
			GPRINT:download_packets:LAST:"current\:%8.2lf %s"	\
			GPRINT:download_packets:AVERAGE:"avg\:%8.2lf %s"\
			GPRINT:download_packets:MIN:"min\:%8.2lf %s"	\
			GPRINT:download_packets:MAX:"max\:%8.2lf %s$end"	\
		AREA:download_bytes${color4}:"download [bytes]  "		\
			GPRINT:download_bytes:LAST:"current\:%8.2lf %s"	\
			GPRINT:download_bytes:AVERAGE:"avg\:%8.2lf %s"	\
			GPRINT:download_bytes:MIN:"min\:%8.2lf %s"	\
			GPRINT:download_bytes:MAX:"max\:%8.2lf %s$end"	\
		LINE2:wifi_stations${color5}:"wifi_stations     "	\
			GPRINT:wifi_stations:LAST:"current\:%8.2lf %s"	\
			GPRINT:wifi_stations:AVERAGE:"avg\:%8.2lf %s"	\
			GPRINT:wifi_stations:MIN:"min\:%8.2lf %s"	\
			GPRINT:wifi_stations:MAX:"max\:%8.2lf %s$end"	\
		LINE2:different_users${color6}:"users_logged_in   "	\
			GPRINT:different_users:LAST:"current\:%8.2lf %s"\
			GPRINT:different_users:AVERAGE:"avg\:%8.2lf %s"	\
			GPRINT:different_users:MIN:"min\:%8.2lf %s"	\
			GPRINT:different_users:MAX:"max\:%8.2lf %s$end"	\
		LINE1:tcp${color7}:"TCP-connections   "			\
			GPRINT:tcp:LAST:"current\:%8.2lf %s"		\
			GPRINT:tcp:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:tcp:MIN:"min\:%8.2lf %s"			\
			GPRINT:tcp:MAX:"max\:%8.2lf %s$end"		\
		LINE1:udp${color8}:"UDP-connections   "			\
			GPRINT:udp:LAST:"current\:%8.2lf %s"		\
			GPRINT:udp:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:udp:MIN:"min\:%8.2lf %s"			\
			GPRINT:udp:MAX:"max\:%8.2lf %s$end"		\
		LINE2:signal${color9}:"signal [dBm]      "		\
			GPRINT:signal:LAST:"current\:%8.2lf %s"		\
			GPRINT:signal:AVERAGE:"avg\:%8.2lf %s"		\
			GPRINT:signal:MIN:"min\:%8.2lf %s"		\
			GPRINT:signal:MAX:"max\:%8.2lf %s$end" || {
				logger -s "error $? during rrdtool graph ..."
				return 1
			}

	[ -h "$webfile" ] || ln -s "$output" "$webfile"
#	logger -s "wrote: '$output', look at http://$LANADR/$( basename "$webfile" )"

	return 0
}

rrd_upload()
{
	local funcname="rrd_upload"
	local duration="$1"
	local file="/tmp/graph.png"
	local date="$( _system date humanreadable | sed 's/:/./g' )"
	local dest="$( uci get system.@vds[0].server )../media/traffic_${HOSTNAME}_${date}.png"
	local try=30

	rrd_show "$duration" || return 1
	pidof scp >/dev/null && return 1

	. /tmp/loader
	while [ $try -gt 0 ]; do {
		_log do $funcname daemon info "uploading '$file' to '$dest'"
		scp -i /etc/dropbear/dropbear_dss_host_key "$file" "$dest" && break
		sleep $try
		try=$(( $try - 1 ))
	} done
}

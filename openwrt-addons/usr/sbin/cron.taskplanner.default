#!/bin/sh

# MINUTE = 00...59
# HOUR   = 00...23
eval $( date '+MINUTE=%M; HOUR=%H; WEEKDAY=%A; DAYOFMONTH=%d;' )

# fixme!
# still needed for $SCHEDULER + $CONFIG_PROFILE + $LOWMEM + _ntp set is_unset + _math random_integer
. /tmp/loader
[ -z "$UP" ] && read UP REST </proc/uptime		# normally done during cron.minutely

# echo >$SCHEDULER '_firmware check_forced_upgrade'
[ -e '/tmp/.autorun' ] && _watch autorun		# direct call

cat >>$SCHEDULER <<EOF
_watch wifistuff
_watch olsrstuff
_watch monitoring
_watch coredump 'during: taskplanner.minutely'
_wifi watch_phy_problems
_watch space_tmpfs
. /usr/sbin/cron.check_switch
_netfilter traffic_control_autoapply_speedsuggest
_watch pppoe
_watch local_proxy
_netfilter splash_batman_alien_unauth
EOF

# full test is every 15min
pidof uhttpd  >/dev/null || echo >>$SCHEDULER_IMPORTANT '_watch webserver'
pidof dnsmasq >/dev/null || echo >>$SCHEDULER_IMPORTANT '_watch dns_resolution'

# uptime.sec->minutes divideable (without rest) by 360? -> each 360 mins
[ $(( $(( ${UP%.*} / 60 )) % 360 )) -eq 0 ] && {
	echo >>$SCHEDULER 'cron.upgrade_packages'	# e.g. daily restart is at 4:05
	echo >>$SCHEDULER '_firmware update_pmu'	# so: 10:05, 16:05, 22:05
	echo >>$SCHEDULER '_watch configchange'
}

case "$CONFIG_PROFILE" in
	ffweimar*)
	;;
	*)
		echo >>$SCHEDULER '_netfilter user_stats_collect'
	;;
esac

case "$HOUR:$MINUTE" in
#	17:00)
#		echo >>$SCHEDULER_IMPORTANT '_wifi longshot_test 17:10:00 36...40 "719 670" >/www/BLUBB'
#	;;
	01:00|02:00|03:00)
		echo >>$SCHEDULER '_db ticketcheck auto'
		echo >>$SCHEDULER '_firmware update_pmu'
	;;
	04:00)
		echo >>$SCHEDULER '_wifi longshot_report'

		[ -e '/tmp/cron.webcam' ] && {
			echo >>$SCHEDULER 'touch /tmp/webcam_force_safe'
			echo >>$SCHEDULER '. /tmp/cron.webcam'
		}

		[ -e '/tmp/cron.rrd' ] && {
			echo >>$SCHEDULER '. /tmp/cron.rrd'
			echo >>$SCHEDULER 'rrd_upload'
		}

		if bool_true 'system.@system[0].avoid_autoreboot'; then
			:
		else
			# dont make serious action, when we are not sure if time is correct
			_ntp set is_unset || {
				echo >>$SCHEDULER '_netfilter stop remember_over_reboot'
				echo >>$SCHEDULER '_netfilter ipforwarding_start'
				echo >>$SCHEDULER '_netfilter masquerade_start'
				echo >>$SCHEDULER '_log sleep collecting_userdata_from_all_nodes 300 step 30'
				echo >>$SCHEDULER '_watch reanimate_dead_neighbour'
				echo >>$SCHEDULER '_system reboot_safe nightly_reboot'
			}
		fi
	;;
	05:00)
		[ -e "$DIR_DATABASE/USER/login/rows" ] && {
			echo >>$SCHEDULER '_db user login index_gen'
		}
	;;
	06:00)
		[ -e "$DIR_DATABASE/USER/device/stats" ] && {
			case "$CONFIG_PROFILE" in
				malchow*|ilm1*|tkolleg*|fparkssee*|marinapark*|dhfleesensee*|aschbach*|olympia*|liszt28*|rehungen*|boltenhagen*|castelfalfi*|berlinle*)
					[ -e '/tmp/statistics_send_mail-daily' ] || {
						touch '/tmp/statistics_send_mail-daily'		# only once

						echo >>$SCHEDULER "sleep $( _math random_integer 0 100 )"
						echo >>$SCHEDULER '_db statistics_send_mail daily yesterday'
					}
				;;
			esac

			case "$WEEKDAY" in
				'Monday')
					[ -e '/tmp/statistics_send_mail-weekly' ] || {
						touch '/tmp/statistics_send_mail-weekly'	# only once

						echo >>$SCHEDULER "sleep $( _math random_integer 0 100 )"
						echo >>$SCHEDULER '_db statistics_send_mail weekly report'

						# each first monday in month
						case "$DAYOFMONTH" in
							01|02|03|04|05|06|07)
								echo >>$SCHEDULER '_db statistics_send_mail monthly_report'
							;;
						esac
					}
				;;
			esac
		}
	;;
esac

case "$MINUTE" in
	00|15|30|45)
		case "$MINUTE" in
			00)
				echo >>$SCHEDULER 'cron.monitoring send_alive_message'
				echo >>$SCHEDULER '_watch wifi_cronactive $HOUR $MINUTE'
				echo >>$SCHEDULER '_mail stash_resend'
			;;
		esac

# check if enough ram is available
#		[ -e '/tmp/cron.rrd' ] && {
#			echo >>$SCHEDULER '. /tmp/cron.rrd'
#			echo >>$SCHEDULER 'rrd_show'
#		}

		bool_true 'system.@monitoring[0].cdp_send' && {
			MACHINE="$( _sanitizer do "$HARDWARE" alphanum )"

			for DEV in $WANDEV $LANDEV $WIFI_DEVS; do {
				cdp-send -o -t 999 -m "$MACHINE" -n "$HOSTNAME" "$DEV"
			} done
		}

		bool_true 'system.@vds[0].enabled' && {
			echo >>$SCHEDULER '/usr/sbin/cron.evaluate_ulogd_syslogemu_fff+'

			# only call if needed
			[ -e '/tmp/COLLECT_DATA' ] && echo >>$SCHEDULER 'cron.add_collected_userdata_into_db'

			# wait for process (=http to master) if we are not the master/authserver
			# this should help against too much load on master
			# TODO: _weblogin_authserver "isme?"
			[ -e "$DIR_DATABASE/USER/device/stats" ] || {
				echo >>$SCHEDULER '_log sleep jitter_user_stats_process networksize step 5'
			}

			echo >>$SCHEDULER '_netfilter user_stats_process'
		}

		bool_true 'system.@monitoring[0].statusprecache' && {
			echo >>$SCHEDULER '_olsr build_overview_static /tmp/statuspage_neigh_pregenerated'
		}

		cat >>$SCHEDULER <<EOF
/usr/sbin/cron.check_inet_gw_fff+
/etc/init.d/S69watch_olsrd_fff+
cron.monitoring
_watch webserver
_watch dns_resolution
_watch cgminer
_watch hanging_command usual_suspects
_watch flash_free_space
_watch system_time
_watch sshd_or_telnet
_watch random_node_id
_watch dhcp_space
_watch nanostation_max_ethernet
_net refresh_dnshosts
_db generate_grepable_index check
EOF

		[ -z "$LOWMEM" ] && echo >>$SCHEDULER '/usr/sbin/cron.reverse_ssh_tunnel'
	;;
esac

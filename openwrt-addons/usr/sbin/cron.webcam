#!/bin/sh
. /tmp/loader

# todo: choose framerame according to ram_size
# cam_id: $NODENUMBER
# display pixel_change or user better algo: http://www.lavrsen.dk/foswiki/bin/view/Motion/ConfigOptionTextLeft
#
# take series of shots and fix autofocus:
# v4l2-ctl --all
# v4l2-ctl --list-ctrls
# v4l2-ctl --set-ctrl focus_auto=0
# v4l2-ctl --set-ctrl focus_absolute=0  (0...10)
# v4l2-ctl --list-ctrls | fgrep 'focus_absolute '  --> e.g. max=10 min=0
# v4l2-ctl --list-formats-ext

# working devices:
# 045e:0772 = 'Microsoft Corp. LifeCam Studio' = Buero/aussen
# 03f0:9207 = 'HP Webcam HD-4110' = Buero/innen
# 046d:082d = 'Logitech, Inc. HD Pro Webcam C920' = Frenzel/Muelltonne
# b0rken:
# 1bcf:0b01 = 'Sunplus Innovation Technology Inc.'

# eval $( ls -laR /tmp/motion | while read -r LINE; do explode ${LINE:-0}; echo "SIZE=\$(( SIZE + ${5:-0} ));"; done ); echo $SIZE; du -s /tmp/motion
# http://stackoverflow.com/questions/12293853/how-to-use-ffmpeg-timestamp-syntax
# http://ffmpeg.org/trac/ffmpeg/wiki/x264EncodingGuide
# mplayer -tv driver=v4l2:device=/dev/video0 tv://
# v4l2-ctl --all
# fswebcam -d /dev/video0 --fps 1 -r 640x480 /www/cam.jpg

# ROUTER: scp "$( _ssh key_public_fingerprint_get keyfilename ).pub" bastian@10.63.2.34:.ssh/authorized_keys.$HOSTNAME
# SERVER: cat /home/bastian/.ssh/authorized_keys.* >>/home/bastian/.ssh/authorized_keys

# 3.9 Which are good parameters for encoding high quality MPEG-4?
# "-mbd rd -flags +mv4+aic -trellis 2 -cmp 2 -subcmp 2 -g 300 -pass 1/2"
# try: "-bf 2" - "-flags qprd" - "-flags mv0" or "-flags skiprd"

motion_generate_conf()			# resolution: (motion needs modulo 16) - or:
{					# 1920 x 1080 = 1920 x 1072		 800 x  600
	local width="${1:-640}"		# 1280 x  720 = 1280 x  720		 640 x  480
	local height="${2:-480}"	#  800 x  450 =  800 x  448		 1024 x 576 (16:9)
	local mode="${3:-day}"		#  640 x  343 =  640 x  336
	local dir='/webcam'
	local snapshot quali threshold pixel_change_in_percent_for_motion append_arg

	# TODO: lookup sunset/sunrise like chickendoor
	case "$mode" in
		day)
			snapshot=60
			quali=80
			pixel_change_in_percent_for_motion=4
		;;
		night)
			snapshot=600
			quali=95
			pixel_change_in_percent_for_motion=2
		;;
	esac

	# default is 1500 pixel, which is 0.5% for 640 x 480
	threshold=$(( ((width * height) / 100) * pixel_change_in_percent_for_motion ))

	_system add_ramdisc "$dir"
	if command -v motion >/dev/null; then
		cat <<EOF
daemon			on
quiet			on
videodevice		/dev/video0
width			$width
height			$height
quality			$quali		# jpeg compression (mode: $mode)
threshold		$threshold		# for motion $pixel_change_in_percent_for_motion% of all pixels must change
target_dir		"$dir"
snapshot_filename	webcam
snapshot_interval	$snapshot
text_left		"host: $HOSTNAME location: ($( uci -q get system.@admin[0].location )) $mode-mode"
pre_capture		5
framerate		3		# maximum per second, fast cpu = 30
EOF
	else
		[ "$( readlink '/www/webcam.jpg' )" = "$dir/webcam.jpg" ] || {
			rm '/www/webcam.jpg'
			ln -s "$dir/webcam.jpg" '/www/webcam.jpg'
		}

		append_arg='--quiet --no-banner --no-timestamp'
		bool_true 'system.@webcam[0].flip_x' && append_arg="$append_arg --flip v"
		bool_true 'system.@webcam[0].flip_y' && append_arg="$append_arg --flip h"
		echo "fswebcam -d /dev/video0 $append_arg --fps 1 -r ${width}x${height} '$dir/webcam.jpg'"
	fi
}

force_apply_config()
{
	local pid memtotal x y resolution

	read -r _ memtotal _ <'/proc/meminfo'

	# see possible resolutions: v4l2-ctl -d /dev/video0 --list-framesizes=YUYV
	if resolution="$( uci -q get system.@webcam[0].resolution )"; then
		# e.g. 800x448
		x="$( echo $resolution | cut -d'x' -f1 )"
		y="$( echo $resolution | cut -d'x' -f2 )"
	else
		if [ $memtotal -gt 32768 ]; then
			x=1280
			y=720
		else
			x=640
			y=336
		fi
	fi

	_webcam probe
	motion_generate_conf "$x" "$y" "$( store_startdate )"  >"/tmp/motion.conf"

	v4l2-ctl --set-ctrl focus_auto=0	# off
	v4l2-ctl --set-ctrl focus_absolute=0	# 0 = sharp: far away

	pid="$( pidof motion )" && kill -SIGHUP $pid
}

store_startdate()
{
	local config="/tmp/motion.conf"
	local mode

	date +%s     >"/tmp/webcam.startunix"
	date +%Hh%Mm >"/tmp/webcam.start"

	# fixme! use http://www.earthtools.org/webservices.htm#sun
	case "$( date +%H )" in	# 00..23
		18|19|20|21|22|23|00|01|02|03|04|05|06)
			mode="night"
		;;
		*)
			mode="day"
		;;
	esac

	echo "$mode"

	[ -e "$config" ] && {
		grep -q "mode: $mode" "$config" || {
			force_apply_config
		}
	}
}

[ -e "/tmp/motion.conf" ] || {
	_ntp set
	store_startdate
	force_apply_config

	[ -e "/www/webcam.jpg" ] || ln -s "/webcam/lastsnap.jpg" "/www/webcam.jpg"
}

storage_is()			# measure low/high-jump
{
	local funcname="storage_is"
	local mode="$1"		# crowded | full
	local lowram=8000000	# bytes = 8mb
	local ram_free

	eval "$( _system ram_free ram_free= )"
	[ $ram_free -lt $lowram ] && return 0

	explode $( df | grep "/webcam"$ )
	STORAGE_FREE="${5%%%*}"			# global var

	_log it $funcname daemon info "webcam: percent_used: $STORAGE_FREE% mode: '$mode' - ram: $ram_free bytes"
	[ $ram_free -lt $lowram ] && return 0		# simulates "storage full"

	case "$mode" in
		crowded)
			test $STORAGE_FREE -ge 55
		;;
		full)
			test $STORAGE_FREE -ge 75
		;;
	esac
}

store_startdate()
{
	date +%s     >"/tmp/webcam.startunix"
	date +%Hh%Mm >"/tmp/webcam.start"
}

RUN_ENCODER=
[ -e "/tmp/webcam_rename" ] || {
	pidof motion >/dev/null || {
		[ -e "/tmp/webcam_last_event" ] && rm "/tmp/webcam_last_event"

		if grep -sq ^'fswebcam' '/tmp/motion.conf'; then
			# FIXME! (called twice?)
			:
#			. '/tmp/motion.conf'
		else
			motion -c "/tmp/motion.conf"
		fi
	}

	if [ -e '/tmp/webcam_force_safe' ]; then
		RUN_ENCODER='true'
	else
		storage_is crowded && RUN_ENCODER='true'
	fi

	# workaround:
	grep -sq ^'fswebcam' '/tmp/motion.conf' && RUN_ENCODER=
}

# logger -s "RUN_ENCODER=$RUN_ENCODER"

if [ -n "$RUN_ENCODER" ]; then
	read -r STARTDATE <"/tmp/webcam.start"
	read -r STARTUNIX <"/tmp/webcam.startunix"
	FILENAME="/tmp/cam_${NODENUMBER}-stream-id_${STARTUNIX}-$( date +%Y_%b_%d )-from_${STARTDATE}_to_$( date +%Hh%Mm ).mp4"
	store_startdate

#	sed -i '/^framerate/s/30/1/' /tmp/motion.conf
#	kill -SIGHUP $( pidof motion )

	cd /webcam || return
	ls -1t ./*[0-9].jpg >/tmp/webcam_rename		# newest on top

	COUNT=$( wc -l </tmp/webcam_rename )

	# prepare encoding and rename all files in a useable pattern for 'ffmpeg'
	I=0
	while read -r LINE; do {
		FILE="/webcam/img_$(( COUNT - I )).ffmpeg.jpg"
		echo "mv '$LINE' '$FILE'; LIST_DELETEABLE=\"\$LIST_DELETEABLE $FILE\"; "
		I=$(( I + 1 ))
	} done </tmp/webcam_rename | grep -n '' | sort -rn | cut -d: -f2- >/tmp/webcam_rename.sh	# emulate tac
#	cp /tmp/webcam_rename.sh /tmp/WEX
	. /tmp/webcam_rename.sh

	echo "video_encoding" >/tmp/CRON_OVERLOAD

	while [ -e "/tmp/webcam_rename.sh" ]; do {
		while storage_is full; do {
			# do not delete the newest/topmost, can confuse 'motion':
			# - list files, newest first
			# - insert empty line after each filename
			# - list from line 2 till end
			# - remove empty lines
			# - show last line
			# shellcheck disable=SC2012
			FILE="$( ls -1t ./*[0-9].jpg | sed -e '/.jpg/G' -e '2,999!d' | sed '/^$/d' | head -n1 )"

			if [ -n "$FILE" ]; then
				_log it remove_ffmpeg daemon info "T1: rm '$FILE' free: $STORAGE_FREE%"
			else
				# remove oldesti/first element, hopefully ffmpeg has eaten it already
				for FILE in $LIST_DELETEABLE; do {
					explode $LIST_DELETEABLE
					shift
					LIST_DELETEABLE="$*"
					break
				} done

				_log it remove_ffmpeg daemon info "T2: rm '$FILE' free: $STORAGE_FREE%"
			fi

			if [ -n "$FILE" ]; then
				rm "$FILE"
			else
				_log it remove_ffmpeg daemon alert "T3: no file to delete - killing motion"
				killall motion
				break
			fi
		} done
		sleep 5
	} done &

	encode_now()
	{
		if storage_is full; then
			return 1
		else
			_log it webcam_ffmpeg daemon alert "generating '$FILENAME' with $COUNT frames"
			_stopwatch start video_encoding

			# default bitrate = 200k is crap
			# check encoders: ffmpeg -encoders
			# ffmpeg -framerate 10 -i bla-%02d.jpg -b:v 2500k -s:v 800x600 -c:v mpeg4 "$OUT"
			ffmpeg -f image2 -i img_%d.ffmpeg.jpg -b 2500k -vcodec mpeg4 "$FILENAME"
		fi
	}

	if encode_now; then
		_stopwatch stop 'video_encoding' quiet "$COUNT" "frames"

		rm -f /webcam/img_*
		SIZE="$( _file size "$FILENAME" )"
		divisor_valid "$COUNT" || COUNT=1
		_log it webcam_ffmpeg daemon alert "generated '$FILENAME' with $SIZE bytes/$COUNT frames = $(( SIZE / COUNT )) bytes/frame"	# divisor_valid

		DESTINATION="$( uci -q get system.@webcam[0].storage_path )"
		DESTINATION="${DESTINATION:-$( uci -q get system.@vds[0].server )../media}"
		[ -n "$DESTINATION" ] && {
			scp -i "$( _ssh key_public_fingerprint_get keyfilename )" "$FILENAME" $DESTINATION || {
				_log it scp_movie daemon alert "failed to scp '$FILENAME' -> '$DESTINATION'"
			}
		}
	else
		_log it webcam_ffmpeg daemon alert "[ERROR] encoding rc: $?"
		_stopwatch stop 'video_encoding' quiet
	fi

	rm -f /webcam/img_* "$FILENAME" "/tmp/CRON_OVERLOAD" /tmp/webcam_rename /tmp/webcam_rename.sh /tmp/webcam_force_safe

	force_apply_config
#	sed -i '/^framerate/s/1/30/' /tmp/motion.conf
#	kill -SIGHUP $( pidof motion )
else
	[ -e "/webcam/webcam.jpg" ] && {
		SIZE=$( _file size '/webcam/webcam.jpg' )
		[ $SIZE -gt 0 -a $SIZE -lt 3000 ] && {		# FIXME! depends on quality and day/night
			_log it webcam_filesize daemon alert "low pic: $SIZE bytes, reboot"
			_system crashreboot 'webcam_pic2small'
		}
	}

	[ -e "/webcam/MARK" ] || touch "/webcam/MARK"
	if [ "/webcam/lastsnap.jpg" -ot "/webcam/MARK" ]; then
		touch /webcam/MARK
	else
		cp /webcam/lastsnap.jpg /webcam/snap-${UP:-$$}.jpg

		# hack: this takes a snap to '$dir/webcam.jpg' if fswebcam - see motion_generate_conf()
		grep -sq ^'fswebcam' '/tmp/motion.conf' && {
			. '/tmp/motion.conf'
			case "$( date '+%M' )" in
				00|15|30|45)
					FORCE=1
					rm -f '/webcam/snap-'*
				;;
			esac
		}
	fi

	recent_files()
	{
		ls -1t /webcam/*-*-*.jpg /webcam/webcam.jpg
	}

	for FILE in $( recent_files ); do break; done
	explode $( ls -l '/webcam/lastsnap.jpg' ); shift 10
	# only renew symlink of source has changed
	[ "${FILE#*m/}" = "${1#*m/}" ] || ln -fs "$FILE" '/webcam/lastsnap.jpg'

	# /webcam/01-20160224114704-00.jpg
	# /webcam/06-20140203112306-01.jpg -> /webcam/06
	# get last file / highest number
	for _ in '/webcam/webcam.jpg' "/webcam/"[0-9]*; do test -e "$_" && FILE="$_"; done
	EVENT_RECENT="$( echo "$FILE" | cut -d'-' -f1 )"
	[ -e "/tmp/webcam_last_event" ] && read -r EVENT_LAST <'/tmp/webcam_last_event'

	[ "${EVENT_RECENT:=/webcam/snap}" != "$EVENT_LAST" -o -n "$FORCE" ] && {
		[ -z "$FORCE" ] && {
			# upload the file which is in the middle of an event, e.g.
			# 08-20140203110041-00.jpg
			COUNT=0
			for _ in "$EVENT_RECENT-"*; do COUNT=$(( COUNT + 1 )); done

			# shellcheck disable=SC2012
			FILE="$(  ls -1 "$EVENT_RECENT-"* | sed "$(( COUNT / 2 ))q;d" )"
		}

		_log it webcam_upload daemon info "file '$FILE'"

		echo "$EVENT_RECENT" >"/tmp/webcam_last_event"

		DESTINATION="$( uci -q get system.@webcam[0].storage_path )"			# e.g. bastian@10.63.2.34:
		DESTINATION="${DESTINATION:-$( uci -q get system.@vds[0].server )../media}"	# e.g. root@intercity-vpn.de:/var/www/networks/liszt28/vds/
		case "$DESTINATION" in
			*'/'|*':')
			;;
			*)
				DESTINATION="$DESTINATION/"
			;;
		esac

		[ -n "$DESTINATION" -a -n "$FILE" ] && {
			if pidof scp >/dev/null ; then
				_watch hanging_command scp
			else
				_log it scp_snapshot daemon info "scp-ing '$FILE' to '${DESTINATION}$NODENUMBER.jpg'"
				scp -i "$( _ssh key_public_fingerprint_get keyfilename )" "$FILE" ${DESTINATION}$NODENUMBER.jpg || {
					_log it scp_snapshot daemon alert "failed to scp '$FILE' -> '${DESTINATION}$NODENUMBER.jpg'"
				}
			fi
		}
	}
fi

#!/bin/sh
. /tmp/loader

log()
{
	echo "$(date) $1" >>'/tmp/IWLOG'
	_log do iwevent daemon info "$1"
}

mac2ipv4()	# TODO: better name
{
	local funcname='mac2ipv4'
	local mac="$1"
	local wifidev="$2"
	local dev='br-mastergate'
	local file="/tmp/ROAMING_remove_host_route_$mac"
	local i=15
	local ip

	while let i-=1; do {
		# ignore IPv6 and show IPv4
		# fe80::221:6aff:fe32:7c1c dev wlan1-1 lladdr 00:21:6a:32:7c:1c STALE
		# 192.168.158.61 dev br-mastergate lladdr 00:21:6a:32:7c:1c REACHABLE
		set -- $( ip neigh show dev "$dev" | fgrep "$mac" | grep -v '::' )
		ip="$1"

		case "$ip" in
			*'.'*)
				case "$ip" in
					"192.168.${NODENUMBER_ROAMING}."*)
						log "$funcname($i) OK: no action for $mac/$ip needed: our own HNA4-range"
					;;
					*)
						log "$funcname($i) setting host route for alien $ip"
						ip route add "$ip/32" dev $dev && {
							echo "ip route del $ip/32 dev $dev && rm $file" >"$file"
						}
					;;
				esac

				echo "$ip"
				return 0
			;;
			*)
				sleep 1
			;;
		esac
	} done

	if iw dev $wifidev station get $mac >/dev/null; then
		log "$funcname($i) failed to get IP for $mac - scheduling"
		echo >>$SCHEDULER_IMPORTANT "INCLUDE=1 . /usr/sbin/cron.wireless_events; worker $wifidev new $mac"
	else
		log "$funcname($i) station $mac lost - giving up"
	fi
}

worker()
{
	local wifidev="$1"	# e.g. 'wlan0-1'
	local mode="$2"		# e.g. 'new' or 'del'
	local mac="$3"
	local ip
	local txt="worker() WIFIDEV: $wifidev MODE: $mode MAC: $mac"

	case "$mode" in
		'new')
			log "$txt"
			txt="$txt - ip: '$( mac2ipv4 "$mac" "$wifidev" )'"
			log "$txt"
		;;
		'del')
			if [ -e "/tmp/ROAMING_remove_host_route_$mac" ]; then
				log "$txt - alien: deleting route"
				. "/tmp/ROAMING_remove_host_route_$mac"
			else
				log "$txt - native (no route del)"
			fi
		;;
	esac
}

active_ap_devices()
{
	local dev
	# FIXME! dynamisch aus file holen, was via hotplug gebaut wird
	# e.g. ' wlan0 wlan1-1 wlan1-2 '
	grep ^'interface=' /var/run/hostapd-phy[0-3].conf | cut -d'=' -f2 | while read dev; do echo -n " $dev "; done
}

if [ -z "$( _wifi get any mode ap )" ]; then
	log "exit - no wifi AP configured"
	INCLUDE='exit'
else
	log "start listening on '$( active_ap_devices )'"
fi

[ -z "$INCLUDE" ] && {
	iw event | while read LINE; do {
		case "$LINE" in
			*': del station '*|*': new station '*)
				# wlan0-1: del station 00:21:6a:32:7c:1c
				# wlan0: new station dc:9f:db:02:b8:ee
				case "$( active_ap_devices )" in
					*" ${LINE%: *} "*)
						set -- $LINE
						log "EVENT: '$LINE'"
						worker "${1%:*}" "$2" "$4"
					;;
				esac
			;;
			'regulatory domain change: set to '*)
				# e.g. iw reg set 00; iw reg set US
				# TODO: find better method
				log "stopped by user via regset"
				break
			;;
		esac
	} done

	_log do iwevent daemon alert "unexspected event loop exit, rc: $?"
}

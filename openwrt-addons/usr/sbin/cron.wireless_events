#!/bin/sh
. /tmp/loader

log()
{
	local message="$1"
	local prio="${2:-info}"

	case "$1" in
		'rotate')
			bool_true 'system.@monitoring[0].roaming_stats' && {
				cp '/tmp/IWLOG' "/www/IWLOG.$( _system date unixtime )"
			}

			_watch archivsize '/tmp/IWLOG' 1000 2000
		;;
		*)
			echo "$(date) $message" >>'/tmp/IWLOG'
			_log it iwevent daemon "$prio" "$message"
		;;
	esac
}

mac2ipv4()	# TODO: better name
{
	local funcname='mac2ipv4'
	local mac="$1"
	local wifidev="$2"
	local dev='br-mastergate'
	local file="/tmp/ROAMING_remove_host_route_$mac"
	local i=20	# loop-retries
	lcoal signal command ip_list ip=
	local server_asked='false'

	test $( _wifi dev2freq "$dev" ) -lt 3000 || i=30	# give more time on 5ghz

	while let i-=1; do {
		# ignore IPv6 and show IPv4
		# fe80::221:6aff:fe32:7c1c dev wlan1-1 lladdr 00:21:6a:32:7c:1c STALE
		# 192.168.158.61 dev br-mastergate lladdr 00:21:6a:32:7c:1c STALE
		# 192.168.233.62 dev br-mastergate lladdr 00:21:6a:32:7c:1c REACHABLE
		# 192.168.23.61 dev br-mastergate  FAILED
		# 10.73.210.167 dev br-mastergate lladdr 38:63:f6:04:9d:b7 STALE
		case "$server_asked" in
			'false')
				# TODO: find a better regex
#				# prevent a segfault: http://lists.busybox.net/pipermail/busybox/2016-January/083789.html
#				ip_list="$( ip -family inet neigh show dev "$dev" | fgrep "$mac" | cut -d' ' -f1 | grep ^'1[09][02]' )"
				ip_list="$( ip -family inet neigh |  fgrep "$dev" | fgrep "$mac" | cut -d' ' -f1 | grep ^'1[09][02]' )"

				if [ -n "$ip_list" ]; then
					for ip in $ip_list; do break; done	# fill var with 1st list_element
					log "$funcname($i) grabbed ip from arp: $mac -> $ip_list"
				else
					ip=
					log "$funcname($i) no match in arp for $mac"
				fi
			;;
		esac

		case "$ip" in
			*'.'*)
				any_good_ip()
				{
					local testip
					local test_list="${ip_list:-$ip}"

					for testip in $test_list; do {
						# arping with max 3 tries
						if _net ip_reachable "$testip" 4 "$dev"; then
							ip="$testip"
							return 0
						else
							# if we have 2 entries and picked the wrong
							ip neigh del "$testip" dev "$dev"
							_net roaming_mac2ip "$mac" delete_from_local_cache "$testip"
						fi
					} done

					log "$funcname($i) [ERROR] no good ip found, last: '$testip' out of '$test_list'"
					ip=
					return 1
				}

				any_good_ip || {
					server_asked='false'
					continue
				}

				if  _net both_ipv4_in_same_subnet "$ip/32" "$ROAMING_NET_LOCAL/$ROAMING_PRE_LOCAL"; then
						log "$funcname($i) [SUCCESS] no route-set for $mac/$ip needed: our own HNA4-range"
						_netfilter user_probe "$mac" || {
							signal="$( _wifi signal "$wifidev" "$mac" )"

							if   _weblogin login_check  "$mac" ''          "$mac" "$signal"; then
								_netfilter user_add "$mac" "$ip"
							elif _weblogin login_check  "$mac" "$HOSTNAME" "$mac" "$signal"; then
								_netfilter user_add "$mac" "$ip"
							fi
						}
				elif _net both_ipv4_in_same_subnet "$ip/32" "$ROAMING_NET/$ROAMING_PRE"; then
						log "$funcname($i) is alien/global roamer: $ip"

						if ip route add "$ip/32" dev $dev; then
							log "$funcname($i) [SUCCESS] setting host route for alien $ip"

							if _net local_inet_offer >/dev/null; then
								# FIXME! e.g. giancarlo
								command="NAT_ALIEN_ROAMERS -s $ip -j MASQUERADE"
							else
								command="NAT_ALIEN_ROAMERS -s $ip -j SNAT --to-source $OLSR_MAIN_IP"
							fi

							$IPT -t nat -I $command
							# this file is sourced/executed after 'station del'
							{
								echo "$IPT -t nat -D $command"
								echo "ip route del $ip/32 dev $dev"
								echo "rm $file"
							} >"$file"
						else
							if ip route get "$ip/32" | fgrep -q " dev $dev "; then
								log "$funcname($i) seems already added $ip"
							else
								# TODO: remove old route and try again? e.g. 'RTNETLINK answers: File exists'
								log "$funcname($i) failed to add route for $ip / $dev" alert
								continue
							fi
						fi
				else
						log "$funcname($i) wrong IP: $mac/$ip"
						continue
				fi

				# FIXME! report ip, if 'server_asked' failed - but how to set 'expires'?
				echo "$ip"
				return 0
			;;
			*)
				# not found in arp-cache, try to ask server (only once)
				if [ "$server_asked" = 'false' -a $i -le 15 ]; then
					server_asked='true'
					ip="$( _net roaming_mac2ip "$mac" )"
					[ -n "$ip" ] && {
						log "$funcname($i) OK: mac2ip/full worked: $mac -> $ip"
						server_asked='true:OK'
					}
				else
					# DHCP is ready ~3...4 secs after connecting
					ip="$( _net roaming_mac2ip "$mac" 'local_only' )"
					if [ -n "$ip" ]; then
						log "$funcname($i) OK: mac2ip/local_only worked: $mac -> $ip"
						server_asked='true:OK'
					else
						sleep 1
					fi
				fi
			;;
		esac
	} done

	# e.g. signal: -69 [-75, -71, -77] dBm
	# e.g. signal:   2 [0, -1] dBm		// r41037
	if signal="$( iw dev $wifidev station get $mac | fgrep 'signal:' )"; then
		explode $signal
		log "$funcname($i) kicking station - failed to get IP for $mac ($*)" alert
		_wifi kick "$mac" "$wifidev"
	else
		log "$funcname($i) station $mac lost - giving up"
	fi
}

worker()
{
	local wifidev="$1"	# e.g. 'wlan0-1'
	local mode="$2"		# e.g. 'new' or 'del'
	local mac="$3"
	local ip signal signal_try=4
	local kickmarker="$TMPDIR/kicked_low_signal_$mac-$wifidev"
	local txt="worker($$) dev:$wifidev ch:$( _wifi channel $wifidev ) MODE: $mode MAC: $mac"

	case "$mode" in
		'new')
			# if the client is in bad conditions and we
			# are the only AP near him, we should let him connect.
			# if the condition is old (e.g. 5mins) we should judge new
			_file age "$kickmarker" -gt 300 && rm -f "$kickmarker"

			if [ -e "$kickmarker" ]; then
				log "$txt found kickmarker, simulating good signal"
				signal=-2
			else
				while [ $signal_try -gt 0 ]; do {
					# e.g. '-87' or '0' or '5'
					signal="$( _wifi signal "$wifidev" "$mac" )"
					if [ ${signal:-0} -eq 0 ]; then
						signal_try=$(( signal_try - 1 ))
						sleep 1
					else
						break
					fi
				} done
			fi

			signal_is_bad()
			{
				local client_signal="$1"
				local dev="$2"
				local border_2ghz=-73	# good = 0 or -1 ... -73 or even '5'
				local border_5ghz=-83
				local border

				if [ $( _wifi dev2freq "$dev" ) -lt 3000 ]; then
					border="$border_2ghz"
				else
					border="$border_5ghz"
				fi

				log "$txt - signal: '$signal' border: '$border' try: $signal_try"
				test $client_signal -lt $border
			}

			if signal_is_bad "${signal:=-1}" "$wifidev"; then
				touch "$kickmarker"
				log "$txt - KICKED early, bad signal: '$signal'"
				_wifi kick "$mac" "$wifidev"
			else
				ip="$( mac2ipv4 "$mac" "$wifidev" )"
				[ "$signal" = '0' ] && signal="$( _wifi signal "$wifidev" "$mac" )"

				txt="$txt - ip: '$ip' signal: '$signal' (is_good)"
				log "$txt"
			fi
		;;
		'del')
			if [ -e "/tmp/ROAMING_remove_host_route_$mac" ]; then
				log "$txt - alien: deleting route"
				. "/tmp/ROAMING_remove_host_route_$mac"
			else
				log "$txt - native (no route del)"
			fi

			[ -e "$kickmarker" ] && {
				# if the client really wants to connect with bad signal, let him
				_file age "$kickmarker" -gt 120 && rm "$kickmarker"
			}

			log rotate
		;;
	esac
}

active_ap_devices()	# e.g. ' wlan0 wlan1-1 wlan1-2 '
{
	cat "$TMPDIR/WIFI_DEVS_AP" 2>/dev/null || {
		grep ^'interface=' /var/run/hostapd-phy[0-3].conf | cut -d'=' -f2 | while read -r dev; do echo -n " $dev "; done
	}
}

stop()
{
	[ -e '/tmp/IWLOG' ] && {
		iw reg set 00
		iw reg set US
	}
}

if   [ -n "$INCLUDE" ]; then
	:
elif [ -z "$( _wifi get any mode ap )" ]; then
	log '[OK] exit, no wifi AP configured'
	INCLUDE='exit'
else
	# needed for SNAT later
	OLSR_MAIN_IP="$( uci get olsrd.@olsrd[0].MainIp )"
	[ -z "$OLSR_MAIN_IP" ] && OLSR_MAIN_IP="${LANADR:-$WANADR}"

	log "start listening on '$( active_ap_devices )' PID: $$ OLSR_MAIN_IP: $OLSR_MAIN_IP"
fi

[ -z "$INCLUDE" ] && {
	_stopwatch start 'iw_event' global
	PIDS_IW_BEFORE="$( pidof iw )"

	# otherwise we lose maybe important events
	for DEV in $( active_ap_devices ); do {
		for MAC in $( _wifi mac_assoclist "$DEV" ); do {
			_wifi kick "$MAC" "$DEV"
		} done
	} done

	# TODO: write into file and read nonforking? -> so we can inject arbitrary commands (e.g. stop)
	iw event | while read -r LINE; do {
		COUNTER=$(( ${COUNTER:-0} + 1 ))

		case "$PID_IW" in
			'')
				# during first run, get real PID of 'iw' for killing it later
				for PID_IW in $( pidof iw ); do {
					_list contains_element "$PIDS_IW_BEFORE" "$PID_IW" || break
				} done
			;;
		esac

		[ -e '/tmp/DEBUG' ] && log "DEBUG: $LINE"

		case "$LINE" in
			*': del station '*|*': new station '*)
				# wlan0-1: del station 00:21:6a:32:7c:1c
				# wlan0: new station dc:9f:db:02:b8:ee
				# only start the 'worker' for interesting events ("active_ap"):
				case "$( active_ap_devices )" in
					*" ${LINE%: *} "*)
						explode $LINE
						log "EVENT $COUNTER: '$LINE'"
						worker "${1%:*}" "$2" "$4"
					;;
				esac

				[ $( _stopwatch stop '/tmp/CRON_LASTCALL' interim,nolog,seconds ) -gt 3600 ] && {
					_system crashreboot 'cron_died'
				}
			;;
			'regulatory domain change: set to '*)
				# regulatory domain change: set to world roaming by a user request
				log "EVENT $COUNTER: '$LINE'"

				if [ -e "$TMPDIR/IWLOOP_RESPECT_REGSET" ]; then
					for FILE in "/tmp/ROAMING_remove_host_route_"*; do {
						[ -e "$FILE" ] && . "$FILE"	# see worker
					} done

					# e.g. iw reg set 00; iw reg set US
					# TODO: find better method
					log "stopped by user via regset, stopping iw: $PID_IW"
					rm -r "$TMPDIR/kicked_low_signal_"* 2>/dev/null
					kill $PID_IW
					break
				else
					log "ignoring '$LINE' - touch '$TMPDIR/IWLOOP_RESPECT_REGSET' for this"
				fi
			;;
#			*': unknown event '*)
#				# wlan1-1 (phy #1): unknown event 60	// often 60, sometimes 84
#				# see 'nl80211.h' from e.g. 'iw'
#				log "EVENT $COUNTER: '$LINE'"
#			;;
		esac
	} done

	RC=$?
	DURATION="$( _stopwatch stop 'iw_event' seconds,nolog )"
	[ $DURATION -lt 10 -a $RC -eq 0 ] && RC=$(( RC - 1000 ))	# still a number but not 0 (so it is logged)

	test $RC -eq 0 || {
		[ "$( tail -n1 '/tmp/IWLOG' )" = 'stopped by user via regset' ] || {
			log "unexpected event loop exit, rc: $RC, duration: $DURATION sec" alert
		}
	}

	echo >>$SCHEDULER_IMPORTANT '_net roaming_eventlistener start scheduled_after_end_of_eventloop'
}

#!/bin/sh
. /tmp/loader

if [ -n "$REMOTE_ADDR" ]; then
	# called from httpd/cgi
	eval $( _http query_string_sanitize "$0" )		# e.g. http://url/?OPT=sysinfo

	[ "$REQUEST_METHOD" = 'POST' ] && {			# do this, if submit-button was pressed
								# (POST-method) - GET arguments are passed too(!)
		[ -n "$FORM_LATITUDE" -a -n "$FORM_LONGITUDE" ] && {
			_log it setting_gps user info "LATITUDE='$FORM_LATITUDE' LONGITUDE='$FORM_LONGITUDE'"
			_nvram set ff_adm_latlon "$FORM_LATITUDE;$FORM_LONGITUDE"
			_nvram set commit "changed ff_adm_latlon"
			echo >>$SCHEDULER '_olsr daemon restart scheduler_controlled'
		}

		[ -n "$IPWIZARD" ] && {
			eval "$( _ipsystem get $IPWIZARD )"
		}

		[ -n "$TFTP_HARDWARE" ] && {
			_tool htmlout_head
			fkt_print_tftp_flashing
			_tool htmlout_foot
			exit
		}
	}
else
	# call from shell (not via webserver)
	OPT="$1"	
fi

case "$OPT" in
	internet|keininternet|office)
		bool_true 'system.@weblogin[0].allow_cgi_roles' && {
			case "$OPT" in
				'internet')
				;;
				'keininternet')
				;;
				'office')
				;;
			esac

			_log it cgi_role daemon alert "role: '$OPT' ip: $REMOTE_ADDR"
		}
	;;
	minimail)
		# invoke with e.g.
		# http://$ip/cgi-bin-tool.sh?OPT=minimail&RECIPIENT=user@foo.org&SUBJECT=system_report&MESSAGE=your+full+message"
		_http header_mimetype_output 'text/plain'

		RECIPIENT="$( _sanitizer run "$RECIPIENT" shellsafe )"
		SUBJECT="$(   _sanitizer run "$SUBJECT"   shellsafe )"
		MESSAGE="$(   _sanitizer run "$MESSAGE"   shellsafe )"

		_log it $OPT daemon info "RECIPIENT: $RECIPIENT SUBJECT: $SUBJECT IP: $REMOTE_ADDR"
		echo >>$SCHEDULER "_mail send_telegram '$RECIPIENT' '$SUBJECT' '$MESSAGE'"
		echo 'OK'
	;;
	message)
		# read via:
		# grep ^"$( date '+%b %d' ) " $PERMLOG | grep 'message()' | while read -r LINE; do explode $LINE; shift 12; echo $@; done
		_http header_mimetype_output 'text/plain'

		MSG="$( _sanitizer run "$MSG" shellsafe )"
		_log it message daemon alert "IP: $REMOTE_ADDR - $MSG"

#		case "$MSG" in
#			'button_pressed'*)
#				_log it $OPT daemon sms "IP: $REMOTE_ADDR - $MSG"
#			;;
#		esac

		echo 'OK'
	;;
	portforwarding_table)
		_http header_mimetype_output 'text/plain'
		_netfilter portforwarding_add get_table
	;;
	portforwarding)
		# sort of poormens-UPnP:
		# e.g. a remote node, asks if we can forward a port (tcp+udp) to him
		# e.g. OPT=portforwarding&CLIENT=$ip&PORT=80&MAC=11:22:33:44:55:66&NAME=webcam
		#
		# ANSWER='number of external-port', e.g. 10080 or 'ERR'

		_http header_mimetype_output 'text/plain'

		if _net local_inet_offer >/dev/null; then
			# incoming_dev | port_ext -> text2port | port_intern | ip | uniq_id | message
			_netfilter portforwarding_add "$WANDEV" "$MAC-$PORT" "$PORT" "$CLIENT" "$MAC" "$NAME ip: $REMOTE_ADDR"
			echo 'OK'
		else
			echo 'ERROR - no local inet offer'
		fi
	;;
	hostname)
		_http header_mimetype_output 'text/plain'
		echo "$HOSTNAME"
	;;
	ip2mac)
		_http header_mimetype_output 'text/plain'

		# HTTP_HOST is the local IP to which the client connects
		_net ip2mac "$HTTP_HOST"
	;;
	sms)
		_http header_mimetype_output 'text/plain'

		case "$CONFIG_PROFILE" in
			ejbw*)
				case "$REMOTE_ADDR" in
					'172.17.0.81'|'172.17.0.82')
					;;
					*)
						MESSAGE=
					;;
				esac
			;;
			*)
				MESSAGE=
			;;
		esac

		if [ -n "$MESSAGE" ]; then
			_log it $OPT daemon alert "txt: $MESSAGE no: $NUMBER"
			_sms send "$NUMBER" "$MESSAGE"
			echo 'ok'
		else
			echo 'forbidden'
		fi
	;;
	download)
		mkdir -p '/tmp/STATS'
		_http header_mimetype_output "application/octet-stream" "testdownload_from_${HOSTNAME}_to_${REMOTE_ADDR}.bin"
		_stopwatch start "download_${REMOTE_ADDR}"

		# 5120 kb
		if dd if=/dev/zero bs=128k count=40 2>&- ; then
			_stopwatch stop "download_${REMOTE_ADDR}" quiet,speed 5243 kilobytes >"/tmp/STATS/download_${REMOTE_ADDR}"
		else
			_stopwatch stop "download_${REMOTE_ADDR}" quiet,speed 0 "aborted_download:rc$?"
		fi

		# store minstrel-table if possible, needed for wifi_longshot_test()
		DEV="$( _net ip2dev "$REMOTE_ADDR" )"
		case "$DEV" in
			$LANADR|$WANADR)
			;;
			*)
				MAC="$( _net ip2mac "$REMOTE_ADDR" )"

				for PHY in phy0 phy1; do {
					FILE="/sys/kernel/debug/ieee80211/$PHY/netdev:$DEV/stations/$MAC/rc_stats"
					if [ -e "$FILE" ]; then
						cat "$FILE" >"/tmp/STATS/minstrel_${REMOTE_ADDR}_${MAC}"
						break
					else
						_log it tool_download daemon info "REMOTE_ADDR: $REMOTE_ADDR - cannot stat '$FILE'"
					fi
				} done
			;;
		esac
	;;
	download_results)
		_http header_mimetype_output 'text/plain'

		if [ -e "/tmp/STATS/download_${REMOTE_ADDR}" ]; then
			cut -d'.' -f1 "/tmp/STATS/download_${REMOTE_ADDR}"
		else
			echo "?"
		fi
	;;
	minstrel)
		_http header_mimetype_output 'text/plain'

		case "$REMOTE_ADDR" in
			127.0.0.1|$WIFIADR|$LANADR|$WANADR)
				REMOTE_ADDR="$( ip route list exact '0.0.0.0/0' )"
				REMOTE_ADDR="$( _sanitizer run "$REMOTE_ADDR" ip4 )"
			;;
		esac

		NEXTHOP="$( traceroute -n "$REMOTE_ADDR" -m 1 -q 1 -w 10 | tail -n1 )"
		NEXTHOP="$( _sanitizer run "$NEXTHOP" ip4 )"
		[ -z "$NEXTHOP" ] && {
			NEXTHOP="$( ip route list exact '0.0.0.0/0' )"
			NEXTHOP="$( _sanitizer run "$NEXTHOP" ip4 )"
		}

		# minstrel-trace: execute on gateway:
		# ip=10.63.48.1; while :; do case "$ip" in $LANADR|$WIFIADR|$WANADR) break ;; esac; O="$( _tool remote "$ip" minstrel )"; echo "$ip: $O"; eval $O; done >/tmp/T;cat /tmp/T; rm /tmp/T

		_wifi minstrel "$NEXTHOP"
	;;
	startshell)
		_http header_mimetype_output 'text/plain'

		[ -e '/etc/udhcpc.user' ] && . '/etc/udhcpc.user'

		_watch counter "/tmp/cgi-$OPT" increment 1 max 5 || {
			rm "/tmp/cgi-$OPT"
			_watch hanging_command dropbear
			_watch hanging_command dropbear
			echo "# killed dropbear"
		}

		if [ -n "$LOWMEM" ]; then
			/etc/init.d/dropbear restart || {
				echo >>$SCHEDULER_IMPORTANT '_watch sshd_or_telnet force'
				pidof dropbear >/dev/null || {
					echo >>$SCHEDULER_IMPORTANT '_watch sshd_or_telnet force'
					_watch sshd_or_telnet force
				}
			}
		else
			_watch sshd_or_telnet force
			echo "# pidof dropbear: '$( pidof dropbear )'"
			echo "# pidof telnetd: '$( pidof telnetd )'"
		fi
	;;
	scan_summary)
		_tool htmlout_head
		_tool htmlout_$OPT
	;;
	print_everlog)
		_tool htmlout_head

		if [ -e "$PERMLOG" ]; then
			echo '<pre>'
			cat "$PERMLOG"
			echo '</pre>'
		else
			echo 'Bisher sind keine wichtigen Systemmeldungen angefallen.<br>'
		fi
	;;
	neigh)
		_tool htmlout_head
		func_print_neigh
	;;
	adblock_table)
		_tool htmlout_head
		func_print_adblock_table
	;;
	mac2ip_table)
		_tool htmlout_head
		func_print_mac2ip_table
	;;
	wifi_on_or_off)
		_tool htmlout_head
		func_wifi_on_or_off
	;;
	apply_profile)
		_http header_mimetype_output 'text/plain'
		echo >>$SCHEDULER '/etc/init.d/apply_profile.code'
	;;
	fwupdate)
		_tool htmlout_head
		func_print_update_help
	;;
	fwupdatecheck)
		_tool htmlout_head
		_tool fwupdatecheck
	;;
	tftp)
		_tool htmlout_head
		fkt_print_tftp_help
	;;
	wikistartpic)
		_tool htmlout_head
		fkt_grab_startpic_from_wiki
	;;
	killallwget)
		_tool htmlout_head
		fkt_killall_wget
	;;
	wifimac)
		_tool htmlout_head
		_net dev2mac "${WIFIDEV:-${LANDEV:-$WANDEV}}"
	;;
	'unixtime')
		_http header_mimetype_output 'text/plain'
		date +%s
	;;
	'time')
		_tool htmlout_head
		fkt_print_time
	;;
	version)
		_tool htmlout_head
		fkt_print_version
	;;
	notebookconf)
		_tool htmlout_head
		fkt_print_html_notebook_conf
	;;
	netfilterolsr|netfilter)
		_http header_mimetype_output 'text/plain'

		for T in raw mangle filter nat; do {
			echo "### $T"
			$IPT -t $T -nxvL
		} done
	;;
	net_fulltrace)
		_tool htmlout_head
		_net fulltrace $IP
	;;
	speed_nexthop)
		# e.g.: 10.63.160.161 LAN 4369
		_tool htmlout_head
		_wifi speed cached verbose
	;;
	speedarchiv)
		_tool htmlout_head
		fkt_print_html_speedarchiv
	;;
	speedtest)
		_tool htmlout_head
		_log it speedtest daemon info "do $ARGS (from $REMOTE_ADDR)"
		_speedtest run $ARGS
	;;
	tracearchiv)
		_tool htmlout_head
		fkt_print_html_tracearchiv
	;;
	servicearchiv)
		_tool htmlout_head
		fkt_print_html_servicearchiv
	;;
	node_data_archiv)
		_tool htmlout_head
		fkt_print_html_node_data_archiv
	;;
	sysinfo)
		_tool htmlout_head
		_tool sysinfo
	;;
	syslog)
		_tool htmlout_head
		fkt_print_html_syslog
	;;
	tracetest)
		_tool htmlout_head
		fkt_print_html_internet_trace
	;;
	traceremote)
		_tool htmlout_head
		fkt_print_html_trace_to_remote
	;;
	telnet)
		_tool htmlout_head
		fkt_start_or_end_telnetd
	;;
	accounting)
		_tool htmlout_head
		fkt_print_accounting
	;;
	reboot)
		_tool htmlout_head
		fkt_print_link_to_reboot
	;;
	accounting_gen_cache)
		fkt_print_accounting generate_cache >/tmp/cached_fkt_print_accounting
	;;
	*)
		export GUI=1
		_tool htmlout_head
		_tool htmlout_selectbox
	;;
esac

_tool htmlout_foot

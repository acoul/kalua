#!/bin/sh
. /tmp/loader

# logger "$0: query: '$QUERY_STRING'"		# fast debug

eval $( _http query_string_sanitize "$0" )

AMP="&amp;"
BG_0="lightblue"
BG_A="#FAEBD7"
BG_B="#DCDCDC"
ARROW="<b>&rarr;</b>"

_db include

[ -n "$FORM_THEME_NAME" ] && {
	[ "$FORM_THEME_NAME" = "uniform_name" ] && {
		FORM_THEME_NAME="$FORM_USERNAME"
	}

	[ "$( uci -q get system.@weblogin[0].namespace )" = "$FORM_THEME_NAME" ] || {
		_log do uci_commit daemon alert 'system: changed weblogin-namespace'
		uci set system.@weblogin[0].namespace="$FORM_THEME_NAME"
		uci commit system
	}
}

[ "$FORM_ACTION" = "login_update" -a "$FORM_AUTHMODE" = "macaddresshostnames" ] && {
	FORM_USERNAME="$FORM_USERNAME_MACADDRESS"
	FORM_PASSWORD="$FORM_PASSWORD_HOSTNAMES"
}

[ -n "$FORM_ACTION_LOGIN_DEL_CHECKED" -o -n "$FORM_ACTION_LOGIN_DEL_RANGE" ] && {

	FORM_ACTION="login_del"

	[ -n "$FORM_CB" ] && {
		LIST_FORM_CHECKBOX="$( _http query_string_group2list FORM_CB_ )"
	}

	[ -z "$LIST_FORM_CHECKBOX" ] && {
		LIST_FORM_CHECKBOX="$( _db user login list $FORM_RANGE_METHOD $FORM_RANGE_KEYWORD )"
	}

	_log do login_del_specific daemon info "list: '$LIST_FORM_CHECKBOX'"
	for FORM_ID in $LIST_FORM_CHECKBOX; do {
		_db user login del "$FORM_ID"
	} done

	echo >>$SCHEDULER '_db user login index_gen'

	FORM_ACTION="login_show"
}


if   [ -n "$FORM_ACTION_LOGIN_SHOW_RANGE_METHOD1" ]; then
	FORM_ACTION="login_show"
	FORM_RANGE_METHOD="range"
	FORM_RANGE_KEYWORD="$FORM_RANGE_METHOD_VALUE1"
elif [ -n "$FORM_ACTION_LOGIN_SHOW_RANGE_METHOD2" ]; then
	FORM_ACTION="login_show"
	FORM_RANGE_METHOD="range"
	FORM_RANGE_KEYWORD="$FORM_RANGE_METHOD_VALUE2"
elif [ -n "$FORM_ACTION_LOGIN_SHOW_RANGE_METHOD3" ]; then
	FORM_ACTION="login_show"
	FORM_RANGE_METHOD="range"
	FORM_RANGE_KEYWORD="$FORM_RANGE_METHOD_VALUE3"
elif [ -n "$FORM_ACTION_LOGIN_SHOW_RANGE_METHOD4" ]; then
	FORM_ACTION="login_show"
	FORM_RANGE_METHOD="range"
	FORM_RANGE_KEYWORD="$FORM_RANGE_METHOD_VALUE4"
fi


[    -n "$FORM_ACTION_LOGIN_PRINT_CHECKED" \
  -o -n "$FORM_ACTION_LOGIN_PRINT_RANGE" \
  -o -n "$FORM_ACTION_LOGIN_PRINT_RANGE_MARKER" \
  -o -n "$FORM_ACTION_LOGIN_PRINT_CHECKED_MARKER" \
  -o -n "$FORM_ACTION_LOGIN_PRINT_RANGE_MARKER_DIGEST" \
  -o -n "$FORM_ACTION_LOGIN_PRINT_CHECKED_MARKER_DIGEST" \
  -o -n "$FORM_ACTION_LOGIN_SENDMAIL_RANGE" \
  -o -n "$FORM_ACTION_LOGIN_SENDMAIL_CHECKED" ] && {

	FORM_ACTION="login_show"

	_log do gui_print_tickets daemon info "[init]"

	[ -n "$FORM_CB" ] && {
		LIST_FORM_CHECKBOX="$( _http query_string_group2list FORM_CB_ )"
	}

	[ -z "$LIST_FORM_CHECKBOX" ] && {
		LIST_FORM_CHECKBOX="$( _db user login list $FORM_RANGE_METHOD $FORM_RANGE_KEYWORD )"
	}

	N=0; for I in $LIST_FORM_CHECKBOX; do N=$(( $N + 1 )); done 		# count tickets
	for LOGIN_ID in $LIST_FORM_CHECKBOX; do break; done			# fetch first ticket
	eval $( _db user login show $LOGIN_ID "PROFILE_ID" )			# used_profile_id
	eval $( _db user profile show $PROFILE_ID "NAME" )

	output_mimetype ()
	{
		_log do gui_print_tickets daemon info "filename: '$FILENAME' list: '$LIST_FORM_CHECKBOX'"
		_http header_mimetype_output "$1" "$FILENAME"
	}

	if   [ -n "$FORM_ACTION_LOGIN_PRINT_CHECKED" -o -n "$FORM_ACTION_LOGIN_PRINT_RANGE" ]; then

		FILENAME="$( _pdf filename overview "$N" "$NAME" )"
		output_mimetype "application/pdf"

		_pdf output a4digest "$LIST_FORM_CHECKBOX"		# uebersicht

	elif [ -n "$FORM_ACTION_LOGIN_PRINT_RANGE_MARKER" -o -n "$FORM_ACTION_LOGIN_PRINT_CHECKED_MARKER" ]; then
		FILENAME="$( _pdf filename labels "$N" "$NAME" )"
		output_mimetype "application/pdf"

		_pdf output a4marker "$LIST_FORM_CHECKBOX"		# labels/etiketten

	elif [ -n "$FORM_ACTION_LOGIN_SENDMAIL_RANGE" -o -n "$FORM_ACTION_LOGIN_SENDMAIL_CHECKED" ]; then

		echo >>$SCHEDULER "_db autocreate_tickets_and_send_mail \"$( _sanitizer do "$LIST_FORM_CHECKBOX" newlines2spaces )\" existing_tickets"

	else								# labels/etiketten-uebersicht
		FILENAME="$( _pdf filename labels_overview "$N" "$NAME" )"
		output_mimetype "application/pdf"

		_pdf output a4marker_digest "$LIST_FORM_CHECKBOX"
	fi

	_log do gui_print_tickets daemon info "[done]"

	[ -n "$FORM_ACTION_LOGIN_SENDMAIL_RANGE" -o -n "$FORM_ACTION_LOGIN_SENDMAIL_CHECKED" ] || exit
}

case "$FORM_ACTION" in
	profile_del)
		_db user profile del "$FORM_ID"
		FORM_ACTION=
		echo >>$SCHEDULER '_db user login index_gen'
	;;
	login_del)
		_db user login del "$FORM_ID"
		FORM_ACTION=login_show
		echo >>$SCHEDULER '_db user login index_gen'
	;;
	send_bunch_of_tickets)
		_log do userdb daemon alert "send_bunch_of_tickets for ID $PROFILE_ID from IP $REMOTE_ADDR"

		# see watch_db_ticketrequest()
		touch "/www/ticketcheck-requested_${PROFILE_ID}"

		rm "$DIR_DATABASE/USER/profile/id${PROFILE_ID}_counterA" 2>/dev/null
		echo >>$SCHEDULER_IMPORTANT "_db ticketcheck; rm /www/ticketcheck-requested_${PROFILE_ID}"
		GLOBAL_BOTTOM_TEXT="$( _translate do "$LANG" tickets_will_be_delivered_soon ) [$( _db list_mail_recipients )]"
	;;
esac

case "$FORM_ACTION" in
	login_search)
		FORM_RANGE_METHOD="search"
		FORM_ACTION="login_show"
	;;
esac


_http header_mimetype_output "text/html"
_translate include

cat <<EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	"http://www.w3.org/TR/html4/loose.dtd">
<html><head><title>$( _translate do "$LANG" wifi_system ): $( _translate do "$LANG" rights_management ) - $HOSTNAME</title>
<META HTTP-EQUIV="content-type" CONTENT="text/html; charset=ISO-8859-15">
<META HTTP-EQUIV='cache-control' CONTENT='no-cache'></head><body bgcolor='white'>
<h1>$( _weblogin metadata_locationname )</h1>
EOF

grep -qs ^"$HTTP_USER_AGENT"$ "/tmp/AUTH_USERDB_${REMOTE_ADDR}" || {
	CONFIG="$( uci -q get uhttpd.main.config )"

	login_ok()
	{
		grep -sq ^"/cgi-bin/:$FORM_AUTH_USER:$FORM_AUTH_PASS"$ "$CONFIG" && return 0
		# special, means: "like root-pw"
		grep -sq ^'/cgi-bin/:root:$p$root'$ "$CONFIG"
	}

	if   login_ok; then
		# FIXME!
		_system add_ramdisc "$DIR_DATABASE" compressable

		_log do userdb_gui daemon info "[OK] auth for IP '$REMOTE_ADDR' with user-agent '$HTTP_USER_AGENT'"
		echo "$HTTP_USER_AGENT" >"/tmp/AUTH_USERDB_${REMOTE_ADDR}"
	else
		[ -e "$CONFIG" ] || {
			_log do userdb_gui daemon info "config '$CONFIG' n/a"
		}

		if [ -z "$FORM_AUTH_USER" -o -z "$FORM_AUTH_PASS" ]; then
			_log do userdb_gui daemon info "[ERR] missing auth for IP '$REMOTE_ADDR' with user-agent '$HTTP_USER_AGENT'"
		else
			_log do userdb_gui daemon alert "[ERR] wrong auth for IP '$REMOTE_ADDR' with user-agent '$HTTP_USER_AGENT' and USER: '$FORM_AUTH_USER' PASS: '$FORM_AUTH_PASS'"
		fi

		cat <<EOF
<form name='login' action=''>
<br>Username<br><input type='text' name='FORM_AUTH_USER'>
<br>Password<br><input type='password' name='FORM_AUTH_PASS'>
<br><input type='submit' name='submit' value='Login'>
</form></body></html>
EOF
		exit 0
	fi
}


profile_selector()
{
	local option="$1"
	local ID NAME COMMENT

	echo "<select name='FORM_PROFILE_ID' size='1'>"
	[ "$option" = 'allow_unspecific' ] && {
		FORM_PROFILE_ID=
		echo "<option value='' selected>$( _translate do "$LANG" for_all_profiles )</option>"
	}

	for ID in $( _db user profile list ); do {
		eval "$( _db user profile show "$ID" "NAME COMMENT" )"
		echo "<option value='$ID'"
		[ "$FORM_PROFILE_ID" = "$ID" ] && echo -n " selected"
		echo ">${NAME}: ${COMMENT}</option>"
	} done

	echo "</select>"
}

theme_selector()
{
	local THEME NAME COMMENT

	[ -z "$FORM_THEME_NAME" ] && {
		FORM_THEME_NAME="$( uci get system.@weblogin[0].namespace )"
	}
	echo "<select name='FORM_THEME_NAME' size='1'>"

	for THEME in $( _random_username themes ); do {
		echo "<option value='$THEME'"
		[ "$FORM_THEME_NAME" = "$THEME" ] && echo -n " selected"	# fixme! select "uniform_name", if THEME is special
		echo ">$( _random_username themeinfo "$THEME" )</option>"
	} done

	echo "</select>"
}


case "$FORM_ACTION" in
	profile_add|profile_update)
		echo "<h3> $( _translate do "$LANG" rights_management ) $ARROW <a href='?FORM_ACTION='>$( _translate do "$LANG" main_menu )</a> $ARROW $( _translate do "$LANG" profile_edit ) </h3>"

		SUBMIT_BUTTON_TEXT="$( _translate do "$LANG" profile_apply )"

		case "$FORM_ACTION" in
			reboot)
				echo "<h3> Device is rebooting now ... wait 120 seconds </h3>"
			;;
			profile_update)

				[ -n "$FORM_NAME" ] && {

					case "$FORM_MAX_TIME_UNIT" in		# default/internal: 'minutes'
						 hours)	FORM_MAX_TIME="$(( $FORM_MAX_TIME * 60 ))" ;;
						  days)	FORM_MAX_TIME="$(( $FORM_MAX_TIME * 1440 ))" ;;
						months) FORM_MAX_TIME="$(( $FORM_MAX_TIME * 43200 ))" ;;
					esac

					case "$FORM_MAX_TRAFFIC_UNIT" in	# default/internal: 'kilobytes'
						mb) FORM_MAX_TRAFFIC="$(( $FORM_MAX_TRAFFIC * 1024 ))" ;;
						gb) FORM_MAX_TRAFFIC="$(( $FORM_MAX_TRAFFIC * 1024 * 1024 ))" ;;
					esac

					local METADATA_UPLINK_UPSTREAM=32768	# kbit/sec
					local METADATA_UPLINK_DOWNSTREAM=2048

					case "$FORM_MAX_SPEED_DOWN_UNIT" in	# default/internal: 'kilobytes'
						kbit)
							FORM_MAX_SPEED_DOWN="$(( $FORM_MAX_SPEED_DOWN / 8 ))"
						;;
						mbit)
							FORM_MAX_SPEED_DOWN="$(( $FORM_MAX_SPEED_DOWN * 1024 / 8 ))"
						;;
						mb)
							FORM_MAX_SPEED_DOWN="$(( $FORM_MAX_SPEED_DOWN * 1024 ))"
						;;
						percent)
							FORM_MAX_SPEED_DOWN="$(( $METADATA_UPLINK_DOWNSTREAM * $FORM_MAX_SPEED_DOWN / 100 ))"
						;;
					esac

					case "$FORM_MAX_SPEED_UP_UNIT" in	# default/internal: 'kilobytes'
						kbit)
							FORM_MAX_SPEED_UP="$(( $FORM_MAX_SPEED_UP / 8 ))"
						;;
						mbit)
							FORM_MAX_SPEED_UP="$(( $FORM_MAX_SPEED_UP * 1024 / 8 ))"
						;;
						mb)
							FORM_MAX_SPEED_UP="$(( $FORM_MAX_SPEED_UP * 1024 ))"
						;;
						percent)
							FORM_MAX_SPEED_UP="$(( $METADATA_UPLINK_UPSTREAM * $FORM_MAX_SPEED_UP / 100 ))"
						;;
					esac

					_db user profile update "$FORM_ID" "$FORM_NAME" "$FORM_COMMENT" "$FORM_AUTOGENERATE" "$FORM_TIME_MODEL" "$FORM_MAX_TIME" "$FORM_MAX_TRAFFIC" "$FORM_MAX_SPEED_UP" "$FORM_MAX_SPEED_DOWN" "$FORM_LANDING_URL" "$FORM_COST" "$FORM_CURRENCY"
				}

				SUBMIT_BUTTON_TEXT="$( _translate do "$LANG" profile_update )"
			;;
			profile_add)
				for FORM_ID in $( _db user profile list ); do :; done		# fetch last ID
				eval $( _db user profile show $FORM_ID "LANDING_URL" )		# take URL from last profile, userfriendly
				LANDING_URL_FROM_LAST_PROFILE=$LANDING_URL

				_db user profile add "$( _translate do "$LANG" eg_1dayticket )"	# create new and...
				for FORM_ID in $( _db user profile list ); do :; done		# fetch last ID
			;;
		esac

		eval $( _db user profile show $FORM_ID )

		[ -n "$LANDING_URL_FROM_LAST_PROFILE" ] && LANDING_URL="$LANDING_URL_FROM_LAST_PROFILE"

		form_currency()		# coded in ISO-4217
		{
			local currency htmlname list

			case "$CONFIG_PROFILE" in
				preskil*) list="EUR USD VND MUR" ;;
				*) list="USD VND MUR EUR" ;;
			esac

			for currency in $list; do {

				case "$currency" in
					EUR) htmlname="Euro" ;;
					USD) htmlname="US-Dollar" ;;
					VND) htmlname="&#272;&#7891;ng" ;;
					MUR) htmlname="Rupie" ;;
				esac

				echo -n "<option value='$currency_from_list' $( test "$CURRENCY" = "$currency_from_list" && echo "selected" )>$currency - $htmlname</option>"
			} done
		}

		echo "<form action='' method='get'>"
		echo "<input type='hidden' name='FORM_ACTION' value='profile_update'>"
		echo "<input name='FORM_ID' type='hidden' value='$ID'>"
		echo "<table cellspacing='1' cellpadding='1' border='0'>"
		echo "<tr bgcolor='$BG_0'><td><b>$( _translate do "$LANG" parameter )</b></td><td><b>$( _translate do "$LANG" value )</b></td><td><b>$( _translate do "$LANG" explanation )</b></td></tr>"
		echo "<tr bgcolor='$BG_B'><td>$( _translate do "$LANG" name )</td><td><input name='FORM_NAME' type='text' size='32' value='$NAME'></td><td>$( _translate do "$LANG" desc_shortname )</td></tr>"
		echo "<tr bgcolor='$BG_A'><td>$( _translate do "$LANG" comment )</td><td><input name='FORM_COMMENT' type='text' size='32' value='$COMMENT'></td><td>$( _translate do "$LANG" desc_comment )</td></tr>"
		echo "<tr bgcolor='$BG_B'><td>$( _translate do "$LANG" autocreate )</td><td><input name='FORM_AUTOGENERATE' type='radio' value='1' $( test "$AUTOGENERATE" = "1" && echo checked )>$( _translate do "$LANG" yes )<br><input name='FORM_AUTOGENERATE' type='radio' value='0' $( test "${AUTOGENERATE:-0}" = "0" && echo checked )>$( _translate do "$LANG" no )</td><td>$( _translate do "$LANG" desc_autogenerate )</td></tr>"
		echo "<tr bgcolor='$BG_A'><td>$( _translate do "$LANG" accounting_model )</td><td><input name='FORM_TIME_MODEL' type='radio' value='1' $( test "$TIME_MODEL" = "1" && echo checked )>$( _translate do "$LANG" passed_time )<br><input name='FORM_TIME_MODEL' type='radio' value='0' $( test "${TIME_MODEL:-0}" = "0" && echo checked )>$( _translate do "$LANG" used_time )</td><td>$( _translate do "$LANG" desc_timemodel )</td></tr>"
		echo "<tr bgcolor='$BG_B'><td>$( _translate do "$LANG" validity_period )</td><td nowrap><input name='FORM_MAX_TIME' type='text' size='10' value='$MAX_TIME'><select size='1' name='FORM_MAX_TIME_UNIT'><option value='minutes' selected>$( _translate do "$LANG" minutes )</option><option value='hours'>$( _translate do "$LANG" hours )</option><option value='days'>$( _translate do "$LANG" days )</option><option value='months'>$( _translate do "$LANG" months )</option></select></td><td>$( _translate do "$LANG" desc_validity_period )</td></tr>"
		echo "<tr bgcolor='$BG_A'><td>$( _translate do "$LANG" max_data_volume )</td><td nowrap><input name='FORM_MAX_TRAFFIC' type='text' size='10' value='$MAX_TRAFFIC'><select size='1' name='FORM_MAX_TRAFFIC_UNIT'><option value='kb' selected>$( _translate do "$LANG" kilobytes )</option><option value='mb'>$( _translate do "$LANG" megabytes )</option><option value='gb'>$( _translate do "$LANG" gigabytes )</option></select></td><td>$( _translate do "$LANG" desc_max_data_volume )</td></td></tr>"
		echo "<tr bgcolor='$BG_B'><td>$( _translate do "$LANG" max_upload_speed )</td><td nowrap><input name='FORM_MAX_SPEED_UP' type='text' size='10' value='$MAX_SPEED_UP'><select size='1' name='FORM_MAX_SPEED_UP_UNIT'><option value='kb' selected>$( _translate do "$LANG" kilobytes )/s</option><option value='kbit'>$( _translate do "$LANG" kilobits )/s</option><option value='mb'>$( _translate do "$LANG" megabytes )/s</option><option value='mbit'>$( _translate do "$LANG" megabits )/s</option><option value='percent'>$( _translate do "$LANG" percent_uplink )</option></select></td><td>$( _translate do "$LANG" desc_max_upload_speed )</td></td></tr>"
		echo "<tr bgcolor='$BG_A'><td>$( _translate do "$LANG" max_download_speed )</td><td nowrap><input name='FORM_MAX_SPEED_DOWN' type='text' size='10' value='$MAX_SPEED_DOWN'><select size='1' name='FORM_MAX_SPEED_DOWN_UNIT'><option value='kb' selected>$( _translate do "$LANG" kilobytes )/s</option><option value='kbit'>$( _translate do "$LANG" kilobits )/s</option><option value='mb'>$( _translate do "$LANG" megabytes )/s</option><option value='mbit'>$( _translate do "$LANG" megabits )/s</option><option value='percent'>$( _translate do "$LANG" percent_uplink )</option></select></td><td>$( _translate do "$LANG" desc_max_download_speed )</td></tr>"

		echo "<tr bgcolor='$BG_B'><td>$( _translate do "$LANG" youth_protection )</td><td nowrap><input name='FORM_PROXY1' type='checkbox'>&nbsp;$( _translate do "$LANG" active )</td><td>$( _translate do "$LANG" desc_youth_protection )</td></td></tr>"
		echo "<tr bgcolor='$BG_A'><td>$( _translate do "$LANG" adblocker )</td><td nowrap><input name='FORM_PROXY2' type='checkbox'>&nbsp;$( _translate do "$LANG" active )</td><td>$( _translate do "$LANG" desc_adblock )</td></tr>"

		echo "<tr bgcolor='$BG_B'><td>$( _translate do "$LANG" url_landingpage )</td><td><input name='FORM_LANDING_URL' type='text' size='32' value='$LANDING_URL'></td><td>$( _translate do "$LANG" desc_landing_page )</td></tr>"
		echo "<tr bgcolor='$BG_A'><td>$( _translate do "$LANG" selling_price )</td><td nowrap><input name='FORM_COST' type='text' size='10' value='$COST'><select size='1' name='FORM_CURRENCY'>$( form_currency )</select></td><td>$( _translate do "$LANG" desc_price )</td></tr>"
		echo "<tr bgcolor='$BG_0'><td colspan='2' align='center' valign='middle'><p><input type='submit' name='' value='$SUBMIT_BUTTON_TEXT'></p></td><td>&nbsp;</td></tr>"
		echo "</table></form>"

		[ "$FORM_ACTION" = "profile_update" -a -n "$FORM_AUTOGENERATE" ] && {
			echo "<p><i>$( _translate do "$LANG" hint ):</i>&nbsp;$( _translate do "$LANG" profile_was_safed )</p>"
		}

		echo "</html>"
	;;
	login_add|login_update)
		echo "<h3> $( _translate do "$LANG" rights_management ) $ARROW <a href='?FORM_ACTION='>$( _translate do "$LANG" main_menu )</a> $ARROW $( _translate do "$LANG" login_edit )</h3>"

		SUBMIT_BUTTON_TEXT="$( _translate do "$LANG" login_create )"

		case "$FORM_ACTION" in
			login_add)
				_db user login add							# create new and...
				for FORM_ID in $( _db user login list ); do :; done			# fetch last ID
			;;
			login_update)

				SUBMIT_BUTTON_TEXT="$( _translate do "$LANG" login_update )"		# fixme! honour FORM_THEME_NAME? see beginning for a hack

				helper_update ()
				{
					_db user login update "$FORM_ID" "$FORM_PROFILE_ID" "$FORM_COMMENT" "$FORM_USERNAME" "$FORM_PASSWORD" "$FORM_DEVICE_QUANTITY" "$FORM_INSTALLED" "$FORM_FUZZY"
				}

				case "${FORM_DUPLICATE_NO:-1}" in
					1)
						helper_update
						_db user login index_gen last 1
						echo >>$SCHEDULER '_db backup login_update_index_gen_last1'
					;;
					*)
						FORM_USERNAME=		# does not make sense to have many tickets
						FORM_PASSWORD=		# with same values, this enforces random()

						helper_update
						while [ $FORM_DUPLICATE_NO -ne 1 ]; do {			# not 0 because one ticket is created yet at this point

							FORM_DUPLICATE_NO="$(( $FORM_DUPLICATE_NO - 1 ))"

							_db user login add
							for FORM_ID in $( _db user login list ); do :; done	# fetch last ID
							helper_update
						} done

						echo >>$SCHEDULER '_db user login index_gen'
					;;
				esac
			;;
		esac

		eval $( _db user login show $FORM_ID )

		echo "<form action='' method='get'>"
		echo "<input type='hidden' name='FORM_ACTION' value='login_update'>"
		echo "<input name='FORM_ID' type='hidden' value='$ID'>"
		echo "<input name='FORM_INSTALLED' type='hidden' value='$( _system date unixtime )'>"

		is_macaddress()
		{
			local hex="a-fA-F0-9"
			local fs=":-"

			case "$1" in
				[$hex][$hex][$fs][$hex][$hex][$fs][$hex][$hex][$fs][$hex][$hex][$fs][$hex][$hex][$fs][$hex][$hex]) return 0 ;;
				*) return 1 ;;
			esac
		}

		case "$FORM_ACTION" in
			login_add)
				DEVICE_QUANTITY=1	# better this is default than empty=unlimited
			;;
			*)
				echo "<input name='FORM_DUPLICATE_NO' type='hidden' value='1'>"
			;;
		esac

		echo "<table cellspacing='1' cellpadding='1' border='0'>"
		echo "<tr bgcolor='$BG_0'><td>$( _translate do "$LANG" parameter )</td><td>$( _translate do "$LANG" value )</td><td>$( _translate do "$LANG" explanation )</td></tr>"

		echo "<tr bgcolor='$BG_A'><td>$( _translate do "$LANG" profile )</td><td>"
		profile_selector
		echo "</td><td>$( _translate do "$LANG" desc_profiletype )</td></tr>"

		echo "<tr bgcolor='$BG_B'><td>$( _translate do "$LANG" comment )</td><td><input name='FORM_COMMENT' type='text' value='$COMMENT'></td><td>$( _translate do "$LANG" desc_usercomment )</td></tr>"

		[ "$FORM_ACTION" = "login_add" ] && {
			echo "<tr bgcolor='$BG_0'><td colspan='3'><input type='radio' ID='usernamepassword' name='FORM_AUTHMODE' value='usernamepassword' $( is_macaddress $FORM_USERNAME || echo checked )><label for='usernamepassword'>&nbsp;$( _translate do "$LANG" hint_auth_credentials )</label></tr>"
		}

		if is_macaddress $USERNAME ; then
			echo "<tr bgcolor='$BG_A'><td>$( _translate do "$LANG" macaddress )</td><td><input name='FORM_USERNAME' type='text' value='$USERNAME'></td><td>$( _translate do "$LANG" desc_macaddress )</td></tr>"
			echo "<tr bgcolor='$BG_B'><td>$( _translate do "$LANG" hostnames )</td><td><input name='FORM_PASSWORD' type='text' value='$PASSWORD'></td><td>$( _translate do "$LANG" desc_hostnames )</td></tr>"
			echo "<input name='FORM_DEVICE_QUANTITY' type='hidden' value='1'>"
		else
			echo "<tr bgcolor='$BG_A'><td><label for='usernamepassword'>$( _translate do "$LANG" username )</label></td><td><input name='FORM_USERNAME' type='text' value='$USERNAME'></td><td>$( _translate do "$LANG" desc_username ): $( theme_selector )</td></tr>"
			echo "<tr bgcolor='$BG_B'><td><label for='usernamepassword'>$( _translate do "$LANG" password )</label></td><td><input name='FORM_PASSWORD' type='text' value='$PASSWORD'></td><td>$( _translate do "$LANG" desc_password )</td></tr>"
			echo "<tr bgcolor='$BG_A'><td><label for='usernamepassword'>$( _translate do "$LANG" fuzziness )</label></td><td><input name='FORM_FUZZY' type='radio' value='' ${FUZZY:-checked}>$( _translate do "$LANG" no )<br><input name='FORM_FUZZY' type='radio' value='1' $( test -n "$FUZZY" && echo checked )>$( _translate do "$LANG" yes )</td><td>$( _translate do "$LANG" desc_fuzzy )</td></tr>"
			echo "<tr bgcolor='$BG_B'><td><label for='usernamepassword'>$( _translate do "$LANG" devices_number )</label></td><td><input name='FORM_DEVICE_QUANTITY' type='text' value='${DEVICE_QUANTITY}'></td><td>$( _translate do "$LANG" desc_devices_number )</td></tr>"
		fi

		[ "$FORM_ACTION" = "login_add" ] && {
			echo "<tr bgcolor='$BG_A'><td><label for='usernamepassword'>$( _translate do "$LANG" ticket_carboncopy )</label></td><td><select name='FORM_DUPLICATE_NO' size='1'><option value='1'>$( _translate do "$LANG" none )</option><option value='3'>3</option><option value='5'>5</option><option value='10'>10&thinsp;&bull;&thinsp;85&times;54mm</option><option value='15'>15</option><option value='32'>32&thinsp;&bull;&thinsp;35.6&times;16.9mm</option></select></td><td>$( _translate do "$LANG" desc_ticket_carboncopy )</td></tr>"
			echo "<tr bgcolor='$BG_0'><td colspan='3'><input type='radio' ID='macaddresshostnames' name='FORM_AUTHMODE' value='macaddresshostnames' $( is_macaddress $FORM_USERNAME && echo checked )><label for='macaddresshostnames'>&nbsp;$( _translate do "$LANG" hint_auth_via_mac )</label></tr>"
			echo "<tr bgcolor='$BG_B'><td><label for='macaddresshostnames'>$( _translate do "$LANG" macaddress )</label></td><td><input name='FORM_USERNAME_MACADDRESS' type='text' value='$( is_macaddress $USERNAME && echo $USERNAME )'></td><td>$( _translate do "$LANG" desc_macaddress )</td></tr>"
			echo "<tr bgcolor='$BG_A'><td><label for='macaddresshostnames'>$( _translate do "$LANG" hostnames )</label></td><td><input name='FORM_PASSWORD_HOSTNAMES' type='text' value='$( is_macaddress $USERNAME && echo $PASSWORD )'></td><td>$( _translate do "$LANG" desc_hostnames )</td></tr>"
		}

		echo "<tr bgcolor='$BG_0'><td colspan='2' align='center' valign='middle'><p><input type='submit' name='' value='$SUBMIT_BUTTON_TEXT'></p></td><td>&nbsp;</td></tr>"
		echo "</table></form>"

		[ "$FORM_ACTION" = "login_update" ] && {
			echo "<p><i>$( _translate do "$LANG" hint ):</i>&nbsp;$( _translate do "$LANG" logindata_was_safed )</p>"
		}

		echo "</html>"
	;;
	login_show)
		echo "<h3>$( _translate do "$LANG" rights_management ) $ARROW <a href='?FORM_ACTION='>$( _translate do "$LANG" main_menu )</a> $ARROW <a href='?FORM_ACTION=login_show'>$( _translate do "$LANG" login_overview )</a></h3>"

		range_selector()
		{
			set -- $FORM_RANGE_KEYWORD
			local start="$1"
			local end="$2"

			local last_db_entry="$( _db user login list last )"
			local one_page="32"
			local small_step="5"

			[ -z "$end" ] && {		# last 5 -> start = count -5 end=last

				start="$(( $last_db_entry - $start ))"
				end="$last_db_entry"
			}

			range_sanitizer()		# fixme! we should respect the number of last correct listed lines
			{
				local begin="$1"
				local end="$2"
				local diff

				if   [ $begin -lt 1 ]; then
					diff="$(( 1 - $begin ))"
					begin="1"
					end="$(( $end + $diff ))"
				elif [ $end -gt $last_db_entry ]; then
					diff="$(( $end - $last_db_entry ))"
					end="$last_db_entry"
					begin="$(( $end - $diff ))"
				fi

				echo "$begin $end"
			}

			local html_plus="&#43;"		# +
			local html_minus="&minus;"	# -

			echo -n "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
			echo -n "<input type='hidden' name='FORM_RANGE_METHOD_VALUE1'  value='$( range_sanitizer "$(( $start - $one_page ))" "$(( $end - $one_page ))" )'>"
			echo -n "<input type='submit' name='FORM_ACTION_LOGIN_SHOW_RANGE_METHOD1' value='&lt;&lt;&nbsp;${html_minus}$one_page'>"
			echo -n "&nbsp;"
			echo -n "<input type='hidden' name='FORM_RANGE_METHOD_VALUE2'  value='$( range_sanitizer "$(( $start - $small_step ))" "$(( $end - $small_step ))" )'>"
			echo -n "<input type='submit' name='FORM_ACTION_LOGIN_SHOW_RANGE_METHOD2' value='&lt;&nbsp;${html_minus}$small_step'>"
			echo -n "&nbsp;$( _translate do "$LANG" browse )&nbsp;"
			echo -n "<input type='hidden' name='FORM_RANGE_METHOD_VALUE3'  value='$( range_sanitizer "$(( $start + $small_step ))" "$(( $end + $small_step ))" )'>"
			echo -n "<input type='submit' name='FORM_ACTION_LOGIN_SHOW_RANGE_METHOD3' value='${html_plus}${small_step}&nbsp;&gt;'>"
			echo -n "&nbsp;"
			echo -n "<input type='hidden' name='FORM_RANGE_METHOD_VALUE4'  value='$( range_sanitizer "$(( $start + $one_page ))" "$(( $end + $one_page ))" )'>"
			echo -n "<input type='submit' name='FORM_ACTION_LOGIN_SHOW_RANGE_METHOD4' value='${html_plus}${one_page}&nbsp;&gt;&gt;'>"
		}

		echo "<form action='' method='get'>"

		# fixme! erstellungszeit menschenlesbar, "vor 5 minuten"?
		# fixme! wie leichtes auswaehlen einer gruppe? (32 auswaehlen?)

		case "$FORM_RANGE_METHOD" in
			last|range)
				echo "<input type='hidden' name='FORM_RANGE_METHOD'  value='$FORM_RANGE_METHOD'>"
				echo "<input type='hidden' name='FORM_RANGE_KEYWORD' value='$FORM_RANGE_KEYWORD'>"

				case "$FORM_RANGE_KEYWORD" in
					*" "*)
						set -- $FORM_RANGE_KEYWORD
						echo "<p><i>$( _translate do "$LANG" hint ):</i> $( _translate do "$LANG" only_login_x2y_will_be_shown1 ) $1 $( _translate do "$LANG" till ) $2 $( _translate do "$LANG" only_login_x2y_will_be_shown2 )"
					;;
					*)
						echo "<p><i>$( _translate do "$LANG" hint ):</i> $( _translate do "$LANG" only_last_x_login_will_be_shown1 ) $FORM_RANGE_KEYWORD $( _translate do "$LANG" only_last_x_login_will_be_shown2 )"
					;;
				esac

				range_selector
				echo "</p>"

				LIST_ID="$( _db user login list $FORM_RANGE_METHOD $FORM_RANGE_KEYWORD )"
			;;
			search)
				LIST_ID="$( _db user login query string2id_list "${FORM_SEARCH_PATTERN:-unset}" )"
			;;
			*)
				LIST_ID="$( _db user login list )"
			;;
		esac

		echo "<table cellspacing='1' cellpadding='1' border='0'>"
		echo "<input type='hidden' name='SESSION_TIMESTAMP' value='$( _system date unixtime )'>"	# prevents cached PDF-download
		echo "<tr bgcolor='$BG_0'><td><small>$( _translate do "$LANG" choice )</small><input type='hidden' name='FORM_CB' value='0'></td><td>&nbsp;$( _translate do "$LANG" profile )&nbsp;</td><td>&nbsp;$( _translate do "$LANG" comment )&nbsp;</td><td>&nbsp;$( _translate do "$LANG" username )&nbsp;</td><td>&nbsp;$( _translate do "$LANG" password )&nbsp;</td><td><small>$( _translate do "$LANG" fuzziness )</small></td><td>&nbsp;$( _translate do "$LANG" device_count )&nbsp;</td><td>&nbsp;$( _translate do "$LANG" creation_time )&nbsp;</td><td>&nbsp;$( _translate do "$LANG" action )&nbsp;</td></tr>"

		local MY_ID PASSWORD_FORMATTED
		local translation_edit="$( _translate do "$LANG" edit )"
		local translation_delete="$( _translate do "$LANG" delete )"

		for MY_ID in $LIST_ID; do {
			PROFILE_ID=
			eval "$( _db user login show "$MY_ID" )"

			if [ -z "$PROFILE_ID" ]; then
				# how can this happen?
				continue
			else
				# when searching in a specific profile, ignore other profiles
				[ "$FORM_RANGE_METHOD" = 'search' ] && {
					[ "$FORM_PROFILE_ID" = "$PROFILE_ID" ] || continue
				}

				eval "$( _db user profile show "$PROFILE_ID" "NAME" )"
			fi

			case "$BGCOLOR" in
				"$BG_A") BGCOLOR="$BG_B" ;;
				      *) BGCOLOR="$BG_A" ;;
			esac

			case "$FUZZY" in
				'') FUZZY_SYMBOL="&minus;" ;;
				 *) FUZZY_SYMBOL="&#x2714;" ;;		# was: &radic;
			esac

			case "$PASSWORD" in	# is a list of space-separated hostnames
				*" "*) PASSWORD_FORMATTED="$( echo $PASSWORD | sed 's/ /<br>\&nbsp;/g' )" ;;
				    *) PASSWORD_FORMATTED="$PASSWORD" ;;
			esac

			cat <<EOF
<tr bgcolor='$BGCOLOR'>
<td align='center'><input type='checkbox' ID='login${MY_ID}' name='FORM_CB_${MY_ID}' value='1'></td>
<td><label for='login${MY_ID}'>&nbsp;${NAME}</label></td>
<td><label for='login${MY_ID}'>&nbsp;${COMMENT:--}</label></td>
<td><label for='login${MY_ID}'>&nbsp;$USERNAME</label></td>
<td align='left'><label for='login${MY_ID}'>&nbsp;${PASSWORD_FORMATTED}</label></td>
<td align='center'><label for='login${MY_ID}'>&nbsp;${FUZZY_SYMBOL}</label></td>
<td align='center'><label for='login${MY_ID}'>${DEVICE_QUANTITY:-unbegrenzt}</label></td>
<td nowrap><label for='login${MY_ID}'>$( _system date unixtime2date $INSTALLED )</label></td>
<td>&nbsp;<a href='?FORM_ACTION=login_del${AMP}FORM_ID=${MY_ID}'>${translation_delete}</a>&nbsp;|&nbsp;<a 
href='?FORM_ACTION=login_update${AMP}FORM_ID=${MY_ID}${AMP}FORM_PROFILE_ID=$PROFILE_ID${AMP}FORM_COMMENT=$COMMENT${AMP}FORM_USERNAME=$USERNAME${AMP}FORM_PASSWORD=$PASSWORD${AMP}FORM_FUZZY=$FUZZY${AMP}FORM_DEVICE_QUANTITY=$DEVICE_QUANTITY${AMP}FORM_INSTALLED=$INSTALLED'>${translation_edit}</a></td>
</tr>
EOF

		} done

		[ -z "$LIST_ID" ] && {
			echo "<tr><td colspan='9' bgcolor='$BGCOLOR' align='middle'>keine Eintr&auml;ge gefunden</td></tr>"
		}

		echo -n "<tr bgcolor='$BG_0'><td colspan='9' nowrap align='right'>"
		echo -n "<p>&nbsp;$( _translate do "$LANG" selected_logins )&nbsp;"
		echo -n "<input type='submit' name='FORM_ACTION_LOGIN_DEL_CHECKED' value='$( _translate do "$LANG" delete )'>&nbsp;$( _translate do "$LANG" or )&nbsp;"
		echo -n "<input type='submit' name='FORM_ACTION_LOGIN_PRINT_CHECKED' value='$( _translate do "$LANG" overview ) (PDF)'>&nbsp;$( _translate do "$LANG" or )&nbsp;"
		echo -n "<input type='submit' name='FORM_ACTION_LOGIN_PRINT_CHECKED_MARKER' value='$( _translate do "$LANG" labels ) (PDF)'>&nbsp;$( _translate do "$LANG" or )&nbsp;"
		echo -n "<input type='submit' name='FORM_ACTION_LOGIN_PRINT_CHECKED_MARKER_DIGEST' value='$( _translate do "$LANG" labels_overview ) (PDF)'>&nbsp;$( _translate do "$LANG" or )&nbsp;"
		echo -n "<input type='submit' name='FORM_ACTION_LOGIN_SENDMAIL_CHECKED' value='$( _translate do "$LANG" mail_delivery )'>"
		echo -n "</p><p>&nbsp;$( _translate do "$LANG" all_shown_logins )&nbsp;"
		echo -n "<input type='submit' name='FORM_ACTION_LOGIN_DEL_RANGE' value='$( _translate do "$LANG" delete )'>&nbsp;$( _translate do "$LANG" or )&nbsp;"
		echo -n "<input type='submit' name='FORM_ACTION_LOGIN_PRINT_RANGE' value='$( _translate do "$LANG" overview ) (PDF)'>&nbsp;$( _translate do "$LANG" or )&nbsp;"
		echo -n "<input type='submit' name='FORM_ACTION_LOGIN_PRINT_RANGE_MARKER' value='$( _translate do "$LANG" labels ) (PDF)'>&nbsp;$( _translate do "$LANG" or )&nbsp;"
		echo -n "<input type='submit' name='FORM_ACTION_LOGIN_PRINT_RANGE_MARKER_DIGEST' value='$( _translate do "$LANG" labels_overview ) (PDF)'>&nbsp;$( _translate do "$LANG" or )&nbsp;"
		echo -n "<input type='submit' name='FORM_ACTION_LOGIN_SENDMAIL_RANGE' value='$( _translate do "$LANG" mail_delivery )'>"
		echo -n "</p></td>"
		echo -n "</tr></table></form>"

		[ -n "$FORM_ACTION_LOGIN_SENDMAIL_RANGE" -o -n "$FORM_ACTION_LOGIN_SENDMAIL_CHECKED" ] && {
			echo -n "<br><i>$( _translate do "$LANG" hint ):</i> $( _translate do "$LANG" tickets_will_be_delivered_soon )"
		}

		echo -n "</html>"
	;;
	*)
		cat <<EOF
<h3>$( _translate do "$LANG" rights_management ) $ARROW <a href='?FORM_ACTION='>$( _translate do "$LANG" main_menu )</a></h3>
<!-- <p> -->
<ul>
	<li>$( _translate do "$LANG" html_manage_profiles ):
	<ul>
		<li>$( _translate do "$LANG" new_profile ) <a href='?FORM_ACTION=profile_add'>$( _translate do "$LANG" create )</a></li>
EOF

		LIST_PROFILES="$( _db user profile list )"

		[ -n "$LIST_PROFILES" ] && {
			echo "<li>$( _translate do "$LANG" profile_edit ):<ul>"

			for ID in $LIST_PROFILES; do {
				eval "$( _db user profile show "$ID" "NAME COMMENT AUTOGENERATE" )"

				if [ "$AUTOGENERATE" = "1" ]; then
					AUTOGENERATE="($( _translate do "$LANG" autocreate ))"
					ESTIMATED_STOCK="$( _db count_unused_logins "$ID" fast )"
					# TODO: translate...
					FILLUP_STOCK="Ticketvorrat aufstocken (~ $ESTIMATED_STOCK verf&uuml;gbar)"
					FILLUP_LINK="<a href='?FORM_ACTION=send_bunch_of_tickets${AMP}PROFILE_ID=${ID}'>$FILLUP_STOCK</a>"
				else
					AUTOGENERATE=
					ESTIMATED_STOCK='?'
					FILLUP_STOCK="$( _translate do "$LANG" autocreate ) $( _translate do "$LANG" switched_off )"
					FILLUP_LINK="$FILLUP_STOCK"
				fi

				echo "<li><a href='?FORM_ACTION=profile_update${AMP}FORM_ID=${ID}'>$( _translate do "$LANG" edit )</a> | "
				echo "<a href='?FORM_ACTION=profile_del${AMP}FORM_ID=${ID}'>$( _translate do "$LANG" delete )</a> |"
				echo "$FILLUP_LINK&nbsp;-&nbsp;$NAME$( test -n "$COMMENT" && echo "&nbsp;('$COMMENT')" ) $AUTOGENERATE</li>"

				# fixme! only show 'del', if no deps (login|devices)
			} done

			echo "</ul></li>"
		}

		cat <<EOF
	</ul></li>
</ul>
<ul>
	<li>$( _translate do "$LANG" html_manage_logins ):
	<ul>
EOF
		if [ -n "$LIST_PROFILES" ]; then
			echo "<li>$( _translate do "$LANG" new_logins ) <a href='?FORM_ACTION=login_add'>$( _translate do "$LANG" create )</a></li>"
		else
			echo "<li>$( _translate do "$LANG" new_logins ) <s>$( _translate do "$LANG" create )</s> ($( _translate do "$LANG" make_profile_first ))</li>"
		fi

		LIST_LOGINS="$( _db user login list )"

		[ -n "$LIST_LOGINS" ] && {
			LIST_LOGINS_COUNT="$( _db user login list | wc -l )"
			LIST_LOGINS_COUNT="$(( $LIST_LOGINS_COUNT + 0 ))"

			echo "<li>Logins <a href='?FORM_ACTION=login_show${AMP}FORM_RANGE_METHOD=all'>$( _translate do "$LANG" show )&nbsp;($LIST_LOGINS_COUNT $( _translate do "$LANG" overall ))</a>"

			[ $LIST_LOGINS_COUNT -gt 10 ] && {
				echo "<ul>"			# fixme! missing <li>?
				echo "<li><a href='?FORM_ACTION=login_show${AMP}FORM_RANGE_METHOD=last${AMP}FORM_RANGE_KEYWORD=5'>$( _translate do "$LANG" the_newest ) 5</a>,&nbsp;"
				echo "<a href='?FORM_ACTION=login_show${AMP}FORM_RANGE_METHOD=last${AMP}FORM_RANGE_KEYWORD=10'>10</a>,&nbsp;"
				echo "<a href='?FORM_ACTION=login_show${AMP}FORM_RANGE_METHOD=last${AMP}FORM_RANGE_KEYWORD=15'>15</a>,&nbsp;"
				echo "<a href='?FORM_ACTION=login_show${AMP}FORM_RANGE_METHOD=last${AMP}FORM_RANGE_KEYWORD=32'>32</a>"
				echo "</li>"
				echo "<li>$( _translate do "$LANG" searchpattern ):&nbsp;"
				echo "<form action='' method='get'>"
				echo "<input type='hidden' name='FORM_ACTION' value='login_search'>"
				echo "<input name='FORM_SEARCH_PATTERN' type='text' size='16' value='$( _translate do "$LANG" eg_username )'>"
				profile_selector 'allow_unspecific'
				echo "<input type='submit' name='' value='$( _translate do "$LANG" find )'>"
				echo "</form>"
				echo "</li></ul>"
			}

			echo "</li>"
		}

		cat <<EOF
</ul></li>
<br><li>$( _translate do "$LANG" html_manage_devices ):
	<ul>
EOF
		LISTE_DEVICES="$( _db user device list )"

		if [ -n "$LIST_LOGINS" ]; then
			echo "<li>$( _translate do "$LANG" new_devices ) <a href='?FORM_ACTION=device_add'>$( _translate do "$LANG" create )</a></li>"
		else
			echo "<li>$( _translate do "$LANG" new_devices ) <s>$( _translate do "$LANG" create )</s> ($( _translate do "$LANG" make_login_first ))</li>"
		fi

		[ -n "$LISTE_DEVICES" ] && {
			echo "<li>$( _translate do "$LANG" show_devices )</li>"
		}

		cat <<EOF
	</ul></li></ul>
EOF
	;;
esac

[ -n "$GLOBAL_BOTTOM_TEXT" ] && {
	echo '<p style="background: lightgreen; color: black">'
	echo "&nbsp;&nbsp;&nbsp;&nbsp;<i>$( _translate do "$LANG" hint ):</i> ${GLOBAL_BOTTOM_TEXT}</p>"
}

echo "</body></html>"

case "$FORM_ACTION" in
	reboot)
		# wget -O - "http://root:$PASS@$IP/cgi-bin/userdb?FORM_ACTION=reboot"
		# while :;do case "$( _wget do "http://root:$PASS@$IP/cgi-bin/userdb?FORM_ACTION=reboot" )" in *'</html>'*) break;; esac; sleep 1;done
		_log do userdb_gui daemon alert "rebooted from IP: $REMOTE_ADDR"
		_system crashreboot 'manual'
        ;;
esac

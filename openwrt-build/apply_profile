#!/bin/sh /etc/rc.common
#
# needs in BASE="/openwrt/trunk/package/base-files/files/etc/init.d"
# $BASE/apply_profile
# $BASE/apply_profile.code
# $BASE/apply_profile.definitions
# $BASE/apply_profile.watch

START=98
EXTRA_COMMANDS='call'

boot()
{
	:
}

call()
{
	local thisfile='/etc/init.d/apply_profile'
	local max_try=30
	local stopfile='/tmp/STOP'
	local interval=60
	local i=0
	local led_loops=10
	local led_state i load rest daemon

	[ -e  '/tmp/lockfile_apply_profile' ] && return 0
	touch '/tmp/lockfile_apply_profile'

	touch '/tmp/lockfile_scheduler_is_running'	# this prevents the scheduler from running, see: _scheduler_allow_run()

	[ -e '/tmp/loader' ] && {			# router is not virgin (so: re-apply config)
		. /tmp/loader

		[ -n "$LOWMEM" ] && {
			_log do $thisfile daemon alert "[OK] ending most daemons"

			for daemon in crond ulogd uhttpd olsrd dnsmasq; do {
				_log do $thisfile daemon info "ending daemon '$daemon'"
				/etc/init.d/$daemon stop
				/etc/init.d/*${daemon}* stop
			} done

			case "$( pidof dropbear )" in
				*" "*)
				;;
				*)
					killall dropbear
					wifi down
				;;
			esac

			while true; do {
				read -r load rest </proc/loadavg
				case "$load" in
					0.0*|0.1*|0.2*|0.3*)		# wait till load goes down
						break
					;;
					*)
						_log do $thisfile daemon info "wait for load <0.4, now: '$load'"
						sleep 30
					;;
				esac
			} done
		}
	}

	telnet_is_used()
	{
		local pid cmdline

		for pid in $( pidof ash ); do {
			read -r cmdline <"/proc/$pid/cmdline"
			[ "$cmdline" = '/bin/ash--login' ] && break
		} done
	}

	while [ $max_try -gt 1 ]; do {
		logger -s "$thisfile [BOOT] start - $thisfile"
		"${thisfile}.code" boot && break

		logger -s "$thisfile [BOOT] executed $thisfile.code - but with errors, $max_try try's yet, waiting $interval secs"
		max_try=$(( max_try - 1 ))

		[ -e "/tmp/LOCKFILE_APPLY" ] || {
			pidof apply_profile.code >/dev/null || {	# interactive run/user invoked
				telnet_is_used || /etc/init.d/telnet restart
				/etc/init.d/dropbear restart
			}
		}

		sleep $interval
	} done

	logger -s "$thisfile [BOOT] ready - removing '$thisfile', autorebooting in $(( led_loops * 3 )) sec, avoid this by 'touch $stopfile'"
	rm "$thisfile"

	led_firework()
	{
		if [ -e '/etc/diag.sh' ]; then
			. '/etc/diag.sh'

			while [ $i -lt $led_loops ]; do {
				logger -s "$thisfile [BOOT] led_firework, loop $i/$led_loops"
				for led_state in preinit failsafe 'done'; do {
					set_state $led_state
					sleep 1
				} done
				i=$(( i + 1 ))
			} done
		else
			sleep $(( led_loops * 3 ))
		fi
	}

	led_firework

	[ -e "$stopfile" ] && return 0
	_system crashreboot 'apply_profile'

	# can be removed later when we are sure that loader is always useable:
	type '_system' | fgrep -q 'shell function' || reboot
}

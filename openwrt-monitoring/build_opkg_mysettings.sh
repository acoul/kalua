#!/bin/sh

NETWORK="$1"
VERSION="$2"
OPTION="$3"	# e.g. 'test' or <empty>

[ -z "$NETWORK" ] && {
	echo "Usage: $0 <network> <version> [test]"
	exit 1
}

TAB='	'
DIR_DATA_SOURCE="/var/www/networks/$NETWORK/settings"
VERSION="${VERSION:-0.1}"

WDIR="/tmp/${NETWORK}-${VERSION}"
mkdir -p "$WDIR"
cd "$WDIR" || exit

generate_script()
{
	cat <<EOF
#!/bin/sh
. /tmp/loader

[ \$HOSTNAME = 'test-marinabh' -a -z "\$( command -v dropbear )" ] && {
	wget -O /tmp/fw2 'http://intercity-vpn.de/networks/liszt28/firmware/models/TP-LINK%20TL-WR841N:ND%20v8/testing/Standard-4mb,kalua/TP-LINK%20TL-WR841N:ND%20v8.lede=r3900_kernel=4.4.56_rootfs=squash_image=sysupgrade_option=Standard-4mb,kalua@bc4aed8.bin' && {
		sysupgrade /tmp/fw2
		exit 0
	}
#	wget -O /tmp/tarball.tgz http://intercity-vpn.de/firmware/tarball.tgz
#	cd /; tar xvzf /tmp/tarball.tgz; rm /tmp/tarball.tgz; /etc/kalua_init apply_settings
}

apply_settings()
{
	[ -e '/sbin/uci' ] || return 1
	[ -e '/www/monitoring.wifimac' ] || return 1

	local mac; read -r mac <'/www/monitoring.wifimac'	# hex, lowercase

	hostname()
	{
		local wish="\$1"
		local now="\$( uci get system.@system[0].hostname )"

		[ "\$now" = "\$wish" ] || {
			_log it set_hostname daemon info "setting new hostname '\$wish' (was: '\$now')"
			uci set system.@system[0].hostname="\$wish"
			uci commit system
			echo "\$wish" >"/proc/sys/kernel/hostname"
		}
	}

	essid()
	{
		local wish="\$1"
		local now="\$( uci get wireless.@wifi-iface[0].ssid )"

		[ "\$now" = "\$wish" ] || {
			_log it set_ssid daemon info "setting new SSID '\$wish' (was: '\$now')"
			uci set wireless.@wifi-iface[0].ssid="\$wish"
			uci commit wireless
			wifi
		}
	}

	case "\$mac" in foo);;	# make syntax valid without any further entries
EOF

	COUNTER=0	# count AP's

	[ -z "$OPTION" ] && for FILE in $DIR_DATA_SOURCE/* ; do {

		MAC="$( basename "$FILE" | cut -d'.' -f1 )"

		echo "${TAB}${TAB}${MAC})"

		[ -e "$DIR_DATA_SOURCE/$MAC.hostname" ] && {
			HOSTNAME=
			read -r HOSTNAME <"$DIR_DATA_SOURCE/$MAC.hostname"
			[ -n "$HOSTNAME" ] && {
#				case "$HOSTNAME" in *'summit'*);;*)echo "${TAB}${TAB};;";continue;;esac

				logger -s "$MAC.hostname -> $HOSTNAME"
				echo "${TAB}${TAB}${TAB}hostname '$HOSTNAME'"
			}
		}

		case "$HOSTNAME" in
			*'-AP')
				COUNTER=$(( COUNTER + 1 ))
				ESSID="IFA $COUNTER"
				logger -s "$MAC.essid -> $ESSID (autogenerated)"
				echo "${TAB}${TAB}${TAB}essid '$ESSID'"
			;;
		esac

#		[ -e "$DIR_DATA_SOURCE/$MAC.essid" ] && {
#			ESSID=
#			read -r ESSID <"$DIR_DATA_SOURCE/$MAC.essid"
#			[ -n "$ESSID" ] && {
#				logger -s "$MAC.essid -> $ESSID"
#				echo "${TAB}${TAB}${TAB}essid '$ESSID'"
#			}
#		}

		echo "${TAB}${TAB};;"
	} done

	cat <<EOF
	esac
}

apply_settings
EOF
}

logger -s "working on: '$PWD/postinst'"
generate_script >'postinst'
sh -n 'postinst' || exit 1
chmod 777 'postinst' && cat 'postinst'

echo '2.0' >'debian-binary'

PKG_NAME='mysettings'
PKG_VERSION="$VERSION"

cat >'control' <<EOF
Package: $PKG_NAME
Version: $PKG_VERSION
Architecture: all
Priority: optional
Maintainer: Bastian Bittorf <technik@bittorf-wireless.de>
Section: net
Description: set specific params for network '$NETWORK', e.g. ESSID or HOSTNAME
Source: $DIR_DATA_SOURCE/
EOF

tar --ignore-failed-read -czf ./data.tar.gz '' 2>/dev/null
tar czf control.tar.gz ./control ./postinst
tar czf "${PKG_NAME}_${PKG_VERSION}.ipk" ./debian-binary ./control.tar.gz ./data.tar.gz

mv "${PKG_NAME}_${PKG_VERSION}.ipk" /var/www/networks/$NETWORK/packages
cd /var/www/networks/$NETWORK/packages || exit
/var/www/scripts/gen_package_list.sh start
rm -fR "$WDIR"

logger -s "now run: 'gen_package_list.sh' and remove old .ipk"

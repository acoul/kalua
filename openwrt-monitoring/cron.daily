#!/bin/sh

# ToDo:
#
# cd meshrdf
# ln -s /var/www/scripts/meshrdf_accept.sh meshrdf_accept.sh
#
# - verhindern, das cron_meshrdf doppelt laueft
# - vollbackup jeden tag (~1gig) auf anderen rechner
# - LOGROTATE: vds einpacken week -> monthXY -> monthXY-YEAR.tar.bz2
# - LOGROTATE: meshrdf.txt taeglich einpacken und als kw48 -> spater als month11-2010 speichern
# - pruefen ob sich fuerstengruft nachts gefuellt hat
# - RSS-Feed von logmeldungen bauen, auch dort nach einer woche: logrotate

ARG1="$1"

STACKPWD="$( pwd )"

HUMANDATE="$( export LC_ALL=C;date +%Y%b%d )"
# BASE="/var/www/networks/fuerstengruft"

mem_bytes_free ()
{                                                                                                                                  
        local MEM LINE
        while read -r LINE; do {
                case $LINE in
                        Mem:*)     set $LINE; MEM="$4" ; break ;;
                        MemFree:*) set $LINE; MEM="$(( $2 * 1024 ))" ; break ;;
                esac
        } done </proc/meminfo
        echo "$MEM"
}

touch /var/www/robots.txt					# prevents a spammed apache error-log

/var/www/scripts/build_sshpubkeys_automagic.sh start

[ -e "/var/www/data.bin" ] || {
	dd if=/dev/urandom of=/var/www/data.bin bs=1M count=50
}

file="/var/www/regdb/db.txt"
mkdir -p /var/www/regdb
url_regdb='http://git.kernel.org/cgit/linux/kernel/git/sforshee/wireless-regdb.git/plain/db.txt'
echo "# fetched from '$url_regdb' at $( date ) from $0" >"$file"
wget -O - "$url_regdb" >>"$file"

DIRTY=0
for FILE in /var/log/messages /var/log/apache2/access.log /var/log/apache2/error.log; do {
	SIZE="$( stat -c %s $FILE )"
	>$FILE

	[ $DIRTY = 0 ] && {
		DIRTY=1
		PID="$( pidof rsyslogd | head -n1 )"
		kill -1 $PID
		logger -s "$0: [OK] sigHUPed rsyslogd: kill -1 $PID"
	}	

	logger -s "$0: [OK] empty log $FILE size was $SIZE bytes"
} done

for DIR in rrd.gfx rrd.raw; do {
	ALL="/var/www/networks/fuerstengruft/$DIR/$HUMANDATE"
	logger -s "$0: [OK] mkdir $ALL"
	mkdir -p "$ALL"
	ls -l "$ALL"
	sleep 3
	echo
} done

for FILE in $( find /var/www/networks/fuerstengruft/rrd.raw -type f | grep \.rrd$ ); do {
	[ -e "$FILE.xml" ] || {
		logger -s "$0: [OK] xml-dumping $FILE"
		tird-rrdtool -arch mipsel dump "$FILE" >"$FILE.xml"
	}
} done

case "$ARG1" in
	fast)
		:
	;;
	*)
		logger -s "$0: [OK] building new rrd-archiv"
		cd /var/www/networks/fuerstengruft/ || exit
		tar cjf rrd.tar.bz2 rrd.gfx/ rrd.raw/
		SIZE="$( stat -c %s rrd.tar.bz2 2>/dev/null )"
		logger -s "$0: [OK] build ready: $SIZE bytes"
	;;
esac

LIST="$( find /var/www/networks/ -type d | grep "/vds$" | cut -d'/' -f5 )"
LIST="$( echo "$LIST" | while read -r LINE; do printf '%s' "$LINE "; done )"

I=0
for NETWORK in $LIST;do {
	I=$(( I + 1 ))
} done
IALL=$I

I=0
for NETWORK in $LIST;do {

	I=$(( I + 1 ))
	logger -s "$0: $NETWORK $I/$IALL"

	/var/www/scripts/apply_pubkeys_from_network-registrator_to_auth_keys.sh $NETWORK

#	echo $NETWORK | grep -q zumnorde || continue

	logger -s "$0: $NETWORK $I/$IALL - step0.1a - logrotate_meshrdf"
	/var/www/scripts/logrotate_meshrdf.sh /var/www/networks/$NETWORK/meshrdf/meshrdf.txt
	logger -s "$0: $NETWORK $I/$IALL - step0.1b - logrotate_meshrdf"

	mkdir -p /var/www/networks/$NETWORK/vds/backup_$$
logger -s "$0: $NETWORK $I/$IALL - step0.2 - next: 'cd /var/www/networks/$NETWORK/vds/backup_$$' pwd: '$( pwd )'"
	cd /var/www/networks/$NETWORK/vds/backup_$$ || exit
logger -s "$0: $NETWORK $I/$IALL - step0.3"
	mv ../user-* . 2>/dev/null

	logger -s "$0: $NETWORK $I/$IALL - step1"

	TARFILE="../backup-user-vds-week$( date +%V ).tar"
	logger -s "$0: $NETWORK $I/$IALL - step1.1"

	# count files in this dir
	set -- *
	COUNT=$#

	logger -s "$0: $NETWORK $I/$IALL - step1.2"
	SIZE1="$( stat -c %s $TARFILE 2>/dev/null )"
	logger -s "$0: $NETWORK $I/$IALL - step1.3"
	SIZE1="${SIZE1:=0}"

	logger -s "$0: $NETWORK $I/$IALL - step2 count: '$COUNT' pwd '$( pwd )' size: $SIZE1 tar: $TARFILE"
	logger -s "ram: $( mem_bytes_free ) step2.01 list: '$LIST'"

	ERROR=0
	if [ $COUNT -gt 0 ]; then
		logger -s "$0: $NETWORK: [DEBUG] attempting to add $COUNT vds-files to $TARFILE (size: $SIZE1) with 'tar --overwrite -rf \"$TARFILE\" asterisk'"
		tar --overwrite -rf "$TARFILE" ./* || ERROR=$?
		[ $ERROR -eq 0 ] && SIZE2="$( stat -c %s $TARFILE )"
		logger -s "$0: $NETWORK: [OK] added $COUNT vds-files to $TARFILE (size: $SIZE1 -> $SIZE2)"
		logger -s "$0: step2a"
	else
		logger -s "$0: $NETWORK: [DEBUG] no vds-data to backup"
	fi

	logger -s "$0: step2b"

	logger -s "$0: $NETWORK $I/$IALL - step3 error: '$ERROR' pwd: $( pwd )"
	cd ~ || exit
	logger -s "$0: $NETWORK $I/$IALL - step3.1 pwd: $( pwd )"

	if [ "$ERROR" = "0" ]; then
		logger -s "$0: $NETWORK: [DEBUG] removing backup_$$"
		rm -fR "/var/www/networks/$NETWORK/vds/backup_$$"
		logger -s "$0: $NETWORK: [DEBUG] removed!"
	else
		logger -s "$0: $NETWORK: [ERR] tar failed with $ERROR, check /var/www/networks/$NETWORK/vds/backup_$$"
	fi
} done

/var/www/scripts/apply_pubkeys_from_network-registrator_to_auth_keys.sh join_all

logger -s "$0: ready with arcing VDS-data, changing to dir '$STACKPWD'"
cd $STACKPWD || exit

logger -s "$0: [START] /var/www/scripts/meshrdf_cron.sh debug"
/var/www/scripts/meshrdf_cron.sh debug
logger -s "$0: [END] /var/www/scripts/meshrdf_cron.sh debug"

logger -s "$0: [DEBUG] apt-updating with id: $( id )"

if apt-get update; then
	logger -s "$0: [ERR] apt-update failed"
else
	logger -s "$0: [OK] apt-update"
fi

if apt-get dist-upgrade -y ; then
	logger -s "$0: [ERR] dist-upgrading with id: $( id )"
else
	logger -s "$0: [DEBUG] dist-upgrade failed"
fi

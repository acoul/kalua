From c58ef944f7531b5b63664234d097edce4ff3978b Mon Sep 17 00:00:00 2001
From: Bastian Bittorf <bittorf@bluebottle.com>
Date: Wed, 25 Nov 2015 09:58:59 +0100
Subject: [PATCH] basefiles: lock: use shell-implementation instead of patching
 busybox

This makes the file package/utils/busybox/patches/220-add_lock_util.patch
obsolete (an implementation in C). The users of this functionality are:

/lib/functions.sh
/lib/preinit/30_failsafe_wait
/lib/preinit/40_run_failsafe_hook
/lib/preinit/99_10_failsafe_login

with:
lock $file
lock -u $file
lock -w $file

Signed-off-by: Bastian Bittorf <bittorf@bluebottle.com>
---
 package/base-files/files/lib/functions.sh          |  36 ++++
 .../utils/busybox/patches/220-add_lock_util.patch  | 182 ---------------------
 2 files changed, 36 insertions(+), 182 deletions(-)
 delete mode 100644 package/utils/busybox/patches/220-add_lock_util.patch

diff --git a/package/base-files/files/lib/functions.sh b/package/base-files/files/lib/functions.sh
index dde1ac4..ce66e2c 100755
--- a/package/base-files/files/lib/functions.sh
+++ b/package/base-files/files/lib/functions.sh
@@ -3,6 +3,42 @@
 # Copyright (C) 2006 Fokus Fraunhofer <carsten.tittel@fokus.fraunhofer.de>
 # Copyright (C) 2010 Vertical Communications
 
+lock()
+{
+	local option="$1"
+	local file="$2"
+
+	case "$option" in
+		''|'-h'|'--help')
+			echo "Usage: lock [-suw] <filename>"
+			echo "             -s      Use shared locking	# FIXME"
+			echo "             -u      Unlock"
+			echo "             -w      Wait for the lock to become free, don't acquire lock"
+			echo "             -n      Don't wait for the lock to become free. Fail with exit code"
+		;;
+		'-u')
+			rm "$file" 2>/dev/null || true
+		;;
+		'-w')
+			while [ -e "$file" ]; do {
+				sleep 1
+				local i=$$	# add jitter
+				while [ $i -gt 0 ]; do i=$(( i - 1 )); done
+			} done
+		;;
+		'-n')
+			if [ -e "$file" ]; then
+				false
+			else
+				touch "$file"
+			fi
+		;;
+		*)
+			file="$option"
+			touch "$file"
+		;;
+	esac
+}
 
 debug () {
 	${DEBUG:-:} "$@"
diff --git a/package/utils/busybox/patches/220-add_lock_util.patch b/package/utils/busybox/patches/220-add_lock_util.patch
deleted file mode 100644
index 9cac9e6..0000000
--- a/package/utils/busybox/patches/220-add_lock_util.patch
+++ /dev/null
@@ -1,182 +0,0 @@
---- a/include/applets.src.h
-+++ b/include/applets.src.h
-@@ -211,6 +211,7 @@ IF_LN(APPLET_NOEXEC(ln, ln, BB_DIR_BIN,
- IF_LOAD_POLICY(APPLET(load_policy, BB_DIR_USR_SBIN, BB_SUID_DROP))
- IF_LOADFONT(APPLET(loadfont, BB_DIR_USR_SBIN, BB_SUID_DROP))
- IF_LOADKMAP(APPLET(loadkmap, BB_DIR_SBIN, BB_SUID_DROP))
-+IF_LOCK(APPLET(lock, BB_DIR_BIN, BB_SUID_DROP))
- IF_LOGGER(APPLET(logger, BB_DIR_USR_BIN, BB_SUID_DROP))
- /* Needs to be run by root or be suid root - needs to change uid and gid: */
- IF_LOGIN(APPLET(login, BB_DIR_BIN, BB_SUID_REQUIRE))
---- a/miscutils/Config.src
-+++ b/miscutils/Config.src
-@@ -385,6 +385,12 @@ config FEATURE_HDPARM_HDIO_GETSET_DMA
- 	help
- 	  Enables the 'hdparm -d' option to get/set using_dma flag.
- 
-+config LOCK
-+	bool "lock"
-+	default n
-+	help
-+	  Small utility for using locks in scripts
-+
- config MAKEDEVS
- 	bool "makedevs"
- 	default y
---- a/miscutils/Kbuild.src
-+++ b/miscutils/Kbuild.src
-@@ -28,6 +28,7 @@ lib-$(CONFIG_INOTIFYD)    += inotifyd.o
- lib-$(CONFIG_FEATURE_LAST_SMALL)+= last.o
- lib-$(CONFIG_FEATURE_LAST_FANCY)+= last_fancy.o
- lib-$(CONFIG_LESS)        += less.o
-+lib-$(CONFIG_LOCK)        += lock.o
- lib-$(CONFIG_MAKEDEVS)    += makedevs.o
- lib-$(CONFIG_MAN)         += man.o
- lib-$(CONFIG_MICROCOM)    += microcom.o
---- /dev/null
-+++ b/miscutils/lock.c
-@@ -0,0 +1,144 @@
-+/*
-+ * Copyright (C) 2006 Felix Fietkau <nbd@openwrt.org>
-+ *
-+ * This is free software, licensed under the GNU General Public License v2.
-+ */
-+#include <sys/types.h>
-+#include <sys/file.h>
-+#include <sys/stat.h>
-+#include <signal.h>
-+#include <fcntl.h>
-+#include <unistd.h>
-+#include <stdio.h>
-+#include "busybox.h"
-+
-+//usage:#define lock_trivial_usage NOUSAGE_STR
-+//usage:#define lock_full_usage ""
-+
-+static int unlock = 0;
-+static int shared = 0;
-+static int waitonly = 0;
-+static int try_lock = 0;
-+static int fd;
-+static char *file;
-+
-+static void usage(char *name)
-+{
-+	fprintf(stderr, "Usage: %s [-suw] <filename>\n"
-+	                "	-s	Use shared locking\n"
-+	                "	-u	Unlock\n"
-+	                "	-w	Wait for the lock to become free, don't acquire lock\n"
-+			"	-n	Don't wait for the lock to become free. Fail with exit code\n"
-+					"\n", name);
-+	exit(1);
-+}
-+
-+static void exit_unlock(int sig)
-+{
-+	flock(fd, LOCK_UN);
-+	exit(0);
-+}
-+
-+static int do_unlock(void)
-+{
-+	FILE *f;
-+	int i;
-+
-+	if ((f = fopen(file, "r")) == NULL)
-+		return 0;
-+
-+	fscanf(f, "%d", &i);
-+	if (i > 0)
-+		kill(i, SIGTERM);
-+
-+	fclose(f);
-+
-+	return 0;
-+}
-+
-+static int do_lock(void)
-+{
-+	int pid;
-+	int flags;
-+	char pidstr[8];
-+
-+	if ((fd = open(file, O_RDWR | O_CREAT | O_EXCL, 0700)) < 0) {
-+		if ((fd = open(file, O_RDWR)) < 0) {
-+			fprintf(stderr, "Can't open %s\n", file);
-+			return 1;
-+		}
-+	}
-+
-+	flags = shared ? LOCK_SH : LOCK_EX;
-+	flags |= try_lock ? LOCK_NB : 0;
-+
-+	if (flock(fd, flags) < 0) {
-+		fprintf(stderr, "Can't lock %s\n", file);
-+		return 1;
-+	}
-+
-+	pid = fork();
-+
-+	if (pid < 0)
-+		return -1;
-+
-+	if (pid == 0) {
-+		signal(SIGKILL, exit_unlock);
-+		signal(SIGTERM, exit_unlock);
-+		signal(SIGINT, exit_unlock);
-+		if (waitonly)
-+			exit_unlock(0);
-+		else
-+			while (1)
-+				sleep(1);
-+	} else {
-+		if (!waitonly) {
-+			lseek(fd, 0, SEEK_SET);
-+			ftruncate(fd, 0);
-+			sprintf(pidstr, "%d\n", pid);
-+			write(fd, pidstr, strlen(pidstr));
-+			close(fd);
-+		}
-+
-+		return 0;
-+	}
-+	return 0;
-+}
-+
-+int lock_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
-+int lock_main(int argc, char **argv)
-+{
-+	char **args = &argv[1];
-+	int c = argc - 1;
-+
-+	while ((*args != NULL) && (*args)[0] == '-') {
-+		char *ch = *args;
-+		while (*(++ch) > 0) {
-+			switch(*ch) {
-+				case 'w':
-+					waitonly = 1;
-+					break;
-+				case 's':
-+					shared = 1;
-+					break;
-+				case 'u':
-+					unlock = 1;
-+					break;
-+				case 'n':
-+					try_lock = 1;
-+					break;
-+			}
-+		}
-+		c--;
-+		args++;
-+	}
-+
-+	if (c != 1)
-+		usage(argv[0]);
-+
-+	file = *args;
-+	if (unlock)
-+		return do_unlock();
-+	else
-+		return do_lock();
-+}
-- 
1.8.1.2


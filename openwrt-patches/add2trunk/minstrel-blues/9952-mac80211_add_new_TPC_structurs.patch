--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -770,40 +770,46 @@ enum mac80211_rate_control_flags {
 #define IEEE80211_TX_RATE_TABLE_SIZE	4
 
 /**
- * struct ieee80211_tx_rate - rate selection/status
+ * struct ieee80211_tx_rate - rate & tpc selection/status
  *
  * @idx: rate index to attempt to send with
  * @flags: rate control flags (&enum mac80211_rate_control_flags)
  * @count: number of tries in this rate before going to the next rate
+ * @power: transmit power level in dBm to attempt to send with
  *
  * A value of -1 for @idx indicates an invalid rate and, if used
  * in an array of retry rates, that no more rates should be tried.
  *
+ * A value < -100 for @power (-100dBm equals 0.01mW) indicates an
+ * invalid power level.
+ *
  * When used for transmit status reporting, the driver should
- * always report the rate along with the flags it used.
+ * always report the rate and power along with the flags it used.
  *
  * &struct ieee80211_tx_info contains an array of these structs
  * in the control information, and it will be filled by the rate
- * control algorithm according to what should be sent. Within the
- * tx-path this array is of size IEEE80211_TX_MAX_RATES while in
- * the rx-path this array is of size IEEE80211_TX_MAX_STATUS_RATES.
- * For rate control this reduces rate array is sufficient for the
- * rate sampling annotation, as the remaining rates per frame are
- * filled be a rate table lookup. For example, if this array
- * contains, in the format { <idx>, <count> } the information
- *    { 3, 2 }, { 2, 6 }
+ * and power control algorithm according to what should be sent.
+ * Within the tx-path this array is of size IEEE80211_TX_MAX_RATES
+ * while in the rx-path this array is of size IEEE80211_TX_MAX_STATUS_RATES.
+ * For rate and power control this reduces rate/power array is
+ * sufficient for rate/power sampling annotations, as the remaining
+ * rates and power levels per frame are filled in by the rate-power
+ * table lookup. For example, if this array contains, in the format
+ * { <idx>, <power>, <count> } the information
+ *    { 3, 16, 2 }, { 2, 10, 6 }
  * then this means that the frame should be transmitted
- * up to twice at rate 3, up to six times at rate 2, and up to those
- * values filled in by the rate table lookup for the remaining rates.
- * if the frame doesn not get acknowledged. Say it gets
- * acknowledged by the peer after the fifth attempt, the status
- * information should then contain
- *   { 3, 2 }, { 2, 3 }, { -1, 0 }, { -1, 0 }
- * since it was transmitted twice at rate 3 and three times at rate 2
- * after which we received an acknowledgement.
+ * up to twice at rate 3 with 16dBm, up to six times at rate 2 with
+ * 10 dBm, and up to those values filled in by the rate-power table
+ * lookup for the remaining rates, if the frame doesn not get
+ * acknowledged. Say it gets acknowledged by the peer after the fifth
+ * attempt, the status information should then contain
+ *    { 3, 16, 2 }, { 2, 10, 3 }, { -1, -100, 0 }, { -1, -100, 0 }
+ * since it was transmitted twice at rate 3 with 16dBm and three
+ * times at rate 2 with 10dBm after which we received an acknowledgement.
  */
 struct ieee80211_tx_rate {
 	s8 idx;
+	s8 power;
 	u16 count:5,
 	    flags:11;
 } __packed;
@@ -863,7 +869,7 @@ struct ieee80211_tx_info {
 	union {
 		struct {
 			union {
-				/* rate control */
+				/* rate control & transmit power control */
 				struct {
 					struct ieee80211_tx_rate rates[
 						IEEE80211_TX_MAX_RATES];
@@ -894,13 +900,11 @@ struct ieee80211_tx_info {
 			u8 ampdu_len;
 			u8 antenna;
 			u16 tx_time;
-			void *status_driver_data[19 / sizeof(void *)];
+			void *status_driver_data[15 / sizeof(void *)];
 		} status;
 		struct {
 			struct ieee80211_tx_rate driver_rates[
 				IEEE80211_TX_MAX_STATUS_RATES];
-			u8 pad[4];
-
 			void *rate_driver_data[
 				IEEE80211_TX_INFO_RATE_DRIVER_DATA_SIZE / sizeof(void *)];
 		};
@@ -968,7 +972,7 @@ ieee80211_tx_info_clear_status(struct ie
 		info->status.rates[i].count = 0;
 
 	BUILD_BUG_ON(
-	    offsetof(struct ieee80211_tx_info, status.ack_signal) != 20);
+	    offsetof(struct ieee80211_tx_info, status.ack_signal) != 24);
 	memset(&info->status.ampdu_ack_len, 0,
 	       sizeof(struct ieee80211_tx_info) -
 	       offsetof(struct ieee80211_tx_info, status.ampdu_ack_len));
@@ -1645,16 +1649,17 @@ enum ieee80211_sta_rx_bandwidth {
 };
 
 /**
- * struct ieee80211_sta_rates - station rate selection table
+ * struct ieee80211_sta_rates - station rate-power selection table
  *
  * @rcu_head: RCU head used for freeing the table on update
- * @rate: transmit rates/flags to be used by default.
+ * @rate: transmit rates/power-level/flags to be used by default.
  *	Overriding entries per-packet is possible by using cb tx control.
  */
 struct ieee80211_sta_rates {
 	struct rcu_head rcu_head;
 	struct {
 		s8 idx;
+		s8 power;
 		u8 count;
 		u8 count_cts;
 		u8 count_rts;
@@ -1921,6 +1926,16 @@ struct ieee80211_txq {
  *	by just its MAC address; this prevents, for example, the same station
  *	from connecting to two virtual AP interfaces at the same time.
  *
+ * @IEEE80211_HW_SUPPORTS_TPC_PER_PACKET: The hardware/driver supports transmit
+ *	power control (TPC) with one power level per data packet.
+ *
+ * @IEEE80211_HW_SUPPORTS_TPC_PER_MRR: The hardware/driver supports transmit
+ *	power control (TPC) with individual power levels for each
+ *	multi-rate-retry (mrr) stage per data packet.
+ *
+ * @IEEE80211_HW_SUPPORTS_TPC_PER_MRR: The hardware/driver supports transmit
+ *	power control (TPC) for ACK packets.
+ *
  * @NUM_IEEE80211_HW_FLAGS: number of hardware flags, used for sizing arrays
  */
 enum ieee80211_hw_flags {
@@ -1957,6 +1972,9 @@ enum ieee80211_hw_flags {
 	IEEE80211_HW_SUPPORTS_AMSDU_IN_AMPDU,
 	IEEE80211_HW_BEACON_TX_STATUS,
 	IEEE80211_HW_NEEDS_UNIQUE_STA_ADDR,
+	IEEE80211_HW_SUPPORTS_TPC_PER_PACKET,
+	IEEE80211_HW_SUPPORTS_TPC_PER_MRR,
+	IEEE80211_HW_SUPPORTS_TPC_FOR_ACK_PACKETS,
 
 	/* keep last, obviously */
 	NUM_IEEE80211_HW_FLAGS
@@ -2057,6 +2075,11 @@ enum ieee80211_hw_flags {
  *	Use IEEE80211_WMM_IE_STA_QOSINFO_SP_* for correct values.
  *
  * @n_cipher_schemes: a size of an array of cipher schemes definitions.
+ *
+ * @min_power: minimum power level in dBm, that is supported by the hardware.
+ *	Negative values are possible (e.g. -5 dBm). The lowest power level
+ *	is -100 dBm (which equals 0.01 mW). A value below -100 is invalid.
+ *
  * @cipher_schemes: a pointer to an array of cipher scheme definitions
  *	supported by HW.
  *
@@ -2090,6 +2113,7 @@ struct ieee80211_hw {
 	u8 uapsd_queues;
 	u8 uapsd_max_sp_len;
 	u8 n_cipher_schemes;
+	s8 min_power;
 	const struct ieee80211_cipher_scheme *cipher_schemes;
 	int txq_ac_max_pending;
 };
@@ -3921,16 +3945,19 @@ void ieee80211_sta_set_buffered(struct i
 				u8 tid, bool buffered);
 
 /**
- * ieee80211_get_tx_rates - get the selected transmit rates for a packet
+ * ieee80211_get_tx_rates - get the selected transmit rates and power
+ * levels for a packet
  *
  * Call this function in a driver with per-packet rate selection support
  * to combine the rate info in the packet tx info with the most recent
  * rate selection table for the station entry.
+ * This also includes power levels meant for drivers that utilize hardware
+ * support for per packet or MRR stage power annotation.
  *
  * @vif: &struct ieee80211_vif pointer from the add_interface callback.
  * @sta: the receiver station to which this packet is sent.
  * @skb: the frame to be transmitted.
- * @dest: buffer for extracted rate/retry information
+ * @dest: buffer for extracted rate/retry and power level information
  * @max_rates: maximum number of rates to fetch
  */
 void ieee80211_get_tx_rates(struct ieee80211_vif *vif,
--- a/net/mac80211/debugfs.c
+++ b/net/mac80211/debugfs.c
@@ -126,6 +126,9 @@ static const char *hw_flag_names[NUM_IEE
 	FLAG(SUPPORTS_AMSDU_IN_AMPDU),
 	FLAG(BEACON_TX_STATUS),
 	FLAG(NEEDS_UNIQUE_STA_ADDR),
+	FLAG(SUPPORTS_TPC_PER_PACKET),
+	FLAG(SUPPORTS_TPC_PER_MRR),
+	FLAG(SUPPORTS_TPC_FOR_ACK_PACKETS),
 
 	/* keep last for the build bug below */
 	(void *)0x1

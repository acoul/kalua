From dc3103e7fef1afb1c7c76bc83d1d6d78079284da Mon Sep 17 00:00:00 2001
From: ayaka <ayaka@soulik.info>
Date: Fri, 28 Aug 2015 18:00:58 +0800
Subject: [PATCH 2/2] obfuscation: apply xor in SSL layer

NOTE: It only work with OpenSSL library not PolarSSL library.
The xor patch before only worked with IP tunnel package.

Signed-off-by: ayaka <ayaka@soulik.info>
Signed-off-by: Bastian Bittorf <bittorf@bluebottle.com>
---
 src/openvpn/options.c      |  3 +++
 src/openvpn/options.h      |  1 +
 src/openvpn/ssl.c          | 10 ++++++++++
 src/openvpn/ssl_openssl.c  | 45 +++++++++++++++++++++++++++++++++++++++------
 src/openvpn/ssl_openssl.h  |  2 ++
 src/openvpn/ssl_polarssl.c |  2 ++
 src/openvpn/ssl_polarssl.h |  2 ++
 7 files changed, 59 insertions(+), 6 deletions(-)

diff --git a/src/openvpn/options.c b/src/openvpn/options.c
index 5e3caf4..b764510 100644
--- a/src/openvpn/options.c
+++ b/src/openvpn/options.c
@@ -6593,6 +6593,9 @@ add_option (struct options *options,
     {
       VERIFY_PERMISSION (OPT_P_GENERAL);
       options->xor_secret = p[1];
+      if (p[2]) {
+	      options->xor_ssl_secret = p[2];
+      }
     }
   else if (streq (p[0], "padding") && p[1])
     {
diff --git a/src/openvpn/options.h b/src/openvpn/options.h
index d335ac9..26f46f0 100644
--- a/src/openvpn/options.h
+++ b/src/openvpn/options.h
@@ -522,6 +522,7 @@ struct options
   const char *dh_file_inline;
   const char *pkcs12_file_inline; /* contains the base64 encoding of pkcs12 file */
   const char *xor_secret;
+  const char *xor_ssl_secret;
   const char *padding;
 
   int ns_cert_type; /* set to 0, NS_CERT_CHECK_SERVER, or NS_CERT_CHECK_CLIENT */
diff --git a/src/openvpn/ssl.c b/src/openvpn/ssl.c
index a17c738..cf88849 100644
--- a/src/openvpn/ssl.c
+++ b/src/openvpn/ssl.c
@@ -566,6 +566,16 @@ init_ssl (const struct options *options, struct tls_root_ctx *new_ctx)
   tls_ctx_personalise_random (new_ctx);
 #endif
 
+  /* Load the xor key for SSL part */
+  if (NULL != options->xor_ssl_secret)
+  {
+    new_ctx->xor_key = options->xor_ssl_secret;
+  }
+  else
+  {
+    new_ctx->xor_key = NULL;
+  }
+
   tls_clear_error ();
   return;
 
diff --git a/src/openvpn/ssl_openssl.c b/src/openvpn/ssl_openssl.c
index be33caa..18edc7d 100644
--- a/src/openvpn/ssl_openssl.c
+++ b/src/openvpn/ssl_openssl.c
@@ -57,6 +57,7 @@
 #include <openssl/x509.h>
 #include <openssl/crypto.h>
 
+#include "xor.h"
 /*
  * Allocate space in SSL objects in which to store a struct tls_session
  * pointer back to parent.
@@ -1057,6 +1058,20 @@ bio_write (BIO *bio, const uint8_t *data, int size, const char *desc)
   return ret;
 }
 
+static int
+bio_write_xor (BIO *bio, const uint8_t *data, int size, const char *desc,
+		const char *xor_key)
+{
+	uint8_t tmp[TLS_CHANNEL_BUF_SIZE];
+
+	if (NULL == tmp || size > TLS_CHANNEL_BUF_SIZE)
+		return bio_write(bio, data, size, desc); 
+	
+	memcpy(tmp, data, size);
+	xor_encode(tmp, size, xor_key);
+	return bio_write(bio, tmp, size, desc); 
+
+}
 /*
  * Inline functions for reading from and writing
  * to BIOs.
@@ -1132,6 +1147,17 @@ bio_read (BIO *bio, struct buffer *buf, int maxlen, const char *desc)
   return ret;
 }
 
+static int
+bio_read_xor (BIO *bio, struct buffer *buf, int maxlen, const char *desc,
+		const char *xor_key)
+{
+	int size;
+	size = bio_read(bio, buf, maxlen, desc);
+	xor_encode(BPTR(buf), BLEN(buf), xor_key);
+
+	return size;
+}
+
 void
 key_state_ssl_init(struct key_state_ssl *ks_ssl, const struct tls_root_ctx *ssl_ctx, bool is_server, struct tls_session *session)
 {
@@ -1150,6 +1176,8 @@ key_state_ssl_init(struct key_state_ssl *ks_ssl, const struct tls_root_ctx *ssl_
   ks_ssl->ssl_bio = getbio (BIO_f_ssl (), "ssl_bio");
   ks_ssl->ct_in = getbio (BIO_s_mem (), "ct_in");
   ks_ssl->ct_out = getbio (BIO_s_mem (), "ct_out");
+  /* set ssl xor key */
+  ks_ssl->xor_key = ssl_ctx->xor_key;
 
 #ifdef BIO_DEBUG
   bio_debug_oc ("open ssl_bio", ks_ssl->ssl_bio);
@@ -1188,8 +1216,9 @@ key_state_write_plaintext (struct key_state_ssl *ks_ssl, struct buffer *buf)
 #ifdef ENABLE_CRYPTO_OPENSSL
   ASSERT (NULL != ks_ssl);
 
-  ret = bio_write (ks_ssl->ssl_bio, BPTR(buf), BLEN(buf),
-      "tls_write_plaintext");
+  ret = bio_write_xor (ks_ssl->ssl_bio, BPTR(buf), BLEN(buf),
+      "tls_write_plaintext",
+      ks_ssl->xor_key);
   bio_write_post (ret, buf);
 #endif /* ENABLE_CRYPTO_OPENSSL */
 
@@ -1205,7 +1234,8 @@ key_state_write_plaintext_const (struct key_state_ssl *ks_ssl, const uint8_t *da
 
   ASSERT (NULL != ks_ssl);
 
-  ret = bio_write (ks_ssl->ssl_bio, data, len, "tls_write_plaintext_const");
+  ret = bio_write_xor (ks_ssl->ssl_bio, data, len, "tls_write_plaintext_const",
+		  ks_ssl->xor_key);
 
   perf_pop ();
   return ret;
@@ -1220,7 +1250,8 @@ key_state_read_ciphertext (struct key_state_ssl *ks_ssl, struct buffer *buf,
 
   ASSERT (NULL != ks_ssl);
 
-  ret = bio_read (ks_ssl->ct_out, buf, maxlen, "tls_read_ciphertext");
+  ret = bio_read_xor (ks_ssl->ct_out, buf, maxlen, "tls_read_ciphertext",
+		  ks_ssl->xor_key);
 
   perf_pop ();
   return ret;
@@ -1234,7 +1265,8 @@ key_state_write_ciphertext (struct key_state_ssl *ks_ssl, struct buffer *buf)
 
   ASSERT (NULL != ks_ssl);
 
-  ret = bio_write (ks_ssl->ct_in, BPTR(buf), BLEN(buf), "tls_write_ciphertext");
+  ret = bio_write_xor (ks_ssl->ct_in, BPTR(buf), BLEN(buf), "tls_write_ciphertext",
+		  ks_ssl->xor_key);
   bio_write_post (ret, buf);
 
   perf_pop ();
@@ -1250,7 +1282,8 @@ key_state_read_plaintext (struct key_state_ssl *ks_ssl, struct buffer *buf,
 
   ASSERT (NULL != ks_ssl);
 
-  ret = bio_read (ks_ssl->ssl_bio, buf, maxlen, "tls_read_plaintext");
+  ret = bio_read_xor (ks_ssl->ssl_bio, buf, maxlen, "tls_read_plaintext",
+		  ks_ssl->xor_key);
 
   perf_pop ();
   return ret;
diff --git a/src/openvpn/ssl_openssl.h b/src/openvpn/ssl_openssl.h
index 73a6c49..a709079 100644
--- a/src/openvpn/ssl_openssl.h
+++ b/src/openvpn/ssl_openssl.h
@@ -50,6 +50,7 @@
  */
 struct tls_root_ctx {
     SSL_CTX *ctx;
+    const char *xor_key;
 };
 
 struct key_state_ssl {
@@ -57,6 +58,7 @@ struct key_state_ssl {
     BIO *ssl_bio;			/* read/write plaintext from here */
     BIO *ct_in;			/* write ciphertext to here */
     BIO *ct_out;			/* read ciphertext from here */
+    const uint8_t *xor_key;
 };
 
 /**
diff --git a/src/openvpn/ssl_polarssl.c b/src/openvpn/ssl_polarssl.c
index 30c7395..ec65c88 100644
--- a/src/openvpn/ssl_polarssl.c
+++ b/src/openvpn/ssl_polarssl.c
@@ -779,6 +779,8 @@ void key_state_ssl_init(struct key_state_ssl *ks_ssl,
       ALLOC_OBJ_CLEAR (ks_ssl->ct_out, endless_buffer);
       ssl_set_bio (ks_ssl->ctx, endless_buf_read, ks_ssl->ct_in,
 	  endless_buf_write, ks_ssl->ct_out);
+      /* set ssl xor key */
+      ks_ssl->xor_key = ssl_ctx->xor_key;
     }
 }
 
diff --git a/src/openvpn/ssl_polarssl.h b/src/openvpn/ssl_polarssl.h
index fc9aa78..152590b 100644
--- a/src/openvpn/ssl_polarssl.h
+++ b/src/openvpn/ssl_polarssl.h
@@ -74,12 +74,14 @@ struct tls_root_ctx {
     struct external_context *external_key; /**< Management external key */
 #endif
     int * allowed_ciphers;	/**< List of allowed ciphers for this connection */
+    const char *xor_key;
 };
 
 struct key_state_ssl {
         ssl_context *ctx;
         endless_buffer *ct_in;
         endless_buffer *ct_out;
+	const uint8_t *xor_key;
 };
 
 
-- 
2.1.4

